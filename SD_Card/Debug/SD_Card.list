
SD_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a260  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800a530  0800a530  0001a530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a6fc  0800a6fc  0001a6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a700  0800a700  0001a700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  24000000  0800a704  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000690  2400006c  0800a770  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000c04  240006fc  0800a770  000206fc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 10 .debug_info   000107bf  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ad1  00000000  00000000  0003089c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ee0  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b20  00000000  00000000  00034250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003446c  00000000  00000000  00034d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001480d  00000000  00000000  000691dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00141782  00000000  00000000  0007d9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00004324  00000000  00000000  001bf16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001c3490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400006c 	.word	0x2400006c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a518 	.word	0x0800a518

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000070 	.word	0x24000070
 800030c:	0800a518 	.word	0x0800a518

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b5b0      	push	{r4, r5, r7, lr}
 80003c2:	b0a6      	sub	sp, #152	; 0x98
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "Hello from Mohamed :), SDIO DMA RTOS"; /* File write buffer */
 80003c6:	4b32      	ldr	r3, [pc, #200]	; (8000490 <main+0xd0>)
 80003c8:	f107 0468 	add.w	r4, r7, #104	; 0x68
 80003cc:	461d      	mov	r5, r3
 80003ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80003da:	6020      	str	r0, [r4, #0]
 80003dc:	3404      	adds	r4, #4
 80003de:	7021      	strb	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 fbc8 	bl	8000b74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f868 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f000 f8f4 	bl	80005d4 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 80003ec:	f000 f8d4 	bl	8000598 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80003f0:	f006 fd04 	bl	8006dfc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 80003f4:	2200      	movs	r2, #0
 80003f6:	4927      	ldr	r1, [pc, #156]	; (8000494 <main+0xd4>)
 80003f8:	4827      	ldr	r0, [pc, #156]	; (8000498 <main+0xd8>)
 80003fa:	f008 fc7d 	bl	8008cf8 <f_mount>

  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 80003fe:	2200      	movs	r2, #0
 8000400:	4924      	ldr	r1, [pc, #144]	; (8000494 <main+0xd4>)
 8000402:	4825      	ldr	r0, [pc, #148]	; (8000498 <main+0xd8>)
 8000404:	f008 fc78 	bl	8008cf8 <f_mount>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d003      	beq.n	8000416 <main+0x56>
  	{
  		//Error_Handler();
		printf("Failed to mount file\r\n");
 800040e:	4823      	ldr	r0, [pc, #140]	; (800049c <main+0xdc>)
 8000410:	f009 fa18 	bl	8009844 <puts>
 8000414:	e035      	b.n	8000482 <main+0xc2>
  	}
  	else
  	{

		//Open file for writing (Create)
		if(f_open(&SDFile, "STM32.TXT", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8000416:	220a      	movs	r2, #10
 8000418:	4921      	ldr	r1, [pc, #132]	; (80004a0 <main+0xe0>)
 800041a:	4822      	ldr	r0, [pc, #136]	; (80004a4 <main+0xe4>)
 800041c:	f008 fcb2 	bl	8008d84 <f_open>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d003      	beq.n	800042e <main+0x6e>
		{
			//Error_Handler();
			printf("Failed to open Write file\r\n");
 8000426:	4820      	ldr	r0, [pc, #128]	; (80004a8 <main+0xe8>)
 8000428:	f009 fa0c 	bl	8009844 <puts>
 800042c:	e029      	b.n	8000482 <main+0xc2>
		}
		else
		{

			//Write to the text file
			res = f_write(&SDFile, wtext, strlen((char *)wtext), (void *)&byteswritten);
 800042e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000432:	4618      	mov	r0, r3
 8000434:	f7ff ff6c 	bl	8000310 <strlen>
 8000438:	4602      	mov	r2, r0
 800043a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800043e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8000442:	4818      	ldr	r0, [pc, #96]	; (80004a4 <main+0xe4>)
 8000444:	f008 fe5c 	bl	8009100 <f_write>
 8000448:	4603      	mov	r3, r0
 800044a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			if((byteswritten == 0) || (res != FR_OK))
 800044e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000452:	2b00      	cmp	r3, #0
 8000454:	d003      	beq.n	800045e <main+0x9e>
 8000456:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800045a:	2b00      	cmp	r3, #0
 800045c:	d005      	beq.n	800046a <main+0xaa>
			{
				printf("Failed to write file!\r\n");
 800045e:	4813      	ldr	r0, [pc, #76]	; (80004ac <main+0xec>)
 8000460:	f009 f9f0 	bl	8009844 <puts>
				Error_Handler();
 8000464:	f000 f920 	bl	80006a8 <Error_Handler>
 8000468:	e008      	b.n	800047c <main+0xbc>
			}
			else
			{
				printf("File written successfully\r\n");
 800046a:	4811      	ldr	r0, [pc, #68]	; (80004b0 <main+0xf0>)
 800046c:	f009 f9ea 	bl	8009844 <puts>
				printf("Write Content: %s\r\n", wtext);
 8000470:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000474:	4619      	mov	r1, r3
 8000476:	480f      	ldr	r0, [pc, #60]	; (80004b4 <main+0xf4>)
 8000478:	f009 f97e 	bl	8009778 <iprintf>
			}
			f_close(&SDFile);
 800047c:	4809      	ldr	r0, [pc, #36]	; (80004a4 <main+0xe4>)
 800047e:	f009 f832 	bl	80094e6 <f_close>

		}

  	}
  	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000482:	2200      	movs	r2, #0
 8000484:	2100      	movs	r1, #0
 8000486:	4804      	ldr	r0, [pc, #16]	; (8000498 <main+0xd8>)
 8000488:	f008 fc36 	bl	8008cf8 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048c:	e7fe      	b.n	800048c <main+0xcc>
 800048e:	bf00      	nop
 8000490:	0800a5b8 	.word	0x0800a5b8
 8000494:	24000110 	.word	0x24000110
 8000498:	24000114 	.word	0x24000114
 800049c:	0800a530 	.word	0x0800a530
 80004a0:	0800a548 	.word	0x0800a548
 80004a4:	24000344 	.word	0x24000344
 80004a8:	0800a554 	.word	0x0800a554
 80004ac:	0800a570 	.word	0x0800a570
 80004b0:	0800a588 	.word	0x0800a588
 80004b4:	0800a5a4 	.word	0x0800a5a4

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09c      	sub	sp, #112	; 0x70
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004c2:	224c      	movs	r2, #76	; 0x4c
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f009 fa9c 	bl	8009a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2220      	movs	r2, #32
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f009 fa96 	bl	8009a04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004d8:	2002      	movs	r0, #2
 80004da:	f000 fed1 	bl	8001280 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004de:	2300      	movs	r3, #0
 80004e0:	603b      	str	r3, [r7, #0]
 80004e2:	4b2c      	ldr	r3, [pc, #176]	; (8000594 <SystemClock_Config+0xdc>)
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80004ea:	4a2a      	ldr	r2, [pc, #168]	; (8000594 <SystemClock_Config+0xdc>)
 80004ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f0:	6193      	str	r3, [r2, #24]
 80004f2:	4b28      	ldr	r3, [pc, #160]	; (8000594 <SystemClock_Config+0xdc>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80004fa:	603b      	str	r3, [r7, #0]
 80004fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004fe:	bf00      	nop
 8000500:	4b24      	ldr	r3, [pc, #144]	; (8000594 <SystemClock_Config+0xdc>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800050c:	d1f8      	bne.n	8000500 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800050e:	2302      	movs	r3, #2
 8000510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000512:	2301      	movs	r3, #1
 8000514:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000516:	2340      	movs	r3, #64	; 0x40
 8000518:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800051a:	2302      	movs	r3, #2
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051e:	2300      	movs	r3, #0
 8000520:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000522:	2304      	movs	r3, #4
 8000524:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000526:	230c      	movs	r3, #12
 8000528:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800052a:	2302      	movs	r3, #2
 800052c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800052e:	2302      	movs	r3, #2
 8000530:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000532:	2302      	movs	r3, #2
 8000534:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000536:	230c      	movs	r3, #12
 8000538:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800053a:	2300      	movs	r3, #0
 800053c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fef4 	bl	8001334 <HAL_RCC_OscConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000552:	f000 f8a9 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000556:	233f      	movs	r3, #63	; 0x3f
 8000558:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fab4 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000586:	f000 f88f 	bl	80006a8 <Error_Handler>
  }
}
 800058a:	bf00      	nop
 800058c:	3770      	adds	r7, #112	; 0x70
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	58024800 	.word	0x58024800

08000598 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800059c:	4b0b      	ldr	r3, [pc, #44]	; (80005cc <MX_SDMMC1_SD_Init+0x34>)
 800059e:	4a0c      	ldr	r2, [pc, #48]	; (80005d0 <MX_SDMMC1_SD_Init+0x38>)
 80005a0:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80005a2:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_SDMMC1_SD_Init+0x34>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <MX_SDMMC1_SD_Init+0x34>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80005ae:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_SDMMC1_SD_Init+0x34>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <MX_SDMMC1_SD_Init+0x34>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80005ba:	4b04      	ldr	r3, [pc, #16]	; (80005cc <MX_SDMMC1_SD_Init+0x34>)
 80005bc:	2200      	movs	r2, #0
 80005be:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	24000088 	.word	0x24000088
 80005d0:	52007000 	.word	0x52007000

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <MX_GPIO_Init+0xcc>)
 80005ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80005f0:	4a2b      	ldr	r2, [pc, #172]	; (80006a0 <MX_GPIO_Init+0xcc>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80005fa:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <MX_GPIO_Init+0xcc>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000600:	f003 0310 	and.w	r3, r3, #16
 8000604:	613b      	str	r3, [r7, #16]
 8000606:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <MX_GPIO_Init+0xcc>)
 800060a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800060e:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000614:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000618:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <MX_GPIO_Init+0xcc>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800061e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800062c:	4a1c      	ldr	r2, [pc, #112]	; (80006a0 <MX_GPIO_Init+0xcc>)
 800062e:	f043 0302 	orr.w	r3, r3, #2
 8000632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000636:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800063c:	f003 0302 	and.w	r3, r3, #2
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_GPIO_Init+0xcc>)
 800064c:	f043 0304 	orr.w	r3, r3, #4
 8000650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000662:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <MX_GPIO_Init+0xcc>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_GPIO_Init+0xcc>)
 8000674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000678:	f003 0308 	and.w	r3, r3, #8
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : SD_Card_Pin */
  GPIO_InitStruct.Pin = SD_Card_Pin;
 8000680:	2304      	movs	r3, #4
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000688:	2302      	movs	r3, #2
 800068a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Card_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_GPIO_Init+0xd0>)
 8000694:	f000 fc34 	bl	8000f00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000698:	bf00      	nop
 800069a:	3728      	adds	r7, #40	; 0x28
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	58024400 	.word	0x58024400
 80006a4:	58021000 	.word	0x58021000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <HAL_MspInit+0x3c>)
 80006bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006c0:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <HAL_MspInit+0x3c>)
 80006c2:	f043 0302 	orr.w	r3, r3, #2
 80006c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x3c>)
 80006cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2005      	movs	r0, #5
 80006de:	f000 fbda 	bl	8000e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80006e2:	2005      	movs	r0, #5
 80006e4:	f000 fbf1 	bl	8000eca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e8:	bf00      	nop
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	58024400 	.word	0x58024400

080006f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0ba      	sub	sp, #232	; 0xe8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	22b8      	movs	r2, #184	; 0xb8
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f009 f975 	bl	8009a04 <memset>
  if(hsd->Instance==SDMMC1)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a4f      	ldr	r2, [pc, #316]	; (800085c <HAL_SD_MspInit+0x168>)
 8000720:	4293      	cmp	r3, r2
 8000722:	f040 8097 	bne.w	8000854 <HAL_SD_MspInit+0x160>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000726:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800072a:	f04f 0300 	mov.w	r3, #0
 800072e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000732:	2300      	movs	r3, #0
 8000734:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fd4a 	bl	80021d4 <HAL_RCCEx_PeriphCLKConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8000746:	f7ff ffaf 	bl	80006a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <HAL_SD_MspInit+0x16c>)
 800074c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000750:	4a43      	ldr	r2, [pc, #268]	; (8000860 <HAL_SD_MspInit+0x16c>)
 8000752:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000756:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800075a:	4b41      	ldr	r3, [pc, #260]	; (8000860 <HAL_SD_MspInit+0x16c>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000764:	617b      	str	r3, [r7, #20]
 8000766:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000768:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <HAL_SD_MspInit+0x16c>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	4a3c      	ldr	r2, [pc, #240]	; (8000860 <HAL_SD_MspInit+0x16c>)
 8000770:	f043 0302 	orr.w	r3, r3, #2
 8000774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000778:	4b39      	ldr	r3, [pc, #228]	; (8000860 <HAL_SD_MspInit+0x16c>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <HAL_SD_MspInit+0x16c>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	4a34      	ldr	r2, [pc, #208]	; (8000860 <HAL_SD_MspInit+0x16c>)
 800078e:	f043 0304 	orr.w	r3, r3, #4
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <HAL_SD_MspInit+0x16c>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a4:	4b2e      	ldr	r3, [pc, #184]	; (8000860 <HAL_SD_MspInit+0x16c>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <HAL_SD_MspInit+0x16c>)
 80007ac:	f043 0308 	orr.w	r3, r3, #8
 80007b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <HAL_SD_MspInit+0x16c>)
 80007b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PB13     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d6:	2303      	movs	r3, #3
 80007d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007dc:	230c      	movs	r3, #12
 80007de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80007e6:	4619      	mov	r1, r3
 80007e8:	481e      	ldr	r0, [pc, #120]	; (8000864 <HAL_SD_MspInit+0x170>)
 80007ea:	f000 fb89 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000808:	230c      	movs	r3, #12
 800080a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000812:	4619      	mov	r1, r3
 8000814:	4814      	ldr	r0, [pc, #80]	; (8000868 <HAL_SD_MspInit+0x174>)
 8000816:	f000 fb73 	bl	8000f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800081a:	2304      	movs	r3, #4
 800081c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000832:	230c      	movs	r3, #12
 8000834:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000838:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800083c:	4619      	mov	r1, r3
 800083e:	480b      	ldr	r0, [pc, #44]	; (800086c <HAL_SD_MspInit+0x178>)
 8000840:	f000 fb5e 	bl	8000f00 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	2031      	movs	r0, #49	; 0x31
 800084a:	f000 fb24 	bl	8000e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800084e:	2031      	movs	r0, #49	; 0x31
 8000850:	f000 fb3b 	bl	8000eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	37e8      	adds	r7, #232	; 0xe8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	52007000 	.word	0x52007000
 8000860:	58024400 	.word	0x58024400
 8000864:	58020400 	.word	0x58020400
 8000868:	58020800 	.word	0x58020800
 800086c:	58020c00 	.word	0x58020c00

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f9cc 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <SDMMC1_IRQHandler+0x10>)
 80008da:	f004 fad1 	bl	8004e80 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000088 	.word	0x24000088

080008e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	e00a      	b.n	8000910 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008fa:	f3af 8000 	nop.w
 80008fe:	4601      	mov	r1, r0
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	60ba      	str	r2, [r7, #8]
 8000906:	b2ca      	uxtb	r2, r1
 8000908:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	3301      	adds	r3, #1
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697a      	ldr	r2, [r7, #20]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	429a      	cmp	r2, r3
 8000916:	dbf0      	blt.n	80008fa <_read+0x12>
  }

  return len;
 8000918:	687b      	ldr	r3, [r7, #4]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3718      	adds	r7, #24
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e009      	b.n	8000948 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	dbf1      	blt.n	8000934 <_write+0x12>
  }
  return len;
 8000950:	687b      	ldr	r3, [r7, #4]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <_close>:

int _close(int file)
{
 800095a:	b480      	push	{r7}
 800095c:	b083      	sub	sp, #12
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000966:	4618      	mov	r0, r3
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000982:	605a      	str	r2, [r3, #4]
  return 0;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <_isatty>:

int _isatty(int file)
{
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009b4:	2300      	movs	r3, #0
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
	...

080009c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009cc:	4a14      	ldr	r2, [pc, #80]	; (8000a20 <_sbrk+0x5c>)
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <_sbrk+0x60>)
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009d8:	4b13      	ldr	r3, [pc, #76]	; (8000a28 <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d102      	bne.n	80009e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <_sbrk+0x64>)
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_sbrk+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <_sbrk+0x64>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d207      	bcs.n	8000a04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009f4:	f009 f854 	bl	8009aa0 <__errno>
 80009f8:	4603      	mov	r3, r0
 80009fa:	220c      	movs	r2, #12
 80009fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000a02:	e009      	b.n	8000a18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a04:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <_sbrk+0x64>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a0a:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <_sbrk+0x64>)
 8000a14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a16:	68fb      	ldr	r3, [r7, #12]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	24050000 	.word	0x24050000
 8000a24:	00000800 	.word	0x00000800
 8000a28:	24000104 	.word	0x24000104
 8000a2c:	24000700 	.word	0x24000700

08000a30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a34:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <SystemInit+0xd0>)
 8000a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a3a:	4a31      	ldr	r2, [pc, #196]	; (8000b00 <SystemInit+0xd0>)
 8000a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <SystemInit+0xd4>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	2b06      	cmp	r3, #6
 8000a4e:	d807      	bhi.n	8000a60 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a50:	4b2c      	ldr	r3, [pc, #176]	; (8000b04 <SystemInit+0xd4>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f023 030f 	bic.w	r3, r3, #15
 8000a58:	4a2a      	ldr	r2, [pc, #168]	; (8000b04 <SystemInit+0xd4>)
 8000a5a:	f043 0307 	orr.w	r3, r3, #7
 8000a5e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <SystemInit+0xd8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <SystemInit+0xd8>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <SystemInit+0xd8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a72:	4b25      	ldr	r3, [pc, #148]	; (8000b08 <SystemInit+0xd8>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	4924      	ldr	r1, [pc, #144]	; (8000b08 <SystemInit+0xd8>)
 8000a78:	4b24      	ldr	r3, [pc, #144]	; (8000b0c <SystemInit+0xdc>)
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <SystemInit+0xd4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f003 0308 	and.w	r3, r3, #8
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <SystemInit+0xd4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f023 030f 	bic.w	r3, r3, #15
 8000a92:	4a1c      	ldr	r2, [pc, #112]	; (8000b04 <SystemInit+0xd4>)
 8000a94:	f043 0307 	orr.w	r3, r3, #7
 8000a98:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <SystemInit+0xd8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <SystemInit+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <SystemInit+0xd8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <SystemInit+0xd8>)
 8000aae:	4a18      	ldr	r2, [pc, #96]	; (8000b10 <SystemInit+0xe0>)
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <SystemInit+0xd8>)
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <SystemInit+0xe4>)
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ab8:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <SystemInit+0xd8>)
 8000aba:	4a17      	ldr	r2, [pc, #92]	; (8000b18 <SystemInit+0xe8>)
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <SystemInit+0xd8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ac4:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <SystemInit+0xd8>)
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <SystemInit+0xe8>)
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <SystemInit+0xd8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ad0:	4b0d      	ldr	r3, [pc, #52]	; (8000b08 <SystemInit+0xd8>)
 8000ad2:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <SystemInit+0xe8>)
 8000ad4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <SystemInit+0xd8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <SystemInit+0xd8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <SystemInit+0xd8>)
 8000ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <SystemInit+0xd8>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <SystemInit+0xec>)
 8000af0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000af4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	52002000 	.word	0x52002000
 8000b08:	58024400 	.word	0x58024400
 8000b0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b10:	02020200 	.word	0x02020200
 8000b14:	01ff0000 	.word	0x01ff0000
 8000b18:	01010280 	.word	0x01010280
 8000b1c:	52004000 	.word	0x52004000

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b24:	f7ff ff84 	bl	8000a30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b2a:	490d      	ldr	r1, [pc, #52]	; (8000b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b30:	e002      	b.n	8000b38 <LoopCopyDataInit>

08000b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b36:	3304      	adds	r3, #4

08000b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b3c:	d3f9      	bcc.n	8000b32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b40:	4c0a      	ldr	r4, [pc, #40]	; (8000b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b44:	e001      	b.n	8000b4a <LoopFillZerobss>

08000b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b48:	3204      	adds	r2, #4

08000b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b4c:	d3fb      	bcc.n	8000b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f008 ffad 	bl	8009aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff fc35 	bl	80003c0 <main>
  bx  lr
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b58:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000b5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b60:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000b64:	0800a704 	.word	0x0800a704
  ldr r2, =_sbss
 8000b68:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000b6c:	240006fc 	.word	0x240006fc

08000b70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC3_IRQHandler>
	...

08000b74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f000 f980 	bl	8000e80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b80:	f001 f968 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8000b84:	4602      	mov	r2, r0
 8000b86:	4b15      	ldr	r3, [pc, #84]	; (8000bdc <HAL_Init+0x68>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	0a1b      	lsrs	r3, r3, #8
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	4913      	ldr	r1, [pc, #76]	; (8000be0 <HAL_Init+0x6c>)
 8000b92:	5ccb      	ldrb	r3, [r1, r3]
 8000b94:	f003 031f 	and.w	r3, r3, #31
 8000b98:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_Init+0x68>)
 8000ba0:	699b      	ldr	r3, [r3, #24]
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_Init+0x6c>)
 8000ba8:	5cd3      	ldrb	r3, [r2, r3]
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x70>)
 8000bb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <HAL_Init+0x74>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f814 	bl	8000bec <HAL_InitTick>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e002      	b.n	8000bd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bce:	f7ff fd71 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	58024400 	.word	0x58024400
 8000be0:	0800a624 	.word	0x0800a624
 8000be4:	24000004 	.word	0x24000004
 8000be8:	24000000 	.word	0x24000000

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bf4:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_InitTick+0x60>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	e021      	b.n	8000c44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_InitTick+0x64>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b11      	ldr	r3, [pc, #68]	; (8000c4c <HAL_InitTick+0x60>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f965 	bl	8000ee6 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f92f 	bl	8000e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	; (8000c54 <HAL_InitTick+0x68>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	2400000c 	.word	0x2400000c
 8000c50:	24000000 	.word	0x24000000
 8000c54:	24000008 	.word	0x24000008

08000c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x20>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_IncTick+0x24>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_IncTick+0x24>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	2400000c 	.word	0x2400000c
 8000c7c:	24000108 	.word	0x24000108

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <HAL_GetTick+0x14>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	24000108 	.word	0x24000108

08000c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca0:	f7ff ffee 	bl	8000c80 <HAL_GetTick>
 8000ca4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb0:	d005      	beq.n	8000cbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <HAL_Delay+0x44>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4413      	add	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cbe:	bf00      	nop
 8000cc0:	f7ff ffde 	bl	8000c80 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <HAL_Delay+0x28>
  {
  }
}
 8000cd0:	bf00      	nop
 8000cd2:	bf00      	nop
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2400000c 	.word	0x2400000c

08000ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <__NVIC_SetPriorityGrouping+0x40>)
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0e:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <__NVIC_SetPriorityGrouping+0x40>)
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	60d3      	str	r3, [r2, #12]
}
 8000d14:	bf00      	nop
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00
 8000d24:	05fa0000 	.word	0x05fa0000

08000d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <__NVIC_GetPriorityGrouping+0x18>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	0a1b      	lsrs	r3, r3, #8
 8000d32:	f003 0307 	and.w	r3, r3, #7
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	db0b      	blt.n	8000d6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d56:	88fb      	ldrh	r3, [r7, #6]
 8000d58:	f003 021f 	and.w	r2, r3, #31
 8000d5c:	4907      	ldr	r1, [pc, #28]	; (8000d7c <__NVIC_EnableIRQ+0x38>)
 8000d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d62:	095b      	lsrs	r3, r3, #5
 8000d64:	2001      	movs	r0, #1
 8000d66:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	db0a      	blt.n	8000daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	490c      	ldr	r1, [pc, #48]	; (8000dcc <__NVIC_SetPriority+0x4c>)
 8000d9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d9e:	0112      	lsls	r2, r2, #4
 8000da0:	b2d2      	uxtb	r2, r2
 8000da2:	440b      	add	r3, r1
 8000da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000da8:	e00a      	b.n	8000dc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	4908      	ldr	r1, [pc, #32]	; (8000dd0 <__NVIC_SetPriority+0x50>)
 8000db0:	88fb      	ldrh	r3, [r7, #6]
 8000db2:	f003 030f 	and.w	r3, r3, #15
 8000db6:	3b04      	subs	r3, #4
 8000db8:	0112      	lsls	r2, r2, #4
 8000dba:	b2d2      	uxtb	r2, r2
 8000dbc:	440b      	add	r3, r1
 8000dbe:	761a      	strb	r2, [r3, #24]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	e000e100 	.word	0xe000e100
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	f1c3 0307 	rsb	r3, r3, #7
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	bf28      	it	cs
 8000df2:	2304      	movcs	r3, #4
 8000df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	2b06      	cmp	r3, #6
 8000dfc:	d902      	bls.n	8000e04 <NVIC_EncodePriority+0x30>
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	3b03      	subs	r3, #3
 8000e02:	e000      	b.n	8000e06 <NVIC_EncodePriority+0x32>
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	f04f 32ff 	mov.w	r2, #4294967295
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	43da      	mvns	r2, r3
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	401a      	ands	r2, r3
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa01 f303 	lsl.w	r3, r1, r3
 8000e26:	43d9      	mvns	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	4313      	orrs	r3, r2
         );
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3724      	adds	r7, #36	; 0x24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
	...

08000e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	3b01      	subs	r3, #1
 8000e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e4c:	d301      	bcc.n	8000e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00f      	b.n	8000e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e52:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <SysTick_Config+0x40>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f7ff ff8e 	bl	8000d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SysTick_Config+0x40>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6a:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <SysTick_Config+0x40>)
 8000e6c:	2207      	movs	r2, #7
 8000e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	e000e010 	.word	0xe000e010

08000e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff ff29 	bl	8000ce0 <__NVIC_SetPriorityGrouping>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff40 	bl	8000d28 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff90 	bl	8000dd4 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5f 	bl	8000d80 <__NVIC_SetPriority>
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ed4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff33 	bl	8000d44 <__NVIC_EnableIRQ>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa4 	bl	8000e3c <SysTick_Config>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f0e:	4b86      	ldr	r3, [pc, #536]	; (8001128 <HAL_GPIO_Init+0x228>)
 8000f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f12:	e18c      	b.n	800122e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	2101      	movs	r1, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 817e 	beq.w	8001228 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d005      	beq.n	8000f44 <HAL_GPIO_Init+0x44>
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d130      	bne.n	8000fa6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	2203      	movs	r2, #3
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	43db      	mvns	r3, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4013      	ands	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	f003 0201 	and.w	r2, r3, #1
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d017      	beq.n	8000fe2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d123      	bne.n	8001036 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	08da      	lsrs	r2, r3, #3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3208      	adds	r2, #8
 8000ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	220f      	movs	r2, #15
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	691a      	ldr	r2, [r3, #16]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	69b9      	ldr	r1, [r7, #24]
 8001032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0203 	and.w	r2, r3, #3
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80d8 	beq.w	8001228 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <HAL_GPIO_Init+0x22c>)
 800107a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800107e:	4a2b      	ldr	r2, [pc, #172]	; (800112c <HAL_GPIO_Init+0x22c>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001088:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_GPIO_Init+0x22c>)
 800108a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001096:	4a26      	ldr	r2, [pc, #152]	; (8001130 <HAL_GPIO_Init+0x230>)
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	3302      	adds	r3, #2
 800109e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f003 0303 	and.w	r3, r3, #3
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	220f      	movs	r2, #15
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a1d      	ldr	r2, [pc, #116]	; (8001134 <HAL_GPIO_Init+0x234>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d04a      	beq.n	8001158 <HAL_GPIO_Init+0x258>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a1c      	ldr	r2, [pc, #112]	; (8001138 <HAL_GPIO_Init+0x238>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a1b      	ldr	r2, [pc, #108]	; (800113c <HAL_GPIO_Init+0x23c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <HAL_GPIO_Init+0x240>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a19      	ldr	r2, [pc, #100]	; (8001144 <HAL_GPIO_Init+0x244>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_GPIO_Init+0x248>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a17      	ldr	r2, [pc, #92]	; (800114c <HAL_GPIO_Init+0x24c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_GPIO_Init+0x250>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x20a>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a15      	ldr	r2, [pc, #84]	; (8001154 <HAL_GPIO_Init+0x254>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x206>
 8001102:	2309      	movs	r3, #9
 8001104:	e029      	b.n	800115a <HAL_GPIO_Init+0x25a>
 8001106:	230a      	movs	r3, #10
 8001108:	e027      	b.n	800115a <HAL_GPIO_Init+0x25a>
 800110a:	2307      	movs	r3, #7
 800110c:	e025      	b.n	800115a <HAL_GPIO_Init+0x25a>
 800110e:	2306      	movs	r3, #6
 8001110:	e023      	b.n	800115a <HAL_GPIO_Init+0x25a>
 8001112:	2305      	movs	r3, #5
 8001114:	e021      	b.n	800115a <HAL_GPIO_Init+0x25a>
 8001116:	2304      	movs	r3, #4
 8001118:	e01f      	b.n	800115a <HAL_GPIO_Init+0x25a>
 800111a:	2303      	movs	r3, #3
 800111c:	e01d      	b.n	800115a <HAL_GPIO_Init+0x25a>
 800111e:	2302      	movs	r3, #2
 8001120:	e01b      	b.n	800115a <HAL_GPIO_Init+0x25a>
 8001122:	2301      	movs	r3, #1
 8001124:	e019      	b.n	800115a <HAL_GPIO_Init+0x25a>
 8001126:	bf00      	nop
 8001128:	58000080 	.word	0x58000080
 800112c:	58024400 	.word	0x58024400
 8001130:	58000400 	.word	0x58000400
 8001134:	58020000 	.word	0x58020000
 8001138:	58020400 	.word	0x58020400
 800113c:	58020800 	.word	0x58020800
 8001140:	58020c00 	.word	0x58020c00
 8001144:	58021000 	.word	0x58021000
 8001148:	58021400 	.word	0x58021400
 800114c:	58021800 	.word	0x58021800
 8001150:	58021c00 	.word	0x58021c00
 8001154:	58022400 	.word	0x58022400
 8001158:	2300      	movs	r3, #0
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116a:	4938      	ldr	r1, [pc, #224]	; (800124c <HAL_GPIO_Init+0x34c>)
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800119e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d003      	beq.n	80011f8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	3301      	adds	r3, #1
 800122c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	f47f ae6b 	bne.w	8000f14 <HAL_GPIO_Init+0x14>
  }
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3724      	adds	r7, #36	; 0x24
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	58000400 	.word	0x58000400

08001250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	460b      	mov	r3, r1
 800125a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	887b      	ldrh	r3, [r7, #2]
 8001262:	4013      	ands	r3, r2
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001288:	4b29      	ldr	r3, [pc, #164]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	f003 0307 	and.w	r3, r3, #7
 8001290:	2b06      	cmp	r3, #6
 8001292:	d00a      	beq.n	80012aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001294:	4b26      	ldr	r3, [pc, #152]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d001      	beq.n	80012a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e03f      	b.n	8001326 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e03d      	b.n	8001326 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80012b2:	491f      	ldr	r1, [pc, #124]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012ba:	f7ff fce1 	bl	8000c80 <HAL_GetTick>
 80012be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012c0:	e009      	b.n	80012d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012c2:	f7ff fcdd 	bl	8000c80 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012d0:	d901      	bls.n	80012d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e027      	b.n	8001326 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012e2:	d1ee      	bne.n	80012c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b1e      	cmp	r3, #30
 80012e8:	d008      	beq.n	80012fc <HAL_PWREx_ConfigSupply+0x7c>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b2e      	cmp	r3, #46	; 0x2e
 80012ee:	d005      	beq.n	80012fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b1d      	cmp	r3, #29
 80012f4:	d002      	beq.n	80012fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b2d      	cmp	r3, #45	; 0x2d
 80012fa:	d113      	bne.n	8001324 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80012fc:	f7ff fcc0 	bl	8000c80 <HAL_GetTick>
 8001300:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001302:	e009      	b.n	8001318 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001304:	f7ff fcbc 	bl	8000c80 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001312:	d901      	bls.n	8001318 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e006      	b.n	8001326 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_PWREx_ConfigSupply+0xb0>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f003 0311 	and.w	r3, r3, #17
 8001320:	2b11      	cmp	r3, #17
 8001322:	d1ef      	bne.n	8001304 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	58024800 	.word	0x58024800

08001334 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08c      	sub	sp, #48	; 0x30
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e3c8      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	f000 8087 	beq.w	8001462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001354:	4b88      	ldr	r3, [pc, #544]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800135e:	4b86      	ldr	r3, [pc, #536]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001366:	2b10      	cmp	r3, #16
 8001368:	d007      	beq.n	800137a <HAL_RCC_OscConfig+0x46>
 800136a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136c:	2b18      	cmp	r3, #24
 800136e:	d110      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d10b      	bne.n	8001392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137a:	4b7f      	ldr	r3, [pc, #508]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d06c      	beq.n	8001460 <HAL_RCC_OscConfig+0x12c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d168      	bne.n	8001460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e3a2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800139a:	d106      	bne.n	80013aa <HAL_RCC_OscConfig+0x76>
 800139c:	4b76      	ldr	r3, [pc, #472]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a75      	ldr	r2, [pc, #468]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	e02e      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10c      	bne.n	80013cc <HAL_RCC_OscConfig+0x98>
 80013b2:	4b71      	ldr	r3, [pc, #452]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a70      	ldr	r2, [pc, #448]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013bc:	6013      	str	r3, [r2, #0]
 80013be:	4b6e      	ldr	r3, [pc, #440]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a6d      	ldr	r2, [pc, #436]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0xbc>
 80013d6:	4b68      	ldr	r3, [pc, #416]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a67      	ldr	r2, [pc, #412]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b65      	ldr	r3, [pc, #404]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a64      	ldr	r2, [pc, #400]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xd4>
 80013f0:	4b61      	ldr	r3, [pc, #388]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a60      	ldr	r2, [pc, #384]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a5d      	ldr	r2, [pc, #372]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fc36 	bl	8000c80 <HAL_GetTick>
 8001414:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc32 	bl	8000c80 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e356      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800142a:	4b53      	ldr	r3, [pc, #332]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xe4>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fc22 	bl	8000c80 <HAL_GetTick>
 800143c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc1e 	bl	8000c80 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e342      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x10c>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	f000 808c 	beq.w	8001588 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001470:	4b41      	ldr	r3, [pc, #260]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001478:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800147a:	4b3f      	ldr	r3, [pc, #252]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d007      	beq.n	8001496 <HAL_RCC_OscConfig+0x162>
 8001486:	6a3b      	ldr	r3, [r7, #32]
 8001488:	2b18      	cmp	r3, #24
 800148a:	d137      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c8>
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d132      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d005      	beq.n	80014ae <HAL_RCC_OscConfig+0x17a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e314      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ae:	4b32      	ldr	r3, [pc, #200]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f023 0219 	bic.w	r2, r3, #25
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	492f      	ldr	r1, [pc, #188]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c0:	f7ff fbde 	bl	8000c80 <HAL_GetTick>
 80014c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c8:	f7ff fbda 	bl	8000c80 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e2fe      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014da:	4b27      	ldr	r3, [pc, #156]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	061b      	lsls	r3, r3, #24
 80014f4:	4920      	ldr	r1, [pc, #128]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014fa:	e045      	b.n	8001588 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d026      	beq.n	8001552 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 0219 	bic.w	r2, r3, #25
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4919      	ldr	r1, [pc, #100]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001512:	4313      	orrs	r3, r2
 8001514:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fbb3 	bl	8000c80 <HAL_GetTick>
 800151a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fbaf 	bl	8000c80 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e2d3      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f0      	beq.n	800151e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	061b      	lsls	r3, r3, #24
 800154a:	490b      	ldr	r1, [pc, #44]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 800154c:	4313      	orrs	r3, r2
 800154e:	604b      	str	r3, [r1, #4]
 8001550:	e01a      	b.n	8001588 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <HAL_RCC_OscConfig+0x244>)
 8001558:	f023 0301 	bic.w	r3, r3, #1
 800155c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155e:	f7ff fb8f 	bl	8000c80 <HAL_GetTick>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001566:	f7ff fb8b 	bl	8000c80 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d903      	bls.n	800157c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e2af      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
 8001578:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800157c:	4b96      	ldr	r3, [pc, #600]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0304 	and.w	r3, r3, #4
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	d06a      	beq.n	800166a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001594:	4b90      	ldr	r3, [pc, #576]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800159c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800159e:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80015a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d007      	beq.n	80015ba <HAL_RCC_OscConfig+0x286>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b18      	cmp	r3, #24
 80015ae:	d11b      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2b4>
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d116      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015ba:	4b87      	ldr	r3, [pc, #540]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x29e>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	2b80      	cmp	r3, #128	; 0x80
 80015cc:	d001      	beq.n	80015d2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e282      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015d2:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	061b      	lsls	r3, r3, #24
 80015e0:	497d      	ldr	r1, [pc, #500]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015e6:	e040      	b.n	800166a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d023      	beq.n	8001638 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80015f0:	4b79      	ldr	r3, [pc, #484]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a78      	ldr	r2, [pc, #480]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80015f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015fc:	f7ff fb40 	bl	8000c80 <HAL_GetTick>
 8001600:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001604:	f7ff fb3c 	bl	8000c80 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e260      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001616:	4b70      	ldr	r3, [pc, #448]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f0      	beq.n	8001604 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001622:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	061b      	lsls	r3, r3, #24
 8001630:	4969      	ldr	r1, [pc, #420]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001632:	4313      	orrs	r3, r2
 8001634:	60cb      	str	r3, [r1, #12]
 8001636:	e018      	b.n	800166a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001638:	4b67      	ldr	r3, [pc, #412]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a66      	ldr	r2, [pc, #408]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 800163e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff fb1c 	bl	8000c80 <HAL_GetTick>
 8001648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800164c:	f7ff fb18 	bl	8000c80 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e23c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800165e:	4b5e      	ldr	r3, [pc, #376]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d036      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d019      	beq.n	80016b2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167e:	4b56      	ldr	r3, [pc, #344]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001682:	4a55      	ldr	r2, [pc, #340]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7ff faf9 	bl	8000c80 <HAL_GetTick>
 800168e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff faf5 	bl	8000c80 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e219      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016a4:	4b4c      	ldr	r3, [pc, #304]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80016a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x35e>
 80016b0:	e018      	b.n	80016e4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80016b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016b6:	4a48      	ldr	r2, [pc, #288]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80016b8:	f023 0301 	bic.w	r3, r3, #1
 80016bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff fadf 	bl	8000c80 <HAL_GetTick>
 80016c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff fadb 	bl	8000c80 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e1ff      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016d8:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80016da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d036      	beq.n	800175e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d019      	beq.n	800172c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f8:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a36      	ldr	r2, [pc, #216]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80016fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001702:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001704:	f7ff fabc 	bl	8000c80 <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800170c:	f7ff fab8 	bl	8000c80 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e1dc      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800171e:	4b2e      	ldr	r3, [pc, #184]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x3d8>
 800172a:	e018      	b.n	800175e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800172c:	4b2a      	ldr	r3, [pc, #168]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001732:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001736:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001738:	f7ff faa2 	bl	8000c80 <HAL_GetTick>
 800173c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001740:	f7ff fa9e 	bl	8000c80 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e1c2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0304 	and.w	r3, r3, #4
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8086 	beq.w	8001878 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800176c:	4b1b      	ldr	r3, [pc, #108]	; (80017dc <HAL_RCC_OscConfig+0x4a8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_RCC_OscConfig+0x4a8>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001778:	f7ff fa82 	bl	8000c80 <HAL_GetTick>
 800177c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001780:	f7ff fa7e 	bl	8000c80 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b64      	cmp	r3, #100	; 0x64
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e1a2      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001792:	4b12      	ldr	r3, [pc, #72]	; (80017dc <HAL_RCC_OscConfig+0x4a8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f0      	beq.n	8001780 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d106      	bne.n	80017b4 <HAL_RCC_OscConfig+0x480>
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80017a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6713      	str	r3, [r2, #112]	; 0x70
 80017b2:	e032      	b.n	800181a <HAL_RCC_OscConfig+0x4e6>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d111      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4ac>
 80017bc:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80017be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017c0:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80017c2:	f023 0301 	bic.w	r3, r3, #1
 80017c6:	6713      	str	r3, [r2, #112]	; 0x70
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	4a02      	ldr	r2, [pc, #8]	; (80017d8 <HAL_RCC_OscConfig+0x4a4>)
 80017ce:	f023 0304 	bic.w	r3, r3, #4
 80017d2:	6713      	str	r3, [r2, #112]	; 0x70
 80017d4:	e021      	b.n	800181a <HAL_RCC_OscConfig+0x4e6>
 80017d6:	bf00      	nop
 80017d8:	58024400 	.word	0x58024400
 80017dc:	58024800 	.word	0x58024800
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b05      	cmp	r3, #5
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x4ce>
 80017e8:	4b83      	ldr	r3, [pc, #524]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a82      	ldr	r2, [pc, #520]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
 80017f4:	4b80      	ldr	r3, [pc, #512]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a7f      	ldr	r2, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0x4e6>
 8001802:	4b7d      	ldr	r3, [pc, #500]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	4a7c      	ldr	r2, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6713      	str	r3, [r2, #112]	; 0x70
 800180e:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001812:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d015      	beq.n	800184e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa2d 	bl	8000c80 <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001828:	e00a      	b.n	8001840 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff fa29 	bl	8000c80 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	f241 3288 	movw	r2, #5000	; 0x1388
 8001838:	4293      	cmp	r3, r2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e14b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0ee      	beq.n	800182a <HAL_RCC_OscConfig+0x4f6>
 800184c:	e014      	b.n	8001878 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff fa17 	bl	8000c80 <HAL_GetTick>
 8001852:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001854:	e00a      	b.n	800186c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001856:	f7ff fa13 	bl	8000c80 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	f241 3288 	movw	r2, #5000	; 0x1388
 8001864:	4293      	cmp	r3, r2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e135      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800186c:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800186e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2b00      	cmp	r3, #0
 800187e:	f000 812a 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800188a:	2b18      	cmp	r3, #24
 800188c:	f000 80ba 	beq.w	8001a04 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001894:	2b02      	cmp	r3, #2
 8001896:	f040 8095 	bne.w	80019c4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a56      	ldr	r2, [pc, #344]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80018a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff f9eb 	bl	8000c80 <HAL_GetTick>
 80018aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff f9e7 	bl	8000c80 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e10b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018c0:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1f0      	bne.n	80018ae <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80018ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d0:	4b4a      	ldr	r3, [pc, #296]	; (80019fc <HAL_RCC_OscConfig+0x6c8>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	430a      	orrs	r2, r1
 80018e0:	4945      	ldr	r1, [pc, #276]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	628b      	str	r3, [r1, #40]	; 0x28
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	3b01      	subs	r3, #1
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001900:	3b01      	subs	r3, #1
 8001902:	041b      	lsls	r3, r3, #16
 8001904:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190e:	3b01      	subs	r3, #1
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001916:	4938      	ldr	r1, [pc, #224]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001918:	4313      	orrs	r3, r2
 800191a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	4a35      	ldr	r2, [pc, #212]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001928:	4b33      	ldr	r3, [pc, #204]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800192a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800192c:	4b34      	ldr	r3, [pc, #208]	; (8001a00 <HAL_RCC_OscConfig+0x6cc>)
 800192e:	4013      	ands	r3, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001934:	00d2      	lsls	r2, r2, #3
 8001936:	4930      	ldr	r1, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800193c:	4b2e      	ldr	r3, [pc, #184]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001940:	f023 020c 	bic.w	r2, r3, #12
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001948:	492b      	ldr	r1, [pc, #172]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800194e:	4b2a      	ldr	r3, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001952:	f023 0202 	bic.w	r2, r3, #2
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195a:	4927      	ldr	r1, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	4a24      	ldr	r2, [pc, #144]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800196c:	4b22      	ldr	r3, [pc, #136]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	4a21      	ldr	r2, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001976:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800197e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001982:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001984:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f970 	bl	8000c80 <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f96c 	bl	8000c80 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e090      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x670>
 80019c2:	e088      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff f956 	bl	8000c80 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff f952 	bl	8000c80 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e076      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x6c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x6a4>
 80019f6:	e06e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7a2>
 80019f8:	58024400 	.word	0x58024400
 80019fc:	fffffc0c 	.word	0xfffffc0c
 8001a00:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a04:	4b36      	ldr	r3, [pc, #216]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a0a:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d031      	beq.n	8001a7c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0203 	and.w	r2, r3, #3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d12a      	bne.n	8001a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d122      	bne.n	8001a7c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d11a      	bne.n	8001a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	0a5b      	lsrs	r3, r3, #9
 8001a4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d111      	bne.n	8001a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	0c1b      	lsrs	r3, r3, #16
 8001a5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	0e1b      	lsrs	r3, r3, #24
 8001a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e02b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001a80:	4b17      	ldr	r3, [pc, #92]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a84:	08db      	lsrs	r3, r3, #3
 8001a86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001a8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d01f      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9a:	4a11      	ldr	r2, [pc, #68]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa2:	f7ff f8ed 	bl	8000c80 <HAL_GetTick>
 8001aa6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001aa8:	bf00      	nop
 8001aaa:	f7ff f8e9 	bl	8000c80 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d0f9      	beq.n	8001aaa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_OscConfig+0x7b0>)
 8001abc:	4013      	ands	r3, r2
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ac2:	00d2      	lsls	r2, r2, #3
 8001ac4:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_RCC_OscConfig+0x7ac>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	ffff0007 	.word	0xffff0007

08001ae8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e19c      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b8a      	ldr	r3, [pc, #552]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b87      	ldr	r3, [pc, #540]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 020f 	bic.w	r2, r3, #15
 8001b12:	4985      	ldr	r1, [pc, #532]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b83      	ldr	r3, [pc, #524]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e184      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d010      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d908      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b48:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	4975      	ldr	r1, [pc, #468]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695a      	ldr	r2, [r3, #20]
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d908      	bls.n	8001b88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b78:	69db      	ldr	r3, [r3, #28]
 8001b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	496a      	ldr	r1, [pc, #424]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699a      	ldr	r2, [r3, #24]
 8001b98:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d908      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ba4:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	495e      	ldr	r1, [pc, #376]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	4b59      	ldr	r3, [pc, #356]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d908      	bls.n	8001be4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4953      	ldr	r1, [pc, #332]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001be0:	4313      	orrs	r3, r2
 8001be2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	4b4d      	ldr	r3, [pc, #308]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d908      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f023 020f 	bic.w	r2, r3, #15
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4947      	ldr	r1, [pc, #284]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d055      	beq.n	8001cca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	4940      	ldr	r1, [pc, #256]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d107      	bne.n	8001c48 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c38:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d121      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e0f6      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b03      	cmp	r3, #3
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d115      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e0ea      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e0de      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c78:	4b2c      	ldr	r3, [pc, #176]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0d6      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c88:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f023 0207 	bic.w	r2, r3, #7
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4925      	ldr	r1, [pc, #148]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c9a:	f7fe fff1 	bl	8000c80 <HAL_GetTick>
 8001c9e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca2:	f7fe ffed 	bl	8000c80 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e0be      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	00db      	lsls	r3, r3, #3
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d1eb      	bne.n	8001ca2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68da      	ldr	r2, [r3, #12]
 8001cda:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d208      	bcs.n	8001cf8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f023 020f 	bic.w	r2, r3, #15
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <HAL_RCC_ClockConfig+0x244>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d214      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 020f 	bic.w	r2, r3, #15
 8001d0e:	4906      	ldr	r1, [pc, #24]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <HAL_RCC_ClockConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d005      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e086      	b.n	8001e36 <HAL_RCC_ClockConfig+0x34e>
 8001d28:	52002000 	.word	0x52002000
 8001d2c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d208      	bcs.n	8001d5e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	4939      	ldr	r1, [pc, #228]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d208      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d7a:	4b31      	ldr	r3, [pc, #196]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	492e      	ldr	r1, [pc, #184]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d010      	beq.n	8001dba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d208      	bcs.n	8001dba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001daa:	69db      	ldr	r3, [r3, #28]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d010      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d208      	bcs.n	8001de8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4917      	ldr	r1, [pc, #92]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001de8:	f000 f834 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	0a1b      	lsrs	r3, r3, #8
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	4912      	ldr	r1, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x35c>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_RCC_ClockConfig+0x358>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_RCC_ClockConfig+0x35c>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_RCC_ClockConfig+0x360>)
 8001e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e20:	4a0a      	ldr	r2, [pc, #40]	; (8001e4c <HAL_RCC_ClockConfig+0x364>)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_RCC_ClockConfig+0x368>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fede 	bl	8000bec <HAL_InitTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	58024400 	.word	0x58024400
 8001e44:	0800a624 	.word	0x0800a624
 8001e48:	24000004 	.word	0x24000004
 8001e4c:	24000000 	.word	0x24000000
 8001e50:	24000008 	.word	0x24000008

08001e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e5a:	4bb3      	ldr	r3, [pc, #716]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e62:	2b18      	cmp	r3, #24
 8001e64:	f200 8155 	bhi.w	8002112 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001ed5 	.word	0x08001ed5
 8001e74:	08002113 	.word	0x08002113
 8001e78:	08002113 	.word	0x08002113
 8001e7c:	08002113 	.word	0x08002113
 8001e80:	08002113 	.word	0x08002113
 8001e84:	08002113 	.word	0x08002113
 8001e88:	08002113 	.word	0x08002113
 8001e8c:	08002113 	.word	0x08002113
 8001e90:	08001efb 	.word	0x08001efb
 8001e94:	08002113 	.word	0x08002113
 8001e98:	08002113 	.word	0x08002113
 8001e9c:	08002113 	.word	0x08002113
 8001ea0:	08002113 	.word	0x08002113
 8001ea4:	08002113 	.word	0x08002113
 8001ea8:	08002113 	.word	0x08002113
 8001eac:	08002113 	.word	0x08002113
 8001eb0:	08001f01 	.word	0x08001f01
 8001eb4:	08002113 	.word	0x08002113
 8001eb8:	08002113 	.word	0x08002113
 8001ebc:	08002113 	.word	0x08002113
 8001ec0:	08002113 	.word	0x08002113
 8001ec4:	08002113 	.word	0x08002113
 8001ec8:	08002113 	.word	0x08002113
 8001ecc:	08002113 	.word	0x08002113
 8001ed0:	08001f07 	.word	0x08001f07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ed4:	4b94      	ldr	r3, [pc, #592]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0320 	and.w	r3, r3, #32
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d009      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001ee0:	4b91      	ldr	r3, [pc, #580]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	4a90      	ldr	r2, [pc, #576]	; (800212c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ef2:	e111      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ef4:	4b8d      	ldr	r3, [pc, #564]	; (800212c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ef6:	61bb      	str	r3, [r7, #24]
      break;
 8001ef8:	e10e      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001efa:	4b8d      	ldr	r3, [pc, #564]	; (8002130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001efc:	61bb      	str	r3, [r7, #24]
      break;
 8001efe:	e10b      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f00:	4b8c      	ldr	r3, [pc, #560]	; (8002134 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f02:	61bb      	str	r3, [r7, #24]
      break;
 8001f04:	e108      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f06:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f10:	4b85      	ldr	r3, [pc, #532]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	091b      	lsrs	r3, r3, #4
 8001f16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f1a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f1c:	4b82      	ldr	r3, [pc, #520]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f26:	4b80      	ldr	r3, [pc, #512]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	08db      	lsrs	r3, r3, #3
 8001f2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	fb02 f303 	mul.w	r3, r2, r3
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80e1 	beq.w	800210c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	f000 8083 	beq.w	8002058 <HAL_RCC_GetSysClockFreq+0x204>
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	f200 80a1 	bhi.w	800209c <HAL_RCC_GetSysClockFreq+0x248>
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x114>
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d056      	beq.n	8002014 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f66:	e099      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f68:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d02d      	beq.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f74:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	f003 0303 	and.w	r3, r3, #3
 8001f7e:	4a6b      	ldr	r2, [pc, #428]	; (800212c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
 8001f84:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	ee07 3a90 	vmov	s15, r3
 8001f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f9e:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fae:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001fce:	e087      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fda:	eddf 6a58 	vldr	s13, [pc, #352]	; 800213c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fe2:	4b51      	ldr	r3, [pc, #324]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fea:	ee07 3a90 	vmov	s15, r3
 8001fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ff2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ff6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002012:	e065      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	ee07 3a90 	vmov	s15, r3
 800201a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800201e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002140 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002026:	4b40      	ldr	r3, [pc, #256]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800202e:	ee07 3a90 	vmov	s15, r3
 8002032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002036:	ed97 6a02 	vldr	s12, [r7, #8]
 800203a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002138 <HAL_RCC_GetSysClockFreq+0x2e4>
 800203e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800204a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002052:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002056:	e043      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	ee07 3a90 	vmov	s15, r3
 800205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002062:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002144 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800206a:	4b2f      	ldr	r3, [pc, #188]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800207a:	ed97 6a02 	vldr	s12, [r7, #8]
 800207e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002138 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800208a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800208e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002096:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800209a:	e021      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	ee07 3a90 	vmov	s15, r3
 80020a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020a6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002140 <HAL_RCC_GetSysClockFreq+0x2ec>
 80020aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020ae:	4b1e      	ldr	r3, [pc, #120]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020be:	ed97 6a02 	vldr	s12, [r7, #8]
 80020c2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002138 <HAL_RCC_GetSysClockFreq+0x2e4>
 80020c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020e0:	4b11      	ldr	r3, [pc, #68]	; (8002128 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	0a5b      	lsrs	r3, r3, #9
 80020e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020ea:	3301      	adds	r3, #1
 80020ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	ee07 3a90 	vmov	s15, r3
 80020f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80020fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002104:	ee17 3a90 	vmov	r3, s15
 8002108:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	61bb      	str	r3, [r7, #24]
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002112:	4b07      	ldr	r3, [pc, #28]	; (8002130 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002114:	61bb      	str	r3, [r7, #24]
      break;
 8002116:	bf00      	nop
  }

  return sysclockfreq;
 8002118:	69bb      	ldr	r3, [r7, #24]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	; 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	58024400 	.word	0x58024400
 800212c:	03d09000 	.word	0x03d09000
 8002130:	003d0900 	.word	0x003d0900
 8002134:	017d7840 	.word	0x017d7840
 8002138:	46000000 	.word	0x46000000
 800213c:	4c742400 	.word	0x4c742400
 8002140:	4a742400 	.word	0x4a742400
 8002144:	4bbebc20 	.word	0x4bbebc20

08002148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800214e:	f7ff fe81 	bl	8001e54 <HAL_RCC_GetSysClockFreq>
 8002152:	4602      	mov	r2, r0
 8002154:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_RCC_GetHCLKFreq+0x50>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	490f      	ldr	r1, [pc, #60]	; (800219c <HAL_RCC_GetHCLKFreq+0x54>)
 8002160:	5ccb      	ldrb	r3, [r1, r3]
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	fa22 f303 	lsr.w	r3, r2, r3
 800216a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_RCC_GetHCLKFreq+0x50>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_GetHCLKFreq+0x54>)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a07      	ldr	r2, [pc, #28]	; (80021a0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002184:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800218c:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <HAL_RCC_GetHCLKFreq+0x58>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	58024400 	.word	0x58024400
 800219c:	0800a624 	.word	0x0800a624
 80021a0:	24000004 	.word	0x24000004
 80021a4:	24000000 	.word	0x24000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80021ac:	f7ff ffcc 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 80021b0:	4602      	mov	r2, r0
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4904      	ldr	r1, [pc, #16]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021be:	5ccb      	ldrb	r3, [r1, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	58024400 	.word	0x58024400
 80021d0:	0800a624 	.word	0x0800a624

080021d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d8:	b0c6      	sub	sp, #280	; 0x118
 80021da:	af00      	add	r7, sp, #0
 80021dc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e0:	2300      	movs	r3, #0
 80021e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80021f8:	2500      	movs	r5, #0
 80021fa:	ea54 0305 	orrs.w	r3, r4, r5
 80021fe:	d049      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002206:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800220a:	d02f      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800220c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002210:	d828      	bhi.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002212:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002216:	d01a      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002218:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800221c:	d822      	bhi.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002226:	d007      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002228:	e01c      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800222a:	4bab      	ldr	r3, [pc, #684]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	4aaa      	ldr	r2, [pc, #680]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002236:	e01a      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800223c:	3308      	adds	r3, #8
 800223e:	2102      	movs	r1, #2
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fa49 	bl	80046d8 <RCCEx_PLL2_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800224c:	e00f      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800224e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002252:	3328      	adds	r3, #40	; 0x28
 8002254:	2102      	movs	r1, #2
 8002256:	4618      	mov	r0, r3
 8002258:	f002 faf0 	bl	800483c <RCCEx_PLL3_Config>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002262:	e004      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800226a:	e000      	b.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800226c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800226e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10a      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002276:	4b98      	ldr	r3, [pc, #608]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800227a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800227e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002284:	4a94      	ldr	r2, [pc, #592]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002286:	430b      	orrs	r3, r1
 8002288:	6513      	str	r3, [r2, #80]	; 0x50
 800228a:	e003      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800228c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002290:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80022a0:	f04f 0900 	mov.w	r9, #0
 80022a4:	ea58 0309 	orrs.w	r3, r8, r9
 80022a8:	d047      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80022aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d82a      	bhi.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80022b4:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022d1 	.word	0x080022d1
 80022c0:	080022df 	.word	0x080022df
 80022c4:	080022f5 	.word	0x080022f5
 80022c8:	08002313 	.word	0x08002313
 80022cc:	08002313 	.word	0x08002313
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022d0:	4b81      	ldr	r3, [pc, #516]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d4:	4a80      	ldr	r2, [pc, #512]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80022d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022dc:	e01a      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022e2:	3308      	adds	r3, #8
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 f9f6 	bl	80046d8 <RCCEx_PLL2_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022f2:	e00f      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022f8:	3328      	adds	r3, #40	; 0x28
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fa9d 	bl	800483c <RCCEx_PLL3_Config>
 8002302:	4603      	mov	r3, r0
 8002304:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002308:	e004      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002310:	e000      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002312:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800231c:	4b6e      	ldr	r3, [pc, #440]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800231e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002320:	f023 0107 	bic.w	r1, r3, #7
 8002324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	4a6b      	ldr	r2, [pc, #428]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800232c:	430b      	orrs	r3, r1
 800232e:	6513      	str	r3, [r2, #80]	; 0x50
 8002330:	e003      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800233a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002346:	f04f 0b00 	mov.w	fp, #0
 800234a:	ea5a 030b 	orrs.w	r3, sl, fp
 800234e:	d05b      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002354:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002358:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800235c:	d03b      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800235e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002362:	d834      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002364:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002368:	d037      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800236a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800236e:	d82e      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002370:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002374:	d033      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002376:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800237a:	d828      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800237c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002380:	d01a      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002382:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002386:	d822      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800238c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002390:	d007      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8002392:	e01c      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	4a4f      	ldr	r2, [pc, #316]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800239a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023a0:	e01e      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023a6:	3308      	adds	r3, #8
 80023a8:	2100      	movs	r1, #0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 f994 	bl	80046d8 <RCCEx_PLL2_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023b6:	e013      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023bc:	3328      	adds	r3, #40	; 0x28
 80023be:	2100      	movs	r1, #0
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 fa3b 	bl	800483c <RCCEx_PLL3_Config>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023cc:	e008      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80023d4:	e004      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80023d6:	bf00      	nop
 80023d8:	e002      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80023da:	bf00      	nop
 80023dc:	e000      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80023de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10b      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80023e8:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ec:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80023f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023f8:	4a37      	ldr	r2, [pc, #220]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80023fa:	430b      	orrs	r3, r1
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
 80023fe:	e003      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002400:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002404:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002408:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002414:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800241e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002422:	460b      	mov	r3, r1
 8002424:	4313      	orrs	r3, r2
 8002426:	d05d      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800242c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002430:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002434:	d03b      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002436:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800243a:	d834      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800243c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002440:	d037      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002442:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002446:	d82e      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002448:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800244c:	d033      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800244e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002452:	d828      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002458:	d01a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800245a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800245e:	d822      	bhi.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002468:	d007      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800246a:	e01c      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800246e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002470:	4a19      	ldr	r2, [pc, #100]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002478:	e01e      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800247a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800247e:	3308      	adds	r3, #8
 8002480:	2100      	movs	r1, #0
 8002482:	4618      	mov	r0, r3
 8002484:	f002 f928 	bl	80046d8 <RCCEx_PLL2_Config>
 8002488:	4603      	mov	r3, r0
 800248a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800248e:	e013      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002494:	3328      	adds	r3, #40	; 0x28
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f002 f9cf 	bl	800483c <RCCEx_PLL3_Config>
 800249e:	4603      	mov	r3, r0
 80024a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80024a4:	e008      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80024ac:	e004      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80024ae:	bf00      	nop
 80024b0:	e002      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80024b2:	bf00      	nop
 80024b4:	e000      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80024b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80024c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80024d0:	4a01      	ldr	r2, [pc, #4]	; (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80024d2:	430b      	orrs	r3, r1
 80024d4:	6593      	str	r3, [r2, #88]	; 0x58
 80024d6:	e005      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80024d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80024e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80024e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80024f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80024f4:	2300      	movs	r3, #0
 80024f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80024fa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80024fe:	460b      	mov	r3, r1
 8002500:	4313      	orrs	r3, r2
 8002502:	d03a      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	2b30      	cmp	r3, #48	; 0x30
 800250c:	d01f      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800250e:	2b30      	cmp	r3, #48	; 0x30
 8002510:	d819      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002512:	2b20      	cmp	r3, #32
 8002514:	d00c      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002516:	2b20      	cmp	r3, #32
 8002518:	d815      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d019      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800251e:	2b10      	cmp	r3, #16
 8002520:	d111      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002522:	4baa      	ldr	r3, [pc, #680]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	4aa9      	ldr	r2, [pc, #676]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800252e:	e011      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002530:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002534:	3308      	adds	r3, #8
 8002536:	2102      	movs	r1, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f002 f8cd 	bl	80046d8 <RCCEx_PLL2_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002544:	e006      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800254c:	e002      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002554:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002558:	2b00      	cmp	r3, #0
 800255a:	d10a      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800255c:	4b9b      	ldr	r3, [pc, #620]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	4a98      	ldr	r2, [pc, #608]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800256c:	430b      	orrs	r3, r1
 800256e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002570:	e003      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002572:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002576:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800257a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002586:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800258a:	2300      	movs	r3, #0
 800258c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002590:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002594:	460b      	mov	r3, r1
 8002596:	4313      	orrs	r3, r2
 8002598:	d051      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800259a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800259e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025a4:	d035      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80025a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80025aa:	d82e      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80025ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025b0:	d031      	beq.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80025b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80025b6:	d828      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80025b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025bc:	d01a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c2:	d822      	bhi.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80025c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025cc:	d007      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80025ce:	e01c      	b.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d0:	4b7e      	ldr	r3, [pc, #504]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	4a7d      	ldr	r2, [pc, #500]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80025d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025dc:	e01c      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025e2:	3308      	adds	r3, #8
 80025e4:	2100      	movs	r1, #0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f002 f876 	bl	80046d8 <RCCEx_PLL2_Config>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025f2:	e011      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025f8:	3328      	adds	r3, #40	; 0x28
 80025fa:	2100      	movs	r1, #0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f002 f91d 	bl	800483c <RCCEx_PLL3_Config>
 8002602:	4603      	mov	r3, r0
 8002604:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002608:	e006      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002610:	e002      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002612:	bf00      	nop
 8002614:	e000      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002618:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002624:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	4a67      	ldr	r2, [pc, #412]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002630:	430b      	orrs	r3, r1
 8002632:	6513      	str	r3, [r2, #80]	; 0x50
 8002634:	e003      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800263a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800263e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800264a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002654:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002658:	460b      	mov	r3, r1
 800265a:	4313      	orrs	r3, r2
 800265c:	d053      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800265e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d033      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800266a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266e:	d82c      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002670:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002674:	d02f      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002676:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800267a:	d826      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800267c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002680:	d02b      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002682:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002686:	d820      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800268c:	d012      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800268e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002692:	d81a      	bhi.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d022      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d115      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800269e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026a2:	3308      	adds	r3, #8
 80026a4:	2101      	movs	r1, #1
 80026a6:	4618      	mov	r0, r3
 80026a8:	f002 f816 	bl	80046d8 <RCCEx_PLL2_Config>
 80026ac:	4603      	mov	r3, r0
 80026ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026b2:	e015      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f002 f8bd 	bl	800483c <RCCEx_PLL3_Config>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026c8:	e00a      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80026d0:	e006      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80026d2:	bf00      	nop
 80026d4:	e004      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80026d6:	bf00      	nop
 80026d8:	e002      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80026de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d10a      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026e8:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ec:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80026f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	4a35      	ldr	r2, [pc, #212]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80026f8:	430b      	orrs	r3, r1
 80026fa:	6513      	str	r3, [r2, #80]	; 0x50
 80026fc:	e003      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002702:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002716:	2300      	movs	r3, #0
 8002718:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800271c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002720:	460b      	mov	r3, r1
 8002722:	4313      	orrs	r3, r2
 8002724:	d058      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800272a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800272e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002732:	d033      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d82c      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273e:	d02f      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002744:	d826      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002746:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800274a:	d02b      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800274c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002750:	d820      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002756:	d012      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002758:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800275c:	d81a      	bhi.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800275e:	2b00      	cmp	r3, #0
 8002760:	d022      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002762:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002766:	d115      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002768:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800276c:	3308      	adds	r3, #8
 800276e:	2101      	movs	r1, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f001 ffb1 	bl	80046d8 <RCCEx_PLL2_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800277c:	e015      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800277e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002782:	3328      	adds	r3, #40	; 0x28
 8002784:	2101      	movs	r1, #1
 8002786:	4618      	mov	r0, r3
 8002788:	f002 f858 	bl	800483c <RCCEx_PLL3_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002792:	e00a      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800279a:	e006      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800279c:	bf00      	nop
 800279e:	e004      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027a0:	bf00      	nop
 80027a2:	e002      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027a4:	bf00      	nop
 80027a6:	e000      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80027a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10e      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80027ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027c2:	4a02      	ldr	r2, [pc, #8]	; (80027cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80027c4:	430b      	orrs	r3, r1
 80027c6:	6593      	str	r3, [r2, #88]	; 0x58
 80027c8:	e006      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80027ca:	bf00      	nop
 80027cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80027d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80027ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4313      	orrs	r3, r2
 80027f6:	d037      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80027f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80027fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002802:	d00e      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002808:	d816      	bhi.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800280a:	2b00      	cmp	r3, #0
 800280c:	d018      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800280e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002812:	d111      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002814:	4bc4      	ldr	r3, [pc, #784]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	4ac3      	ldr	r2, [pc, #780]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800281a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800281e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002820:	e00f      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002826:	3308      	adds	r3, #8
 8002828:	2101      	movs	r1, #1
 800282a:	4618      	mov	r0, r3
 800282c:	f001 ff54 	bl	80046d8 <RCCEx_PLL2_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002836:	e004      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800283e:	e000      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002842:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10a      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800284a:	4bb7      	ldr	r3, [pc, #732]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800284c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002858:	4ab3      	ldr	r2, [pc, #716]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800285a:	430b      	orrs	r3, r1
 800285c:	6513      	str	r3, [r2, #80]	; 0x50
 800285e:	e003      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800286c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002870:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002878:	2300      	movs	r3, #0
 800287a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800287e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002882:	460b      	mov	r3, r1
 8002884:	4313      	orrs	r3, r2
 8002886:	d039      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800288c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288e:	2b03      	cmp	r3, #3
 8002890:	d81c      	bhi.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002892:	a201      	add	r2, pc, #4	; (adr r2, 8002898 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8002894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002898:	080028d5 	.word	0x080028d5
 800289c:	080028a9 	.word	0x080028a9
 80028a0:	080028b7 	.word	0x080028b7
 80028a4:	080028d5 	.word	0x080028d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a8:	4b9f      	ldr	r3, [pc, #636]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	4a9e      	ldr	r2, [pc, #632]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80028ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028b4:	e00f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ba:	3308      	adds	r3, #8
 80028bc:	2102      	movs	r1, #2
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 ff0a 	bl	80046d8 <RCCEx_PLL2_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80028ca:	e004      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80028d2:	e000      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80028d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80028de:	4b92      	ldr	r3, [pc, #584]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	f023 0103 	bic.w	r1, r3, #3
 80028e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	4a8e      	ldr	r2, [pc, #568]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80028ee:	430b      	orrs	r3, r1
 80028f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028f2:	e003      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80028f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002912:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002916:	460b      	mov	r3, r1
 8002918:	4313      	orrs	r3, r2
 800291a:	f000 8099 	beq.w	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800291e:	4b83      	ldr	r3, [pc, #524]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a82      	ldr	r2, [pc, #520]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002928:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800292a:	f7fe f9a9 	bl	8000c80 <HAL_GetTick>
 800292e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002932:	e00b      	b.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe f9a4 	bl	8000c80 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b64      	cmp	r3, #100	; 0x64
 8002942:	d903      	bls.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800294a:	e005      	b.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800294c:	4b77      	ldr	r3, [pc, #476]	; (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ed      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800295c:	2b00      	cmp	r3, #0
 800295e:	d173      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002960:	4b71      	ldr	r3, [pc, #452]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002962:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800296c:	4053      	eors	r3, r2
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002976:	4b6c      	ldr	r3, [pc, #432]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800297e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002982:	4b69      	ldr	r3, [pc, #420]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a68      	ldr	r2, [pc, #416]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800298e:	4b66      	ldr	r3, [pc, #408]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a65      	ldr	r2, [pc, #404]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800299a:	4a63      	ldr	r2, [pc, #396]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800299c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80029a0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029ae:	d118      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7fe f966 	bl	8000c80 <HAL_GetTick>
 80029b4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029b8:	e00d      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ba:	f7fe f961 	bl	8000c80 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80029c4:	1ad2      	subs	r2, r2, r3
 80029c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d903      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80029d4:	e005      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d6:	4b54      	ldr	r3, [pc, #336]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0eb      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80029e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d129      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029fa:	d10e      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x846>
 80029fc:	4b4a      	ldr	r3, [pc, #296]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a0c:	091a      	lsrs	r2, r3, #4
 8002a0e:	4b48      	ldr	r3, [pc, #288]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a10:	4013      	ands	r3, r2
 8002a12:	4a45      	ldr	r2, [pc, #276]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a14:	430b      	orrs	r3, r1
 8002a16:	6113      	str	r3, [r2, #16]
 8002a18:	e005      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8002a1a:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	4a42      	ldr	r2, [pc, #264]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a24:	6113      	str	r3, [r2, #16]
 8002a26:	4b40      	ldr	r3, [pc, #256]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	4a3c      	ldr	r2, [pc, #240]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3c:	e008      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002a46:	e003      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	f002 0301 	and.w	r3, r2, #1
 8002a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002a66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f000 808f 	beq.w	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a78:	2b28      	cmp	r3, #40	; 0x28
 8002a7a:	d871      	bhi.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8002a7c:	a201      	add	r2, pc, #4	; (adr r2, 8002a84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8002a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a82:	bf00      	nop
 8002a84:	08002b69 	.word	0x08002b69
 8002a88:	08002b61 	.word	0x08002b61
 8002a8c:	08002b61 	.word	0x08002b61
 8002a90:	08002b61 	.word	0x08002b61
 8002a94:	08002b61 	.word	0x08002b61
 8002a98:	08002b61 	.word	0x08002b61
 8002a9c:	08002b61 	.word	0x08002b61
 8002aa0:	08002b61 	.word	0x08002b61
 8002aa4:	08002b35 	.word	0x08002b35
 8002aa8:	08002b61 	.word	0x08002b61
 8002aac:	08002b61 	.word	0x08002b61
 8002ab0:	08002b61 	.word	0x08002b61
 8002ab4:	08002b61 	.word	0x08002b61
 8002ab8:	08002b61 	.word	0x08002b61
 8002abc:	08002b61 	.word	0x08002b61
 8002ac0:	08002b61 	.word	0x08002b61
 8002ac4:	08002b4b 	.word	0x08002b4b
 8002ac8:	08002b61 	.word	0x08002b61
 8002acc:	08002b61 	.word	0x08002b61
 8002ad0:	08002b61 	.word	0x08002b61
 8002ad4:	08002b61 	.word	0x08002b61
 8002ad8:	08002b61 	.word	0x08002b61
 8002adc:	08002b61 	.word	0x08002b61
 8002ae0:	08002b61 	.word	0x08002b61
 8002ae4:	08002b69 	.word	0x08002b69
 8002ae8:	08002b61 	.word	0x08002b61
 8002aec:	08002b61 	.word	0x08002b61
 8002af0:	08002b61 	.word	0x08002b61
 8002af4:	08002b61 	.word	0x08002b61
 8002af8:	08002b61 	.word	0x08002b61
 8002afc:	08002b61 	.word	0x08002b61
 8002b00:	08002b61 	.word	0x08002b61
 8002b04:	08002b69 	.word	0x08002b69
 8002b08:	08002b61 	.word	0x08002b61
 8002b0c:	08002b61 	.word	0x08002b61
 8002b10:	08002b61 	.word	0x08002b61
 8002b14:	08002b61 	.word	0x08002b61
 8002b18:	08002b61 	.word	0x08002b61
 8002b1c:	08002b61 	.word	0x08002b61
 8002b20:	08002b61 	.word	0x08002b61
 8002b24:	08002b69 	.word	0x08002b69
 8002b28:	58024400 	.word	0x58024400
 8002b2c:	58024800 	.word	0x58024800
 8002b30:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b38:	3308      	adds	r3, #8
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f001 fdcb 	bl	80046d8 <RCCEx_PLL2_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b48:	e00f      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b4e:	3328      	adds	r3, #40	; 0x28
 8002b50:	2101      	movs	r1, #1
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 fe72 	bl	800483c <RCCEx_PLL3_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b5e:	e004      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b66:	e000      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b72:	4bbf      	ldr	r3, [pc, #764]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b76:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b80:	4abb      	ldr	r2, [pc, #748]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002b82:	430b      	orrs	r3, r1
 8002b84:	6553      	str	r3, [r2, #84]	; 0x54
 8002b86:	e003      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f002 0302 	and.w	r3, r2, #2
 8002b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ba6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4313      	orrs	r3, r2
 8002bae:	d041      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d824      	bhi.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002c0d 	.word	0x08002c0d
 8002bc4:	08002bd9 	.word	0x08002bd9
 8002bc8:	08002bef 	.word	0x08002bef
 8002bcc:	08002c0d 	.word	0x08002c0d
 8002bd0:	08002c0d 	.word	0x08002c0d
 8002bd4:	08002c0d 	.word	0x08002c0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bdc:	3308      	adds	r3, #8
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f001 fd79 	bl	80046d8 <RCCEx_PLL2_Config>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002bec:	e00f      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bf2:	3328      	adds	r3, #40	; 0x28
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fe20 	bl	800483c <RCCEx_PLL3_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c02:	e004      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c0a:	e000      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8002c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c16:	4b96      	ldr	r3, [pc, #600]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f023 0107 	bic.w	r1, r3, #7
 8002c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c24:	4a92      	ldr	r2, [pc, #584]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002c26:	430b      	orrs	r3, r1
 8002c28:	6553      	str	r3, [r2, #84]	; 0x54
 8002c2a:	e003      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c3c:	f002 0304 	and.w	r3, r2, #4
 8002c40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4313      	orrs	r3, r2
 8002c52:	d044      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	2b05      	cmp	r3, #5
 8002c5e:	d825      	bhi.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002cb5 	.word	0x08002cb5
 8002c6c:	08002c81 	.word	0x08002c81
 8002c70:	08002c97 	.word	0x08002c97
 8002c74:	08002cb5 	.word	0x08002cb5
 8002c78:	08002cb5 	.word	0x08002cb5
 8002c7c:	08002cb5 	.word	0x08002cb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c84:	3308      	adds	r3, #8
 8002c86:	2101      	movs	r1, #1
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f001 fd25 	bl	80046d8 <RCCEx_PLL2_Config>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c94:	e00f      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c9a:	3328      	adds	r3, #40	; 0x28
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f001 fdcc 	bl	800483c <RCCEx_PLL3_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002caa:	e004      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002cb2:	e000      	b.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8002cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	f023 0107 	bic.w	r1, r3, #7
 8002cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd4:	e003      	b.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002cda:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f002 0320 	and.w	r3, r2, #32
 8002cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002cf4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	d055      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0a:	d033      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d10:	d82c      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d16:	d02f      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d826      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d22:	d02b      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002d24:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d28:	d820      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002d2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d2e:	d012      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d34:	d81a      	bhi.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d022      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d3e:	d115      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d44:	3308      	adds	r3, #8
 8002d46:	2100      	movs	r1, #0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f001 fcc5 	bl	80046d8 <RCCEx_PLL2_Config>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d54:	e015      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d5a:	3328      	adds	r3, #40	; 0x28
 8002d5c:	2102      	movs	r1, #2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f001 fd6c 	bl	800483c <RCCEx_PLL3_Config>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d72:	e006      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002d74:	bf00      	nop
 8002d76:	e004      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002d78:	bf00      	nop
 8002d7a:	e002      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10b      	bne.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002d9c:	430b      	orrs	r3, r1
 8002d9e:	6553      	str	r3, [r2, #84]	; 0x54
 8002da0:	e003      	b.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002da6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002db6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002dba:	2300      	movs	r3, #0
 8002dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002dc0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d058      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002dd6:	d033      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8002dd8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ddc:	d82c      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de2:	d02f      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002de8:	d826      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002dee:	d02b      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002df4:	d820      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfa:	d012      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e00:	d81a      	bhi.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d022      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e0a:	d115      	bne.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e10:	3308      	adds	r3, #8
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f001 fc5f 	bl	80046d8 <RCCEx_PLL2_Config>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e20:	e015      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e26:	3328      	adds	r3, #40	; 0x28
 8002e28:	2102      	movs	r1, #2
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f001 fd06 	bl	800483c <RCCEx_PLL3_Config>
 8002e30:	4603      	mov	r3, r0
 8002e32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e36:	e00a      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e3e:	e006      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002e40:	bf00      	nop
 8002e42:	e004      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002e44:	bf00      	nop
 8002e46:	e002      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002e48:	bf00      	nop
 8002e4a:	e000      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10e      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e66:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8002e6e:	bf00      	nop
 8002e70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002e88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002e92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002e96:	460b      	mov	r3, r1
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	d055      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ea0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002ea4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002ea8:	d033      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8002eaa:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002eae:	d82c      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	d02f      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8002eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eba:	d826      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002ebc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec0:	d02b      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8002ec2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ec6:	d820      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ecc:	d012      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8002ece:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed2:	d81a      	bhi.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d022      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002edc:	d115      	bne.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f001 fbf6 	bl	80046d8 <RCCEx_PLL2_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002ef2:	e015      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ef8:	3328      	adds	r3, #40	; 0x28
 8002efa:	2102      	movs	r1, #2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 fc9d 	bl	800483c <RCCEx_PLL3_Config>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f08:	e00a      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f10:	e006      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002f12:	bf00      	nop
 8002f14:	e004      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002f16:	bf00      	nop
 8002f18:	e002      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002f1a:	bf00      	nop
 8002f1c:	e000      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002f1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10b      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f28:	4ba0      	ldr	r3, [pc, #640]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f38:	4a9c      	ldr	r2, [pc, #624]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3e:	e003      	b.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f002 0308 	and.w	r3, r2, #8
 8002f54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002f5e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002f62:	460b      	mov	r3, r1
 8002f64:	4313      	orrs	r3, r2
 8002f66:	d01e      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8002f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f7a:	3328      	adds	r3, #40	; 0x28
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 fc5c 	bl	800483c <RCCEx_PLL3_Config>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002f90:	4b86      	ldr	r3, [pc, #536]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f94:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fa0:	4a82      	ldr	r2, [pc, #520]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f002 0310 	and.w	r3, r2, #16
 8002fb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fbc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d01e      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd2:	d10c      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fd8:	3328      	adds	r3, #40	; 0x28
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fc2d 	bl	800483c <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fee:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ffe:	4a6b      	ldr	r2, [pc, #428]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003010:	67bb      	str	r3, [r7, #120]	; 0x78
 8003012:	2300      	movs	r3, #0
 8003014:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003016:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800301a:	460b      	mov	r3, r1
 800301c:	4313      	orrs	r3, r2
 800301e:	d03e      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800302c:	d022      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800302e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003032:	d81b      	bhi.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303c:	d00b      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800303e:	e015      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003044:	3308      	adds	r3, #8
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fb45 	bl	80046d8 <RCCEx_PLL2_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003054:	e00f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800305a:	3328      	adds	r3, #40	; 0x28
 800305c:	2102      	movs	r1, #2
 800305e:	4618      	mov	r0, r3
 8003060:	f001 fbec 	bl	800483c <RCCEx_PLL3_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800306a:	e004      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003072:	e000      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003076:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10b      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800307e:	4b4b      	ldr	r3, [pc, #300]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003082:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003086:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800308a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800308e:	4a47      	ldr	r2, [pc, #284]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003090:	430b      	orrs	r3, r1
 8003092:	6593      	str	r3, [r2, #88]	; 0x58
 8003094:	e003      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003096:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800309a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800309e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80030aa:	673b      	str	r3, [r7, #112]	; 0x70
 80030ac:	2300      	movs	r3, #0
 80030ae:	677b      	str	r3, [r7, #116]	; 0x74
 80030b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80030b4:	460b      	mov	r3, r1
 80030b6:	4313      	orrs	r3, r2
 80030b8:	d03b      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80030ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030c6:	d01f      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80030c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80030cc:	d818      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80030ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030d2:	d003      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80030d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030d8:	d007      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80030da:	e011      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4b33      	ldr	r3, [pc, #204]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4a32      	ldr	r2, [pc, #200]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80030e8:	e00f      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ee:	3328      	adds	r3, #40	; 0x28
 80030f0:	2101      	movs	r1, #1
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fba2 	bl	800483c <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80030fe:	e004      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10b      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003112:	4b26      	ldr	r3, [pc, #152]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003116:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800311a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800311e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003124:	430b      	orrs	r3, r1
 8003126:	6553      	str	r3, [r2, #84]	; 0x54
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800312e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800313e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003140:	2300      	movs	r3, #0
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003144:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003148:	460b      	mov	r3, r1
 800314a:	4313      	orrs	r3, r2
 800314c:	d034      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800314e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315c:	d007      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800315e:	e011      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	4a11      	ldr	r2, [pc, #68]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003166:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800316a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800316c:	e00e      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800316e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003172:	3308      	adds	r3, #8
 8003174:	2102      	movs	r1, #2
 8003176:	4618      	mov	r0, r3
 8003178:	f001 faae 	bl	80046d8 <RCCEx_PLL2_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003182:	e003      	b.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800318a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800318c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10d      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003198:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800319c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	4a02      	ldr	r2, [pc, #8]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80031a4:	430b      	orrs	r3, r1
 80031a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a8:	e006      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80031aa:	bf00      	nop
 80031ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80031c4:	663b      	str	r3, [r7, #96]	; 0x60
 80031c6:	2300      	movs	r3, #0
 80031c8:	667b      	str	r3, [r7, #100]	; 0x64
 80031ca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80031ce:	460b      	mov	r3, r1
 80031d0:	4313      	orrs	r3, r2
 80031d2:	d00c      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80031d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d8:	3328      	adds	r3, #40	; 0x28
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 fb2d 	bl	800483c <RCCEx_PLL3_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80031fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80031fc:	2300      	movs	r3, #0
 80031fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003200:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003204:	460b      	mov	r3, r1
 8003206:	4313      	orrs	r3, r2
 8003208:	d036      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800320a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800320e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003214:	d018      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003216:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800321a:	d811      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003220:	d014      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003226:	d80b      	bhi.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d011      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d106      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003232:	4bb7      	ldr	r3, [pc, #732]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	4ab6      	ldr	r2, [pc, #728]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800323c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800323e:	e008      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003246:	e004      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003248:	bf00      	nop
 800324a:	e002      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800324c:	bf00      	nop
 800324e:	e000      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003250:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003252:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10a      	bne.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800325a:	4bad      	ldr	r3, [pc, #692]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003268:	4aa9      	ldr	r2, [pc, #676]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800326a:	430b      	orrs	r3, r1
 800326c:	6553      	str	r3, [r2, #84]	; 0x54
 800326e:	e003      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003270:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003274:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003280:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003284:	653b      	str	r3, [r7, #80]	; 0x50
 8003286:	2300      	movs	r3, #0
 8003288:	657b      	str	r3, [r7, #84]	; 0x54
 800328a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800328e:	460b      	mov	r3, r1
 8003290:	4313      	orrs	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003294:	4b9e      	ldr	r3, [pc, #632]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800329c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a9b      	ldr	r2, [pc, #620]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80032b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80032b6:	2300      	movs	r3, #0
 80032b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80032be:	460b      	mov	r3, r1
 80032c0:	4313      	orrs	r3, r2
 80032c2:	d009      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032c4:	4b92      	ldr	r3, [pc, #584]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80032c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80032cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032d2:	4a8f      	ldr	r2, [pc, #572]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80032e4:	643b      	str	r3, [r7, #64]	; 0x40
 80032e6:	2300      	movs	r3, #0
 80032e8:	647b      	str	r3, [r7, #68]	; 0x44
 80032ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80032ee:	460b      	mov	r3, r1
 80032f0:	4313      	orrs	r3, r2
 80032f2:	d00e      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032f4:	4b86      	ldr	r3, [pc, #536]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	4a85      	ldr	r2, [pc, #532]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80032fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80032fe:	6113      	str	r3, [r2, #16]
 8003300:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003308:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800330c:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800330e:	430b      	orrs	r3, r1
 8003310:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800331e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003320:	2300      	movs	r3, #0
 8003322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003324:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003328:	460b      	mov	r3, r1
 800332a:	4313      	orrs	r3, r2
 800332c:	d009      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800332e:	4b78      	ldr	r3, [pc, #480]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003332:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	4a74      	ldr	r2, [pc, #464]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800333e:	430b      	orrs	r3, r1
 8003340:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800334e:	633b      	str	r3, [r7, #48]	; 0x30
 8003350:	2300      	movs	r3, #0
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
 8003354:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003358:	460b      	mov	r3, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	d00a      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800335e:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336e:	4a68      	ldr	r2, [pc, #416]	; (8003510 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003370:	430b      	orrs	r3, r1
 8003372:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	2100      	movs	r1, #0
 800337e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800338a:	460b      	mov	r3, r1
 800338c:	4313      	orrs	r3, r2
 800338e:	d011      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003394:	3308      	adds	r3, #8
 8003396:	2100      	movs	r1, #0
 8003398:	4618      	mov	r0, r3
 800339a:	f001 f99d 	bl	80046d8 <RCCEx_PLL2_Config>
 800339e:	4603      	mov	r3, r0
 80033a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80033a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80033b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033bc:	2100      	movs	r1, #0
 80033be:	6239      	str	r1, [r7, #32]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
 80033c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033ca:	460b      	mov	r3, r1
 80033cc:	4313      	orrs	r3, r2
 80033ce:	d011      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033d4:	3308      	adds	r3, #8
 80033d6:	2101      	movs	r1, #1
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 f97d 	bl	80046d8 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80033e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80033f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	2100      	movs	r1, #0
 80033fe:	61b9      	str	r1, [r7, #24]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d011      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003414:	3308      	adds	r3, #8
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f001 f95d 	bl	80046d8 <RCCEx_PLL2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800342c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003430:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	2100      	movs	r1, #0
 800343e:	6139      	str	r1, [r7, #16]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	617b      	str	r3, [r7, #20]
 8003446:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800344a:	460b      	mov	r3, r1
 800344c:	4313      	orrs	r3, r2
 800344e:	d011      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003454:	3328      	adds	r3, #40	; 0x28
 8003456:	2100      	movs	r1, #0
 8003458:	4618      	mov	r0, r3
 800345a:	f001 f9ef 	bl	800483c <RCCEx_PLL3_Config>
 800345e:	4603      	mov	r3, r0
 8003460:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003464:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003468:	2b00      	cmp	r3, #0
 800346a:	d003      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003470:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	2100      	movs	r1, #0
 800347e:	60b9      	str	r1, [r7, #8]
 8003480:	f003 0310 	and.w	r3, r3, #16
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800348a:	460b      	mov	r3, r1
 800348c:	4313      	orrs	r3, r2
 800348e:	d011      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003494:	3328      	adds	r3, #40	; 0x28
 8003496:	2101      	movs	r1, #1
 8003498:	4618      	mov	r0, r3
 800349a:	f001 f9cf 	bl	800483c <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80034a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80034b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	2100      	movs	r1, #0
 80034be:	6039      	str	r1, [r7, #0]
 80034c0:	f003 0320 	and.w	r3, r3, #32
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	d011      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d4:	3328      	adds	r3, #40	; 0x28
 80034d6:	2102      	movs	r1, #2
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 f9af 	bl	800483c <RCCEx_PLL3_Config>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80034e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80034f4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003508:	46bd      	mov	sp, r7
 800350a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350e:	bf00      	nop
 8003510:	58024400 	.word	0x58024400

08003514 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b090      	sub	sp, #64	; 0x40
 8003518:	af00      	add	r7, sp, #0
 800351a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800351e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003522:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8003526:	430b      	orrs	r3, r1
 8003528:	f040 8094 	bne.w	8003654 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800352c:	4b9b      	ldr	r3, [pc, #620]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	2b04      	cmp	r3, #4
 800353a:	f200 8087 	bhi.w	800364c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003559 	.word	0x08003559
 8003548:	08003581 	.word	0x08003581
 800354c:	080035a9 	.word	0x080035a9
 8003550:	08003645 	.word	0x08003645
 8003554:	080035d1 	.word	0x080035d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003558:	4b90      	ldr	r3, [pc, #576]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003564:	d108      	bne.n	8003578 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800356a:	4618      	mov	r0, r3
 800356c:	f000 ff62 	bl	8004434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003574:	f000 bc93 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800357c:	f000 bc8f 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003580:	4b86      	ldr	r3, [pc, #536]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358c:	d108      	bne.n	80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800358e:	f107 0318 	add.w	r3, r7, #24
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fca6 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800359c:	f000 bc7f 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80035a4:	f000 bc7b 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80035a8:	4b7c      	ldr	r3, [pc, #496]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b4:	d108      	bne.n	80035c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 fde6 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80035c4:	f000 bc6b 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80035cc:	f000 bc67 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80035d0:	4b72      	ldr	r3, [pc, #456]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80035d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035d8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d10c      	bne.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80035e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035ec:	4b6b      	ldr	r3, [pc, #428]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	08db      	lsrs	r3, r3, #3
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035fe:	e01f      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360c:	d106      	bne.n	800361c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800360e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003614:	d102      	bne.n	800361c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003616:	4b63      	ldr	r3, [pc, #396]	; (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003618:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361a:	e011      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800361c:	4b5f      	ldr	r3, [pc, #380]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003628:	d106      	bne.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800362a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003630:	d102      	bne.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003632:	4b5d      	ldr	r3, [pc, #372]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003636:	e003      	b.n	8003640 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800363c:	f000 bc2f 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003640:	f000 bc2d 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003648:	f000 bc29 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003650:	f000 bc25 	b.w	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003658:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800365c:	430b      	orrs	r3, r1
 800365e:	f040 80a7 	bne.w	80037b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003666:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800366a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003672:	d054      	beq.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8003674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800367a:	f200 808b 	bhi.w	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003684:	f000 8083 	beq.w	800378e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800368e:	f200 8081 	bhi.w	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8003692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003698:	d02f      	beq.n	80036fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d878      	bhi.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80036a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036ae:	d012      	beq.n	80036d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80036b0:	e070      	b.n	8003794 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80036b2:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036be:	d107      	bne.n	80036d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80036c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 feb5 	bl	8004434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80036ce:	e3e6      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80036d4:	e3e3      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80036d6:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036e2:	d107      	bne.n	80036f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80036e4:	f107 0318 	add.w	r3, r7, #24
 80036e8:	4618      	mov	r0, r3
 80036ea:	f000 fbfb 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80036f2:	e3d4      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80036f8:	e3d1      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80036fa:	4b28      	ldr	r3, [pc, #160]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003706:	d107      	bne.n	8003718 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fd3d 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003716:	e3c2      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800371c:	e3bf      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800371e:	4b1f      	ldr	r3, [pc, #124]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003722:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003726:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003728:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b04      	cmp	r3, #4
 8003732:	d10c      	bne.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8003734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	08db      	lsrs	r3, r3, #3
 8003740:	f003 0303 	and.w	r3, r3, #3
 8003744:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003746:	fa22 f303 	lsr.w	r3, r2, r3
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800374c:	e01e      	b.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800375a:	d106      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003762:	d102      	bne.n	800376a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003766:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003768:	e010      	b.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003776:	d106      	bne.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377e:	d102      	bne.n	8003786 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003784:	e002      	b.n	800378c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800378a:	e388      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800378c:	e387      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800378e:	4b07      	ldr	r3, [pc, #28]	; (80037ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003792:	e384      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003798:	e381      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
 80037a0:	03d09000 	.word	0x03d09000
 80037a4:	003d0900 	.word	0x003d0900
 80037a8:	017d7840 	.word	0x017d7840
 80037ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80037b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037b4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80037b8:	430b      	orrs	r3, r1
 80037ba:	f040 809c 	bne.w	80038f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80037be:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80037c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80037c6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80037c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037ce:	d054      	beq.n	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80037d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037d6:	f200 808b 	bhi.w	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037e0:	f000 8083 	beq.w	80038ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80037ea:	f200 8081 	bhi.w	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037f4:	d02f      	beq.n	8003856 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037fc:	d878      	bhi.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	2b00      	cmp	r3, #0
 8003802:	d004      	beq.n	800380e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800380a:	d012      	beq.n	8003832 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800380c:	e070      	b.n	80038f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800380e:	4b8a      	ldr	r3, [pc, #552]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800381a:	d107      	bne.n	800382c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800381c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fe07 	bl	8004434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800382a:	e338      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003830:	e335      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003832:	4b81      	ldr	r3, [pc, #516]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800383e:	d107      	bne.n	8003850 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fb4d 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800384e:	e326      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003854:	e323      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003856:	4b78      	ldr	r3, [pc, #480]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003862:	d107      	bne.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fc8f 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003872:	e314      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003878:	e311      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800387a:	4b6f      	ldr	r3, [pc, #444]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003882:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003884:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b04      	cmp	r3, #4
 800388e:	d10c      	bne.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8003890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003896:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	08db      	lsrs	r3, r3, #3
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	4a66      	ldr	r2, [pc, #408]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a8:	e01e      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80038aa:	4b63      	ldr	r3, [pc, #396]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b6:	d106      	bne.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80038b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038be:	d102      	bne.n	80038c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80038c0:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c4:	e010      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80038c6:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038d2:	d106      	bne.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80038d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038da:	d102      	bne.n	80038e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80038dc:	4b59      	ldr	r3, [pc, #356]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80038de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e0:	e002      	b.n	80038e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80038e6:	e2da      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80038e8:	e2d9      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80038ea:	4b57      	ldr	r3, [pc, #348]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80038ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80038ee:	e2d6      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80038f0:	2300      	movs	r3, #0
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80038f4:	e2d3      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80038f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fa:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80038fe:	430b      	orrs	r3, r1
 8003900:	f040 80a7 	bne.w	8003a52 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8003904:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003908:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800390c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800390e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003910:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003914:	d055      	beq.n	80039c2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800391c:	f200 8096 	bhi.w	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8003920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003926:	f000 8084 	beq.w	8003a32 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003930:	f200 808c 	bhi.w	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8003934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800393a:	d030      	beq.n	800399e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003942:	f200 8083 	bhi.w	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8003946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d004      	beq.n	8003956 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003952:	d012      	beq.n	800397a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8003954:	e07a      	b.n	8003a4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003956:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003962:	d107      	bne.n	8003974 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003968:	4618      	mov	r0, r3
 800396a:	f000 fd63 	bl	8004434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003972:	e294      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003978:	e291      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800397a:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003986:	d107      	bne.n	8003998 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003988:	f107 0318 	add.w	r3, r7, #24
 800398c:	4618      	mov	r0, r3
 800398e:	f000 faa9 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003996:	e282      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800399c:	e27f      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039aa:	d107      	bne.n	80039bc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80039ac:	f107 030c 	add.w	r3, r7, #12
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 fbeb 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80039ba:	e270      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80039c0:	e26d      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80039cc:	4b1a      	ldr	r3, [pc, #104]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b04      	cmp	r3, #4
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80039d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d109      	bne.n	80039f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	08db      	lsrs	r3, r3, #3
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	4a14      	ldr	r2, [pc, #80]	; (8003a3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80039ea:	fa22 f303 	lsr.w	r3, r2, r3
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039f0:	e01e      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80039f2:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039fe:	d106      	bne.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8003a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a06:	d102      	bne.n	8003a0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003a08:	4b0d      	ldr	r3, [pc, #52]	; (8003a40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8003a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a0c:	e010      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a1a:	d106      	bne.n	8003a2a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a22:	d102      	bne.n	8003a2a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	e002      	b.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003a2e:	e236      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003a30:	e235      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003a32:	4b05      	ldr	r3, [pc, #20]	; (8003a48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8003a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003a36:	e232      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	03d09000 	.word	0x03d09000
 8003a40:	003d0900 	.word	0x003d0900
 8003a44:	017d7840 	.word	0x017d7840
 8003a48:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003a50:	e225      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8003a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a56:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	f040 8085 	bne.w	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8003a60:	4b9c      	ldr	r3, [pc, #624]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a64:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003a68:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8003a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a70:	d06b      	beq.n	8003b4a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8003a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a78:	d874      	bhi.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a80:	d056      	beq.n	8003b30 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a88:	d86c      	bhi.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a90:	d03b      	beq.n	8003b0a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8003a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a98:	d864      	bhi.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa0:	d021      	beq.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003aa8:	d85c      	bhi.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8003aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ab6:	d004      	beq.n	8003ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8003ab8:	e054      	b.n	8003b64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8003aba:	f7fe fb75 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8003abe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8003ac0:	e1ed      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ac2:	4b84      	ldr	r3, [pc, #528]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ace:	d107      	bne.n	8003ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003ad0:	f107 0318 	add.w	r3, r7, #24
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f000 fa05 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ade:	e1de      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ae4:	e1db      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003ae6:	4b7b      	ldr	r3, [pc, #492]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af2:	d107      	bne.n	8003b04 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003af4:	f107 030c 	add.w	r3, r7, #12
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fb47 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b02:	e1cc      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b08:	e1c9      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003b0a:	4b72      	ldr	r3, [pc, #456]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d109      	bne.n	8003b2a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b16:	4b6f      	ldr	r3, [pc, #444]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	08db      	lsrs	r3, r3, #3
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	4a6d      	ldr	r2, [pc, #436]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8003b22:	fa22 f303 	lsr.w	r3, r2, r3
 8003b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b28:	e1b9      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b2e:	e1b6      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b3c:	d102      	bne.n	8003b44 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8003b3e:	4b67      	ldr	r3, [pc, #412]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8003b40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b42:	e1ac      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b48:	e1a9      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b4a:	4b62      	ldr	r3, [pc, #392]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b56:	d102      	bne.n	8003b5e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8003b58:	4b61      	ldr	r3, [pc, #388]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b5c:	e19f      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b62:	e19c      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8003b64:	2300      	movs	r3, #0
 8003b66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b68:	e199      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8003b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b6e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8003b72:	430b      	orrs	r3, r1
 8003b74:	d173      	bne.n	8003c5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003b76:	4b57      	ldr	r3, [pc, #348]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b7e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b86:	d02f      	beq.n	8003be8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8003b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8e:	d863      	bhi.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8003b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d012      	beq.n	8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8003b9e:	e05b      	b.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bac:	d107      	bne.n	8003bbe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003bae:	f107 0318 	add.w	r3, r7, #24
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 f996 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003bbc:	e16f      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003bc2:	e16c      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003bc4:	4b43      	ldr	r3, [pc, #268]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003bd2:	f107 030c 	add.w	r3, r7, #12
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 fad8 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003be0:	e15d      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003be6:	e15a      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8003be8:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003bf0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003bf2:	4b38      	ldr	r3, [pc, #224]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d109      	bne.n	8003c18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c04:	4b33      	ldr	r3, [pc, #204]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	08db      	lsrs	r3, r3, #3
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	4a32      	ldr	r2, [pc, #200]	; (8003cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8003c10:	fa22 f303 	lsr.w	r3, r2, r3
 8003c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c16:	e01e      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003c18:	4b2e      	ldr	r3, [pc, #184]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c24:	d106      	bne.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8003c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003c2e:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8003c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c32:	e010      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c40:	d106      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8003c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c48:	d102      	bne.n	8003c50 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003c4a:	4b25      	ldr	r3, [pc, #148]	; (8003ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8003c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c4e:	e002      	b.n	8003c56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003c54:	e123      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003c56:	e122      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003c5c:	e11f      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8003c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c62:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8003c66:	430b      	orrs	r3, r1
 8003c68:	d13c      	bne.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8003c6a:	4b1a      	ldr	r3, [pc, #104]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c80:	d012      	beq.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8003c82:	e023      	b.n	8003ccc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003c84:	4b13      	ldr	r3, [pc, #76]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fbcc 	bl	8004434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ca0:	e0fd      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ca6:	e0fa      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb4:	d107      	bne.n	8003cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003cb6:	f107 0318 	add.w	r3, r7, #24
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 f912 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003cc4:	e0eb      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003cca:	e0e8      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003cd0:	e0e5      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003cd2:	bf00      	nop
 8003cd4:	58024400 	.word	0x58024400
 8003cd8:	03d09000 	.word	0x03d09000
 8003cdc:	003d0900 	.word	0x003d0900
 8003ce0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8003ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003cec:	430b      	orrs	r3, r1
 8003cee:	f040 8085 	bne.w	8003dfc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8003cf2:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d02:	d06b      	beq.n	8003ddc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d0a:	d874      	bhi.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d12:	d056      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8003d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d86c      	bhi.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d22:	d03b      	beq.n	8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8003d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d26:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d2a:	d864      	bhi.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d32:	d021      	beq.n	8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8003d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d85c      	bhi.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d004      	beq.n	8003d4c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8003d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d48:	d004      	beq.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8003d4a:	e054      	b.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003d4c:	f000 f8b4 	bl	8003eb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8003d50:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8003d52:	e0a4      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003d54:	4b54      	ldr	r3, [pc, #336]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d60:	d107      	bne.n	8003d72 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d62:	f107 0318 	add.w	r3, r7, #24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 f8bc 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d70:	e095      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d76:	e092      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003d78:	4b4b      	ldr	r3, [pc, #300]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d84:	d107      	bne.n	8003d96 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f9fe 	bl	800418c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003d94:	e083      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003d9a:	e080      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d9c:	4b42      	ldr	r3, [pc, #264]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d109      	bne.n	8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003da8:	4b3f      	ldr	r3, [pc, #252]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	08db      	lsrs	r3, r3, #3
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	4a3e      	ldr	r2, [pc, #248]	; (8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
 8003db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003dba:	e070      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003dc0:	e06d      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003dc2:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dce:	d102      	bne.n	8003dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8003dd0:	4b37      	ldr	r3, [pc, #220]	; (8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003dd4:	e063      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003dda:	e060      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ddc:	4b32      	ldr	r3, [pc, #200]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de8:	d102      	bne.n	8003df0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8003dea:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003dee:	e056      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003df0:	2300      	movs	r3, #0
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003df4:	e053      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003dfa:	e050      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e00:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8003e04:	430b      	orrs	r3, r1
 8003e06:	d148      	bne.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003e08:	4b27      	ldr	r3, [pc, #156]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e18:	d02a      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e20:	d838      	bhi.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2e:	d00d      	beq.n	8003e4c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8003e30:	e030      	b.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e32:	4b1d      	ldr	r3, [pc, #116]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e3e:	d102      	bne.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8003e40:	4b1c      	ldr	r3, [pc, #112]	; (8003eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e44:	e02b      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003e46:	2300      	movs	r3, #0
 8003e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e4a:	e028      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003e4c:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e58:	d107      	bne.n	8003e6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fae8 	bl	8004434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e68:	e019      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e6e:	e016      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003e70:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7c:	d107      	bne.n	8003e8e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e7e:	f107 0318 	add.w	r3, r7, #24
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f82e 	bl	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003e8c:	e007      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8003e94:	2300      	movs	r3, #0
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003e98:	e001      	b.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3740      	adds	r7, #64	; 0x40
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	58024400 	.word	0x58024400
 8003eac:	03d09000 	.word	0x03d09000
 8003eb0:	003d0900 	.word	0x003d0900
 8003eb4:	017d7840 	.word	0x017d7840

08003eb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ebc:	f7fe f944 	bl	8002148 <HAL_RCC_GetHCLKFreq>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	4b06      	ldr	r3, [pc, #24]	; (8003edc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	091b      	lsrs	r3, r3, #4
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	4904      	ldr	r1, [pc, #16]	; (8003ee0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ece:	5ccb      	ldrb	r3, [r1, r3]
 8003ed0:	f003 031f 	and.w	r3, r3, #31
 8003ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	58024400 	.word	0x58024400
 8003ee0:	0800a624 	.word	0x0800a624

08003ee4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b089      	sub	sp, #36	; 0x24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eec:	4ba1      	ldr	r3, [pc, #644]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	f003 0303 	and.w	r3, r3, #3
 8003ef4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003ef6:	4b9f      	ldr	r3, [pc, #636]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	0b1b      	lsrs	r3, r3, #12
 8003efc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003f02:	4b9c      	ldr	r3, [pc, #624]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003f0e:	4b99      	ldr	r3, [pc, #612]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	08db      	lsrs	r3, r3, #3
 8003f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8111 	beq.w	8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	f000 8083 	beq.w	8004040 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	f200 80a1 	bhi.w	8004084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d056      	beq.n	8003ffc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f4e:	e099      	b.n	8004084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f50:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d02d      	beq.n	8003fb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f5c:	4b85      	ldr	r3, [pc, #532]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	08db      	lsrs	r3, r3, #3
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	4a84      	ldr	r2, [pc, #528]	; (8004178 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f68:	fa22 f303 	lsr.w	r3, r2, r3
 8003f6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	ee07 3a90 	vmov	s15, r3
 8003f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f86:	4b7b      	ldr	r3, [pc, #492]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003fb6:	e087      	b.n	80040c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004180 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fca:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ffa:	e065      	b.n	80040c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800400a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400e:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004022:	eddf 5a56 	vldr	s11, [pc, #344]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800403e:	e043      	b.n	80040c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800404e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004052:	4b48      	ldr	r3, [pc, #288]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004062:	ed97 6a03 	vldr	s12, [r7, #12]
 8004066:	eddf 5a45 	vldr	s11, [pc, #276]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800406a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004082:	e021      	b.n	80040c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	ee07 3a90 	vmov	s15, r3
 800408a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80040aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800417c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80040c8:	4b2a      	ldr	r3, [pc, #168]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040cc:	0a5b      	lsrs	r3, r3, #9
 80040ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d2:	ee07 3a90 	vmov	s15, r3
 80040d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80040e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ee:	ee17 2a90 	vmov	r2, s15
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80040f6:	4b1f      	ldr	r3, [pc, #124]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fa:	0c1b      	lsrs	r3, r3, #16
 80040fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004100:	ee07 3a90 	vmov	s15, r3
 8004104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800410c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004110:	edd7 6a07 	vldr	s13, [r7, #28]
 8004114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800411c:	ee17 2a90 	vmov	r2, s15
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004124:	4b13      	ldr	r3, [pc, #76]	; (8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	0e1b      	lsrs	r3, r3, #24
 800412a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800412e:	ee07 3a90 	vmov	s15, r3
 8004132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800413a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800413e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800414a:	ee17 2a90 	vmov	r2, s15
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004152:	e008      	b.n	8004166 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	609a      	str	r2, [r3, #8]
}
 8004166:	bf00      	nop
 8004168:	3724      	adds	r7, #36	; 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	58024400 	.word	0x58024400
 8004178:	03d09000 	.word	0x03d09000
 800417c:	46000000 	.word	0x46000000
 8004180:	4c742400 	.word	0x4c742400
 8004184:	4a742400 	.word	0x4a742400
 8004188:	4bbebc20 	.word	0x4bbebc20

0800418c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800418c:	b480      	push	{r7}
 800418e:	b089      	sub	sp, #36	; 0x24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004194:	4ba1      	ldr	r3, [pc, #644]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	f003 0303 	and.w	r3, r3, #3
 800419c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800419e:	4b9f      	ldr	r3, [pc, #636]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	0d1b      	lsrs	r3, r3, #20
 80041a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80041aa:	4b9c      	ldr	r3, [pc, #624]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ae:	0a1b      	lsrs	r3, r3, #8
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80041b6:	4b99      	ldr	r3, [pc, #612]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	08db      	lsrs	r3, r3, #3
 80041bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	fb02 f303 	mul.w	r3, r2, r3
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8111 	beq.w	80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	f000 8083 	beq.w	80042e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	f200 80a1 	bhi.w	800432c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d056      	beq.n	80042a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041f6:	e099      	b.n	800432c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041f8:	4b88      	ldr	r3, [pc, #544]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d02d      	beq.n	8004260 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004204:	4b85      	ldr	r3, [pc, #532]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	08db      	lsrs	r3, r3, #3
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	4a84      	ldr	r2, [pc, #528]	; (8004420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004210:	fa22 f303 	lsr.w	r3, r2, r3
 8004214:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800422e:	4b7b      	ldr	r3, [pc, #492]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004236:	ee07 3a90 	vmov	s15, r3
 800423a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800423e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004242:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800424e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800425e:	e087      	b.n	8004370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004428 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800426e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004272:	4b6a      	ldr	r3, [pc, #424]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427a:	ee07 3a90 	vmov	s15, r3
 800427e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004282:	ed97 6a03 	vldr	s12, [r7, #12]
 8004286:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800428a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800428e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800429e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a2:	e065      	b.n	8004370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800442c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80042b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b6:	4b59      	ldr	r3, [pc, #356]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80042ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042e6:	e043      	b.n	8004370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042fa:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004302:	ee07 3a90 	vmov	s15, r3
 8004306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800430a:	ed97 6a03 	vldr	s12, [r7, #12]
 800430e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800431a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800431e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800432a:	e021      	b.n	8004370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800442c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800433a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004346:	ee07 3a90 	vmov	s15, r3
 800434a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800434e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004352:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800435a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800435e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800436a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800436e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004370:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	0a5b      	lsrs	r3, r3, #9
 8004376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800438a:	edd7 6a07 	vldr	s13, [r7, #28]
 800438e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004396:	ee17 2a90 	vmov	r2, s15
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800439e:	4b1f      	ldr	r3, [pc, #124]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	0c1b      	lsrs	r3, r3, #16
 80043a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a8:	ee07 3a90 	vmov	s15, r3
 80043ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80043bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043c4:	ee17 2a90 	vmov	r2, s15
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80043cc:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	0e1b      	lsrs	r3, r3, #24
 80043d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043d6:	ee07 3a90 	vmov	s15, r3
 80043da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80043ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043f2:	ee17 2a90 	vmov	r2, s15
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043fa:	e008      	b.n	800440e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
}
 800440e:	bf00      	nop
 8004410:	3724      	adds	r7, #36	; 0x24
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	58024400 	.word	0x58024400
 8004420:	03d09000 	.word	0x03d09000
 8004424:	46000000 	.word	0x46000000
 8004428:	4c742400 	.word	0x4c742400
 800442c:	4a742400 	.word	0x4a742400
 8004430:	4bbebc20 	.word	0x4bbebc20

08004434 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004434:	b480      	push	{r7}
 8004436:	b089      	sub	sp, #36	; 0x24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800443c:	4ba0      	ldr	r3, [pc, #640]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	f003 0303 	and.w	r3, r3, #3
 8004444:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004446:	4b9e      	ldr	r3, [pc, #632]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004450:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004452:	4b9b      	ldr	r3, [pc, #620]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800445c:	4b98      	ldr	r3, [pc, #608]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800445e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	fb02 f303 	mul.w	r3, r2, r3
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004474:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 8111 	beq.w	80046a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b02      	cmp	r3, #2
 8004484:	f000 8083 	beq.w	800458e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b02      	cmp	r3, #2
 800448c:	f200 80a1 	bhi.w	80045d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d056      	beq.n	800454a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800449c:	e099      	b.n	80045d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800449e:	4b88      	ldr	r3, [pc, #544]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02d      	beq.n	8004506 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044aa:	4b85      	ldr	r3, [pc, #532]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	08db      	lsrs	r3, r3, #3
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	4a83      	ldr	r2, [pc, #524]	; (80046c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80044b6:	fa22 f303 	lsr.w	r3, r2, r3
 80044ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	ee07 3a90 	vmov	s15, r3
 80044c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	ee07 3a90 	vmov	s15, r3
 80044cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044d4:	4b7a      	ldr	r3, [pc, #488]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044dc:	ee07 3a90 	vmov	s15, r3
 80044e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80044e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80044ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004500:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004504:	e087      	b.n	8004616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	ee07 3a90 	vmov	s15, r3
 800450c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004510:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004518:	4b69      	ldr	r3, [pc, #420]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004528:	ed97 6a03 	vldr	s12, [r7, #12]
 800452c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800453c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004548:	e065      	b.n	8004616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	ee07 3a90 	vmov	s15, r3
 8004550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004554:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80046d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800455c:	4b58      	ldr	r3, [pc, #352]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800455e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004564:	ee07 3a90 	vmov	s15, r3
 8004568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800456c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004570:	eddf 5a55 	vldr	s11, [pc, #340]	; 80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800457c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800458c:	e043      	b.n	8004616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	ee07 3a90 	vmov	s15, r3
 8004594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004598:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80046d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800459c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045a0:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045a8:	ee07 3a90 	vmov	s15, r3
 80045ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80045b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80045b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045d0:	e021      	b.n	8004616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80046cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80045e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045e4:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80045e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ec:	ee07 3a90 	vmov	s15, r3
 80045f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80045f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 80046c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80045fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800460c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004614:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004616:	4b2a      	ldr	r3, [pc, #168]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	0a5b      	lsrs	r3, r3, #9
 800461c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004620:	ee07 3a90 	vmov	s15, r3
 8004624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800462c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004630:	edd7 6a07 	vldr	s13, [r7, #28]
 8004634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463c:	ee17 2a90 	vmov	r2, s15
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004644:	4b1e      	ldr	r3, [pc, #120]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800465a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466a:	ee17 2a90 	vmov	r2, s15
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004672:	4b13      	ldr	r3, [pc, #76]	; (80046c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	0e1b      	lsrs	r3, r3, #24
 8004678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004698:	ee17 2a90 	vmov	r2, s15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80046a0:	e008      	b.n	80046b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3724      	adds	r7, #36	; 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	58024400 	.word	0x58024400
 80046c4:	03d09000 	.word	0x03d09000
 80046c8:	46000000 	.word	0x46000000
 80046cc:	4c742400 	.word	0x4c742400
 80046d0:	4a742400 	.word	0x4a742400
 80046d4:	4bbebc20 	.word	0x4bbebc20

080046d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046e6:	4b53      	ldr	r3, [pc, #332]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d101      	bne.n	80046f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e099      	b.n	800482a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80046f6:	4b4f      	ldr	r3, [pc, #316]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4e      	ldr	r2, [pc, #312]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80046fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004702:	f7fc fabd 	bl	8000c80 <HAL_GetTick>
 8004706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004708:	e008      	b.n	800471c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800470a:	f7fc fab9 	bl	8000c80 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e086      	b.n	800482a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800471c:	4b45      	ldr	r3, [pc, #276]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004728:	4b42      	ldr	r3, [pc, #264]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	031b      	lsls	r3, r3, #12
 8004736:	493f      	ldr	r1, [pc, #252]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	628b      	str	r3, [r1, #40]	; 0x28
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	3b01      	subs	r3, #1
 8004742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	3b01      	subs	r3, #1
 800474c:	025b      	lsls	r3, r3, #9
 800474e:	b29b      	uxth	r3, r3
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	3b01      	subs	r3, #1
 8004766:	061b      	lsls	r3, r3, #24
 8004768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800476c:	4931      	ldr	r1, [pc, #196]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800476e:	4313      	orrs	r3, r2
 8004770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004772:	4b30      	ldr	r3, [pc, #192]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	492d      	ldr	r1, [pc, #180]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004784:	4b2b      	ldr	r3, [pc, #172]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	f023 0220 	bic.w	r2, r3, #32
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	4928      	ldr	r1, [pc, #160]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004792:	4313      	orrs	r3, r2
 8004794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004796:	4b27      	ldr	r3, [pc, #156]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	4a26      	ldr	r2, [pc, #152]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800479c:	f023 0310 	bic.w	r3, r3, #16
 80047a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80047a2:	4b24      	ldr	r3, [pc, #144]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <RCCEx_PLL2_Config+0x160>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	69d2      	ldr	r2, [r2, #28]
 80047ae:	00d2      	lsls	r2, r2, #3
 80047b0:	4920      	ldr	r1, [pc, #128]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047b2:	4313      	orrs	r3, r2
 80047b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80047b6:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	4a1e      	ldr	r2, [pc, #120]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047bc:	f043 0310 	orr.w	r3, r3, #16
 80047c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80047c8:	4b1a      	ldr	r3, [pc, #104]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	4a19      	ldr	r2, [pc, #100]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047d4:	e00f      	b.n	80047f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d106      	bne.n	80047ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80047dc:	4b15      	ldr	r3, [pc, #84]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047e8:	e005      	b.n	80047f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ee:	4a11      	ldr	r2, [pc, #68]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80047f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80047f6:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 80047fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004802:	f7fc fa3d 	bl	8000c80 <HAL_GetTick>
 8004806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004808:	e008      	b.n	800481c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800480a:	f7fc fa39 	bl	8000c80 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d901      	bls.n	800481c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e006      	b.n	800482a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <RCCEx_PLL2_Config+0x15c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0f0      	beq.n	800480a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004828:	7bfb      	ldrb	r3, [r7, #15]
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	58024400 	.word	0x58024400
 8004838:	ffff0007 	.word	0xffff0007

0800483c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800484a:	4b53      	ldr	r3, [pc, #332]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d101      	bne.n	800485a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e099      	b.n	800498e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800485a:	4b4f      	ldr	r3, [pc, #316]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a4e      	ldr	r2, [pc, #312]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004866:	f7fc fa0b 	bl	8000c80 <HAL_GetTick>
 800486a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800486c:	e008      	b.n	8004880 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800486e:	f7fc fa07 	bl	8000c80 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e086      	b.n	800498e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004880:	4b45      	ldr	r3, [pc, #276]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800488c:	4b42      	ldr	r3, [pc, #264]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800488e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	051b      	lsls	r3, r3, #20
 800489a:	493f      	ldr	r1, [pc, #252]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800489c:	4313      	orrs	r3, r2
 800489e:	628b      	str	r3, [r1, #40]	; 0x28
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	025b      	lsls	r3, r3, #9
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	431a      	orrs	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	041b      	lsls	r3, r3, #16
 80048be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	3b01      	subs	r3, #1
 80048ca:	061b      	lsls	r3, r3, #24
 80048cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d0:	4931      	ldr	r1, [pc, #196]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	492d      	ldr	r1, [pc, #180]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80048e8:	4b2b      	ldr	r3, [pc, #172]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	4928      	ldr	r1, [pc, #160]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fe:	4a26      	ldr	r2, [pc, #152]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004906:	4b24      	ldr	r3, [pc, #144]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800490a:	4b24      	ldr	r3, [pc, #144]	; (800499c <RCCEx_PLL3_Config+0x160>)
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	69d2      	ldr	r2, [r2, #28]
 8004912:	00d2      	lsls	r2, r2, #3
 8004914:	4920      	ldr	r1, [pc, #128]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800491c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491e:	4a1e      	ldr	r2, [pc, #120]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d106      	bne.n	800493a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800492c:	4b1a      	ldr	r3, [pc, #104]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a19      	ldr	r2, [pc, #100]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004938:	e00f      	b.n	800495a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d106      	bne.n	800494e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004940:	4b15      	ldr	r3, [pc, #84]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a14      	ldr	r2, [pc, #80]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800494a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800494c:	e005      	b.n	800495a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800494e:	4b12      	ldr	r3, [pc, #72]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004952:	4a11      	ldr	r2, [pc, #68]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800495a:	4b0f      	ldr	r3, [pc, #60]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a0e      	ldr	r2, [pc, #56]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004966:	f7fc f98b 	bl	8000c80 <HAL_GetTick>
 800496a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800496c:	e008      	b.n	8004980 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800496e:	f7fc f987 	bl	8000c80 <HAL_GetTick>
 8004972:	4602      	mov	r2, r0
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	2b02      	cmp	r3, #2
 800497a:	d901      	bls.n	8004980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e006      	b.n	800498e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <RCCEx_PLL3_Config+0x15c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0f0      	beq.n	800496e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	ffff0007 	.word	0xffff0007

080049a0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	; 0x28
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e075      	b.n	8004a9e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fb fe95 	bl	80006f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2204      	movs	r2, #4
 80049ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 f868 	bl	8004aa8 <HAL_SD_InitCard>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e05d      	b.n	8004a9e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80049e2:	f107 0308 	add.w	r3, r7, #8
 80049e6:	4619      	mov	r1, r3
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fdaf 	bl	800554c <HAL_SD_GetCardStatus>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e052      	b.n	8004a9e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80049f8:	7e3b      	ldrb	r3, [r7, #24]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80049fe:	7e7b      	ldrb	r3, [r7, #25]
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d10a      	bne.n	8004a22 <HAL_SD_Init+0x82>
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d102      	bne.n	8004a18 <HAL_SD_Init+0x78>
 8004a12:	6a3b      	ldr	r3, [r7, #32]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d004      	beq.n	8004a22 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a1e:	659a      	str	r2, [r3, #88]	; 0x58
 8004a20:	e00b      	b.n	8004a3a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d104      	bne.n	8004a34 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a30:	659a      	str	r2, [r3, #88]	; 0x58
 8004a32:	e002      	b.n	8004a3a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fe6d 	bl	8005720 <HAL_SD_ConfigWideBusOperation>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e026      	b.n	8004a9e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004a50:	f7fc f916 	bl	8000c80 <HAL_GetTick>
 8004a54:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004a56:	e011      	b.n	8004a7c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004a58:	f7fc f912 	bl	8000c80 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d109      	bne.n	8004a7c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e010      	b.n	8004a9e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f000 ff61 	bl	8005944 <HAL_SD_GetCardState>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d1e7      	bne.n	8004a58 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3728      	adds	r7, #40	; 0x28
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b08d      	sub	sp, #52	; 0x34
 8004aac:	af02      	add	r7, sp, #8
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004ac0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	f7fe fd24 	bl	8003514 <HAL_RCCEx_GetPeriphCLKFreq>
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d109      	bne.n	8004ae8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ae2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e070      	b.n	8004bca <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	4a39      	ldr	r2, [pc, #228]	; (8004bd4 <HAL_SD_InitCard+0x12c>)
 8004aee:	fba2 2303 	umull	r2, r3, r2, r3
 8004af2:	091b      	lsrs	r3, r3, #4
 8004af4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681c      	ldr	r4, [r3, #0]
 8004afa:	466a      	mov	r2, sp
 8004afc:	f107 0318 	add.w	r3, r7, #24
 8004b00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b04:	e882 0003 	stmia.w	r2, {r0, r1}
 8004b08:	f107 030c 	add.w	r3, r7, #12
 8004b0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f001 fbaa 	bl	8006268 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fbed 	bl	80062f8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d007      	beq.n	8004b46 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004b36:	4a28      	ldr	r2, [pc, #160]	; (8004bd8 <HAL_SD_InitCard+0x130>)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc f8a9 	bl	8000c98 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 ffea 	bl	8005b20 <SD_PowerON>
 8004b4c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e02e      	b.n	8004bca <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 ff09 	bl	8005984 <SD_InitCard>
 8004b72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00b      	beq.n	8004b92 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	431a      	orrs	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e01b      	b.n	8004bca <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 fc42 	bl	8006424 <SDMMC_CmdBlockLength>
 8004ba0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00f      	beq.n	8004bc8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0b      	ldr	r2, [pc, #44]	; (8004bdc <HAL_SD_InitCard+0x134>)
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	372c      	adds	r7, #44	; 0x2c
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	014f8b59 	.word	0x014f8b59
 8004bd8:	00012110 	.word	0x00012110
 8004bdc:	1fe00fff 	.word	0x1fe00fff

08004be0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08c      	sub	sp, #48	; 0x30
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e08d      	b.n	8004d24 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f040 8086 	bne.w	8004d22 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	441a      	add	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d907      	bls.n	8004c3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e074      	b.n	8004d24 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	025a      	lsls	r2, r3, #9
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d002      	beq.n	8004c66 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8004c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c62:	025b      	lsls	r3, r3, #9
 8004c64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	025b      	lsls	r3, r3, #9
 8004c70:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004c72:	2390      	movs	r3, #144	; 0x90
 8004c74:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c76:	2302      	movs	r3, #2
 8004c78:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f107 0210 	add.w	r2, r7, #16
 8004c8a:	4611      	mov	r1, r2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fb9d 	bl	80063cc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ca0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d90a      	bls.n	8004cce <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2282      	movs	r2, #130	; 0x82
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fbf3 	bl	80064b0 <SDMMC_CmdReadMultiBlock>
 8004cca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ccc:	e009      	b.n	8004ce2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2281      	movs	r2, #129	; 0x81
 8004cd2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fbc5 	bl	800646a <SDMMC_CmdReadSingleBlock>
 8004ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d012      	beq.n	8004d0e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a0f      	ldr	r2, [pc, #60]	; (8004d2c <HAL_SD_ReadBlocks_DMA+0x14c>)
 8004cee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e00a      	b.n	8004d24 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004d1c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3730      	adds	r7, #48	; 0x30
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	1fe00fff 	.word	0x1fe00fff

08004d30 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08c      	sub	sp, #48	; 0x30
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	607a      	str	r2, [r7, #4]
 8004d3c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d107      	bne.n	8004d58 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e08d      	b.n	8004e74 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	f040 8086 	bne.w	8004e72 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d907      	bls.n	8004d8a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e074      	b.n	8004e74 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2200      	movs	r2, #0
 8004d98:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	025a      	lsls	r2, r3, #9
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d002      	beq.n	8004db6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	025b      	lsls	r3, r3, #9
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	025b      	lsls	r3, r3, #9
 8004dc0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004dc2:	2390      	movs	r3, #144	; 0x90
 8004dc4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f107 0210 	add.w	r2, r7, #16
 8004dda:	4611      	mov	r1, r2
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 faf5 	bl	80063cc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d90a      	bls.n	8004e1e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	22a0      	movs	r2, #160	; 0xa0
 8004e0c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fb91 	bl	800653c <SDMMC_CmdWriteMultiBlock>
 8004e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004e1c:	e009      	b.n	8004e32 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2290      	movs	r2, #144	; 0x90
 8004e22:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 fb63 	bl	80064f6 <SDMMC_CmdWriteSingleBlock>
 8004e30:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d012      	beq.n	8004e5e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e46:	431a      	orrs	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e00a      	b.n	8004e74 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3730      	adds	r7, #48	; 0x30
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	1fe00fff 	.word	0x1fe00fff

08004e80 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_SD_IRQHandler+0x2e>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 f926 	bl	80060f8 <SD_Read_IT>
 8004eac:	e19a      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 80ac 	beq.w	8005016 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_SD_IRQHandler+0x1b8>)
 8004ed4:	400b      	ands	r3, r1
 8004ed6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004ee6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68da      	ldr	r2, [r3, #12]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ef6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0308 	and.w	r3, r3, #8
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d038      	beq.n	8004f74 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d104      	bne.n	8004f16 <HAL_SD_IRQHandler+0x96>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d011      	beq.n	8004f3a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 fb32 	bl	8006584 <SDMMC_CmdStopTransfer>
 8004f20:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	431a      	orrs	r2, r3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f95b 	bl	80051f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3f      	ldr	r2, [pc, #252]	; (800503c <HAL_SD_IRQHandler+0x1bc>)
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f003 0301 	and.w	r3, r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d104      	bne.n	8004f64 <HAL_SD_IRQHandler+0xe4>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d003      	beq.n	8004f6c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f001 ffd7 	bl	8006f18 <HAL_SD_RxCpltCallback>
 8004f6a:	e13b      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 ffc9 	bl	8006f04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004f72:	e137      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8132 	beq.w	80051e4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2200      	movs	r2, #0
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2200      	movs	r2, #0
 8004f96:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <HAL_SD_IRQHandler+0x12c>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d011      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 fae7 	bl	8006584 <SDMMC_CmdStopTransfer>
 8004fb6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d008      	beq.n	8004fd0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f910 	bl	80051f0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <HAL_SD_IRQHandler+0x172>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f001 ff86 	bl	8006f04 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d105      	bne.n	800500e <HAL_SD_IRQHandler+0x18e>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 80eb 	beq.w	80051e4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 ff82 	bl	8006f18 <HAL_SD_RxCpltCallback>
}
 8005014:	e0e6      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00d      	beq.n	8005040 <HAL_SD_IRQHandler+0x1c0>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d008      	beq.n	8005040 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f001 f8a8 	bl	8006184 <SD_Write_IT>
 8005034:	e0d6      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
 8005036:	bf00      	nop
 8005038:	ffff3ec5 	.word	0xffff3ec5
 800503c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005046:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 809d 	beq.w	800518a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d005      	beq.n	800506a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	f043 0202 	orr.w	r2, r3, #2
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	f003 0308 	and.w	r3, r3, #8
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800507c:	f043 0208 	orr.w	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	f003 0320 	and.w	r3, r3, #32
 800508e:	2b00      	cmp	r3, #0
 8005090:	d005      	beq.n	800509e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	f043 0220 	orr.w	r2, r3, #32
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b0:	f043 0210 	orr.w	r2, r3, #16
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a4b      	ldr	r2, [pc, #300]	; (80051ec <HAL_SD_IRQHandler+0x36c>)
 80050be:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050de:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80050fe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4618      	mov	r0, r3
 8005106:	f001 fa3d 	bl	8006584 <SDMMC_CmdStopTransfer>
 800510a:	4602      	mov	r2, r0
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005124:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 f851 	bl	80051f0 <HAL_SD_ErrorCallback>
}
 800514e:	e049      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005156:	2b00      	cmp	r3, #0
 8005158:	d044      	beq.n	80051e4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515e:	2b00      	cmp	r3, #0
 8005160:	d040      	beq.n	80051e4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005170:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2200      	movs	r2, #0
 8005178:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f834 	bl	80051f0 <HAL_SD_ErrorCallback>
}
 8005188:	e02c      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d025      	beq.n	80051e4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051a0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	f003 0304 	and.w	r3, r3, #4
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10c      	bne.n	80051ca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0320 	and.w	r3, r3, #32
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 f84a 	bl	8006254 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80051c0:	e010      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f001 f832 	bl	800622c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80051c8:	e00c      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 f833 	bl	8006240 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80051da:	e003      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f001 f81b 	bl	8006218 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80051e2:	e7ff      	b.n	80051e4 <HAL_SD_IRQHandler+0x364>
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	18000f3a 	.word	0x18000f3a

080051f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	0f9b      	lsrs	r3, r3, #30
 8005214:	b2da      	uxtb	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800521e:	0e9b      	lsrs	r3, r3, #26
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	b2da      	uxtb	r2, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0303 	and.w	r3, r3, #3
 8005238:	b2da      	uxtb	r2, r3
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005242:	0c1b      	lsrs	r3, r3, #16
 8005244:	b2da      	uxtb	r2, r3
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	b2da      	uxtb	r2, r3
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	b2da      	uxtb	r2, r3
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005264:	0d1b      	lsrs	r3, r3, #20
 8005266:	b29a      	uxth	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005270:	0c1b      	lsrs	r3, r3, #16
 8005272:	b2db      	uxtb	r3, r3
 8005274:	f003 030f 	and.w	r3, r3, #15
 8005278:	b2da      	uxtb	r2, r3
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005282:	0bdb      	lsrs	r3, r3, #15
 8005284:	b2db      	uxtb	r3, r3
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005294:	0b9b      	lsrs	r3, r3, #14
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	b2da      	uxtb	r2, r3
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	b2da      	uxtb	r2, r3
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b8:	0b1b      	lsrs	r3, r3, #12
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2200      	movs	r2, #0
 80052ca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d163      	bne.n	800539c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d8:	009a      	lsls	r2, r3, #2
 80052da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80052de:	4013      	ands	r3, r2
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80052e4:	0f92      	lsrs	r2, r2, #30
 80052e6:	431a      	orrs	r2, r3
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f0:	0edb      	lsrs	r3, r3, #27
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005302:	0e1b      	lsrs	r3, r3, #24
 8005304:	b2db      	uxtb	r3, r3
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	b2da      	uxtb	r2, r3
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005314:	0d5b      	lsrs	r3, r3, #21
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	b2da      	uxtb	r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005326:	0c9b      	lsrs	r3, r3, #18
 8005328:	b2db      	uxtb	r3, r3
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	b2da      	uxtb	r2, r3
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005338:	0bdb      	lsrs	r3, r3, #15
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	b2da      	uxtb	r2, r3
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	7e1b      	ldrb	r3, [r3, #24]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	3302      	adds	r3, #2
 800535c:	2201      	movs	r2, #1
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005366:	fb03 f202 	mul.w	r2, r3, r2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	7a1b      	ldrb	r3, [r3, #8]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	2201      	movs	r2, #1
 800537a:	409a      	lsls	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005388:	0a52      	lsrs	r2, r2, #9
 800538a:	fb03 f202 	mul.w	r2, r3, r2
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
 800539a:	e031      	b.n	8005400 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d11d      	bne.n	80053e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a8:	041b      	lsls	r3, r3, #16
 80053aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	431a      	orrs	r2, r3
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	3301      	adds	r3, #1
 80053c0:	029a      	lsls	r2, r3, #10
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	655a      	str	r2, [r3, #84]	; 0x54
 80053de:	e00f      	b.n	8005400 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a58      	ldr	r2, [pc, #352]	; (8005548 <HAL_SD_GetCardCSD+0x344>)
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e09d      	b.n	800553c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005404:	0b9b      	lsrs	r3, r3, #14
 8005406:	b2db      	uxtb	r3, r3
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	b2da      	uxtb	r2, r3
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005416:	09db      	lsrs	r3, r3, #7
 8005418:	b2db      	uxtb	r3, r3
 800541a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800541e:	b2da      	uxtb	r2, r3
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005428:	b2db      	uxtb	r3, r3
 800542a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800542e:	b2da      	uxtb	r2, r3
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005438:	0fdb      	lsrs	r3, r3, #31
 800543a:	b2da      	uxtb	r2, r3
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005444:	0f5b      	lsrs	r3, r3, #29
 8005446:	b2db      	uxtb	r3, r3
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	b2da      	uxtb	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005456:	0e9b      	lsrs	r3, r3, #26
 8005458:	b2db      	uxtb	r3, r3
 800545a:	f003 0307 	and.w	r3, r3, #7
 800545e:	b2da      	uxtb	r2, r3
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005468:	0d9b      	lsrs	r3, r3, #22
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f003 030f 	and.w	r3, r3, #15
 8005470:	b2da      	uxtb	r2, r3
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800547a:	0d5b      	lsrs	r3, r3, #21
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005496:	0c1b      	lsrs	r3, r3, #16
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054aa:	0bdb      	lsrs	r3, r3, #15
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054be:	0b9b      	lsrs	r3, r3, #14
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054d2:	0b5b      	lsrs	r3, r3, #13
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054e6:	0b1b      	lsrs	r3, r3, #12
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	b2da      	uxtb	r2, r3
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054fa:	0a9b      	lsrs	r3, r3, #10
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	b2da      	uxtb	r2, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800550e:	0a1b      	lsrs	r3, r3, #8
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0303 	and.w	r3, r3, #3
 8005516:	b2da      	uxtb	r2, r3
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005522:	085b      	lsrs	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552a:	b2da      	uxtb	r2, r3
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	1fe00fff 	.word	0x1fe00fff

0800554c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b094      	sub	sp, #80	; 0x50
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b03      	cmp	r3, #3
 8005566:	d101      	bne.n	800556c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0a7      	b.n	80056bc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800556c:	f107 0308 	add.w	r3, r7, #8
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fb62 	bl	8005c3c <SD_SendSDStatus>
 8005578:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800557a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a4f      	ldr	r2, [pc, #316]	; (80056c4 <HAL_SD_GetCardStatus+0x178>)
 8005586:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800558c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800558e:	431a      	orrs	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80055a2:	e070      	b.n	8005686 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	b2da      	uxtb	r2, r3
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	0a1b      	lsrs	r3, r3, #8
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	0e1b      	lsrs	r3, r3, #24
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	4313      	orrs	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	061a      	lsls	r2, r3, #24
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80055ea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80055f4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	b2da      	uxtb	r2, r3
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	0a1b      	lsrs	r3, r3, #8
 800560c:	b2da      	uxtb	r2, r3
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	0d1b      	lsrs	r3, r3, #20
 8005616:	b2db      	uxtb	r3, r3
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	b2da      	uxtb	r2, r3
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	0c1b      	lsrs	r3, r3, #16
 8005626:	b29b      	uxth	r3, r3
 8005628:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800562c:	b29a      	uxth	r2, r3
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	b29b      	uxth	r3, r3
 8005632:	b2db      	uxtb	r3, r3
 8005634:	b29b      	uxth	r3, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	b29a      	uxth	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	0a9b      	lsrs	r3, r3, #10
 8005642:	b2db      	uxtb	r3, r3
 8005644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005648:	b2da      	uxtb	r2, r3
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	0a1b      	lsrs	r3, r3, #8
 8005652:	b2db      	uxtb	r3, r3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	b2da      	uxtb	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	091b      	lsrs	r3, r3, #4
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	b2da      	uxtb	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	b2da      	uxtb	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	0e1b      	lsrs	r3, r3, #24
 8005680:	b2da      	uxtb	r2, r3
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fec8 	bl	8006424 <SDMMC_CmdBlockLength>
 8005694:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8005696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a08      	ldr	r2, [pc, #32]	; (80056c4 <HAL_SD_GetCardStatus+0x178>)
 80056a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80056b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3750      	adds	r7, #80	; 0x50
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	1fe00fff 	.word	0x1fe00fff

080056c8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b08d      	sub	sp, #52	; 0x34
 8005724:	af02      	add	r7, sp, #8
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2203      	movs	r2, #3
 8005734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	2b03      	cmp	r3, #3
 800573e:	d02e      	beq.n	800579e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005746:	d106      	bne.n	8005756 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	635a      	str	r2, [r3, #52]	; 0x34
 8005754:	e029      	b.n	80057aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800575c:	d10a      	bne.n	8005774 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fb64 	bl	8005e2c <SD_WideBus_Enable>
 8005764:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	635a      	str	r2, [r3, #52]	; 0x34
 8005772:	e01a      	b.n	80057aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fba1 	bl	8005ec2 <SD_WideBus_Disable>
 8005780:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	431a      	orrs	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	635a      	str	r2, [r3, #52]	; 0x34
 800578e:	e00c      	b.n	80057aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	635a      	str	r2, [r3, #52]	; 0x34
 800579c:	e005      	b.n	80057aa <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d007      	beq.n	80057c2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a5f      	ldr	r2, [pc, #380]	; (8005934 <HAL_SD_ConfigWideBusOperation+0x214>)
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80057c0:	e096      	b.n	80058f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80057c2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80057c6:	f04f 0100 	mov.w	r1, #0
 80057ca:	f7fd fea3 	bl	8003514 <HAL_RCCEx_GetPeriphCLKFreq>
 80057ce:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 8083 	beq.w	80058de <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4950      	ldr	r1, [pc, #320]	; (8005938 <HAL_SD_ConfigWideBusOperation+0x218>)
 80057f6:	fba1 1303 	umull	r1, r3, r1, r3
 80057fa:	0e1b      	lsrs	r3, r3, #24
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d303      	bcc.n	8005808 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e05a      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005810:	d103      	bne.n	800581a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	e051      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005822:	d126      	bne.n	8005872 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10e      	bne.n	800584a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4a43      	ldr	r2, [pc, #268]	; (800593c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d906      	bls.n	8005842 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4a40      	ldr	r2, [pc, #256]	; (8005938 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005838:	fba2 2303 	umull	r2, r3, r2, r3
 800583c:	0e5b      	lsrs	r3, r3, #25
 800583e:	61bb      	str	r3, [r7, #24]
 8005840:	e03d      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e039      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	fbb2 f3f3 	udiv	r3, r2, r3
 8005856:	4a39      	ldr	r2, [pc, #228]	; (800593c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d906      	bls.n	800586a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4a36      	ldr	r2, [pc, #216]	; (8005938 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	0e5b      	lsrs	r3, r3, #25
 8005866:	61bb      	str	r3, [r7, #24]
 8005868:	e029      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	61bb      	str	r3, [r7, #24]
 8005870:	e025      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10e      	bne.n	8005898 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4a30      	ldr	r2, [pc, #192]	; (8005940 <HAL_SD_ConfigWideBusOperation+0x220>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d906      	bls.n	8005890 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4a2c      	ldr	r2, [pc, #176]	; (8005938 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0e1b      	lsrs	r3, r3, #24
 800588c:	61bb      	str	r3, [r7, #24]
 800588e:	e016      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	61bb      	str	r3, [r7, #24]
 8005896:	e012      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	695b      	ldr	r3, [r3, #20]
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	4a26      	ldr	r2, [pc, #152]	; (8005940 <HAL_SD_ConfigWideBusOperation+0x220>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d906      	bls.n	80058b8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4a22      	ldr	r2, [pc, #136]	; (8005938 <HAL_SD_ConfigWideBusOperation+0x218>)
 80058ae:	fba2 2303 	umull	r2, r3, r2, r3
 80058b2:	0e1b      	lsrs	r3, r3, #24
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e002      	b.n	80058be <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681c      	ldr	r4, [r3, #0]
 80058c2:	466a      	mov	r2, sp
 80058c4:	f107 0314 	add.w	r3, r7, #20
 80058c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80058cc:	e882 0003 	stmia.w	r2, {r0, r1}
 80058d0:	f107 0308 	add.w	r3, r7, #8
 80058d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058d6:	4620      	mov	r0, r4
 80058d8:	f000 fcc6 	bl	8006268 <SDMMC_Init>
 80058dc:	e008      	b.n	80058f0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fd93 	bl	8006424 <SDMMC_CmdBlockLength>
 80058fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005900:	6a3b      	ldr	r3, [r7, #32]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00c      	beq.n	8005920 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a0a      	ldr	r2, [pc, #40]	; (8005934 <HAL_SD_ConfigWideBusOperation+0x214>)
 800590c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	431a      	orrs	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800592c:	4618      	mov	r0, r3
 800592e:	372c      	adds	r7, #44	; 0x2c
 8005930:	46bd      	mov	sp, r7
 8005932:	bd90      	pop	{r4, r7, pc}
 8005934:	1fe00fff 	.word	0x1fe00fff
 8005938:	55e63b89 	.word	0x55e63b89
 800593c:	02faf080 	.word	0x02faf080
 8005940:	017d7840 	.word	0x017d7840

08005944 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	4619      	mov	r1, r3
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fa40 	bl	8005ddc <SD_SendStatus>
 800595c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	431a      	orrs	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	0a5b      	lsrs	r3, r3, #9
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800597a:	693b      	ldr	r3, [r7, #16]
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b090      	sub	sp, #64	; 0x40
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8005990:	f7fb f976 	bl	8000c80 <HAL_GetTick>
 8005994:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f000 fcbd 	bl	800631a <SDMMC_GetPowerState>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d102      	bne.n	80059ac <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059aa:	e0b5      	b.n	8005b18 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	d02e      	beq.n	8005a12 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 ff08 	bl	80067ce <SDMMC_CmdSendCID>
 80059be:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <SD_InitCard+0x46>
    {
      return errorstate;
 80059c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c8:	e0a6      	b.n	8005b18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2100      	movs	r1, #0
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fce8 	bl	80063a6 <SDMMC_GetResponse>
 80059d6:	4602      	mov	r2, r0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2104      	movs	r1, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f000 fcdf 	bl	80063a6 <SDMMC_GetResponse>
 80059e8:	4602      	mov	r2, r0
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2108      	movs	r1, #8
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fcd6 	bl	80063a6 <SDMMC_GetResponse>
 80059fa:	4602      	mov	r2, r0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	210c      	movs	r1, #12
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 fccd 	bl	80063a6 <SDMMC_GetResponse>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d01d      	beq.n	8005a56 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8005a1a:	e019      	b.n	8005a50 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f107 020a 	add.w	r2, r7, #10
 8005a24:	4611      	mov	r1, r2
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 ff10 	bl	800684c <SDMMC_CmdSetRelAdd>
 8005a2c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <SD_InitCard+0xb4>
      {
        return errorstate;
 8005a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a36:	e06f      	b.n	8005b18 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8005a38:	f7fb f922 	bl	8000c80 <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	f241 3287 	movw	r2, #4999	; 0x1387
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d902      	bls.n	8005a50 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8005a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a4e:	e063      	b.n	8005b18 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8005a50:	897b      	ldrh	r3, [r7, #10]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0e2      	beq.n	8005a1c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d036      	beq.n	8005acc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a5e:	897b      	ldrh	r3, [r7, #10]
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	041b      	lsls	r3, r3, #16
 8005a70:	4619      	mov	r1, r3
 8005a72:	4610      	mov	r0, r2
 8005a74:	f000 feca 	bl	800680c <SDMMC_CmdSendCSD>
 8005a78:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8005a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <SD_InitCard+0x100>
    {
      return errorstate;
 8005a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a82:	e049      	b.n	8005b18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2100      	movs	r1, #0
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 fc8b 	bl	80063a6 <SDMMC_GetResponse>
 8005a90:	4602      	mov	r2, r0
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fc82 	bl	80063a6 <SDMMC_GetResponse>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2108      	movs	r1, #8
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f000 fc79 	bl	80063a6 <SDMMC_GetResponse>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	210c      	movs	r1, #12
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fc70 	bl	80063a6 <SDMMC_GetResponse>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2104      	movs	r1, #4
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fc67 	bl	80063a6 <SDMMC_GetResponse>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	0d1a      	lsrs	r2, r3, #20
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ae0:	f107 030c 	add.w	r3, r7, #12
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff fb8c 	bl	8005204 <HAL_SD_GetCardCSD>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005af2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005af6:	e00f      	b.n	8005b18 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	041b      	lsls	r3, r3, #16
 8005b02:	4619      	mov	r1, r3
 8005b04:	4610      	mov	r0, r2
 8005b06:	f000 fd79 	bl	80065fc <SDMMC_CmdSelDesel>
 8005b0a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <SD_InitCard+0x192>
  {
    return errorstate;
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	e000      	b.n	8005b18 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3740      	adds	r7, #64	; 0x40
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fd82 	bl	8006642 <SDMMC_CmdGoIdleState>
 8005b3e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	e072      	b.n	8005c30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fd95 	bl	800667e <SDMMC_CmdOperCond>
 8005b54:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b5c:	d10d      	bne.n	8005b7a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f000 fd6a 	bl	8006642 <SDMMC_CmdGoIdleState>
 8005b6e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <SD_PowerON+0x60>
    {
      return errorstate;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	e05a      	b.n	8005c30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d137      	bne.n	8005bf8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fd95 	bl	80066be <SDMMC_CmdAppCommand>
 8005b94:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02d      	beq.n	8005bf8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005b9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ba0:	e046      	b.n	8005c30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fd88 	bl	80066be <SDMMC_CmdAppCommand>
 8005bae:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <SD_PowerON+0x9a>
    {
      return errorstate;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	e03a      	b.n	8005c30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	491e      	ldr	r1, [pc, #120]	; (8005c38 <SD_PowerON+0x118>)
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fd9f 	bl	8006704 <SDMMC_CmdAppOperCommand>
 8005bc6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bd2:	e02d      	b.n	8005c30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2100      	movs	r1, #0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fbe3 	bl	80063a6 <SDMMC_GetResponse>
 8005be0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	0fdb      	lsrs	r3, r3, #31
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <SD_PowerON+0xce>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <SD_PowerON+0xd0>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]

    count++;
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d802      	bhi.n	8005c08 <SD_PowerON+0xe8>
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0cc      	beq.n	8005ba2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d902      	bls.n	8005c18 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c16:	e00b      	b.n	8005c30 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	c1100000 	.word	0xc1100000

08005c3c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08c      	sub	sp, #48	; 0x30
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c46:	f7fb f81b 	bl	8000c80 <HAL_GetTick>
 8005c4a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2100      	movs	r1, #0
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fba5 	bl	80063a6 <SDMMC_GetResponse>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c66:	d102      	bne.n	8005c6e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c6c:	e0b0      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	2140      	movs	r1, #64	; 0x40
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 fbd5 	bl	8006424 <SDMMC_CmdBlockLength>
 8005c7a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	e0a0      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	041b      	lsls	r3, r3, #16
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f000 fd0f 	bl	80066be <SDMMC_CmdAppCommand>
 8005ca0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	e08d      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8005cba:	2340      	movs	r3, #64	; 0x40
 8005cbc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8005cbe:	2360      	movs	r3, #96	; 0x60
 8005cc0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f107 0208 	add.w	r2, r7, #8
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fb77 	bl	80063cc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fdf7 	bl	80068d6 <SDMMC_CmdStatusRegister>
 8005ce8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d02b      	beq.n	8005d48 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	e069      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d013      	beq.n	8005d32 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0e:	e00d      	b.n	8005d2c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 fad1 	bl	80062bc <SDMMC_ReadFIFO>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1e:	601a      	str	r2, [r3, #0]
        pData++;
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	3304      	adds	r3, #4
 8005d24:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	3301      	adds	r3, #1
 8005d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b07      	cmp	r3, #7
 8005d30:	d9ee      	bls.n	8005d10 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d32:	f7fa ffa5 	bl	8000c80 <HAL_GetTick>
 8005d36:	4602      	mov	r2, r0
 8005d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d40:	d102      	bne.n	8005d48 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d46:	e043      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0d2      	beq.n	8005cfc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	f003 0308 	and.w	r3, r3, #8
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d64:	2308      	movs	r3, #8
 8005d66:	e033      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	f003 0302 	and.w	r3, r3, #2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d76:	2302      	movs	r3, #2
 8005d78:	e02a      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	f003 0320 	and.w	r3, r3, #32
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d017      	beq.n	8005db8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005d88:	2320      	movs	r3, #32
 8005d8a:	e021      	b.n	8005dd0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fa93 	bl	80062bc <SDMMC_ReadFIFO>
 8005d96:	4602      	mov	r2, r0
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	601a      	str	r2, [r3, #0]
    pData++;
 8005d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9e:	3304      	adds	r3, #4
 8005da0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005da2:	f7fa ff6d 	bl	8000c80 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db0:	d102      	bne.n	8005db8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005db2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005db6:	e00b      	b.n	8005dd0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e2      	bne.n	8005d8c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a03      	ldr	r2, [pc, #12]	; (8005dd8 <SD_SendSDStatus+0x19c>)
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3730      	adds	r7, #48	; 0x30
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	18000f3a 	.word	0x18000f3a

08005ddc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d102      	bne.n	8005df2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005dec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005df0:	e018      	b.n	8005e24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4610      	mov	r0, r2
 8005e00:	f000 fd46 	bl	8006890 <SDMMC_CmdSendStatus>
 8005e04:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d001      	beq.n	8005e10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	e009      	b.n	8005e24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2100      	movs	r1, #0
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 fac5 	bl	80063a6 <SDMMC_GetResponse>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3710      	adds	r7, #16
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b086      	sub	sp, #24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 faaf 	bl	80063a6 <SDMMC_GetResponse>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e52:	d102      	bne.n	8005e5a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005e54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e58:	e02f      	b.n	8005eba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005e5a:	f107 030c 	add.w	r3, r7, #12
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f879 	bl	8005f58 <SD_FindSCR>
 8005e66:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	e023      	b.n	8005eba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01c      	beq.n	8005eb6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	4619      	mov	r1, r3
 8005e88:	4610      	mov	r0, r2
 8005e8a:	f000 fc18 	bl	80066be <SDMMC_CmdAppCommand>
 8005e8e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	e00f      	b.n	8005eba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fc4f 	bl	8006744 <SDMMC_CmdBusWidth>
 8005ea6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	e003      	b.n	8005eba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e001      	b.n	8005eba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005eb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b086      	sub	sp, #24
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	2300      	movs	r3, #0
 8005ed0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f000 fa64 	bl	80063a6 <SDMMC_GetResponse>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ee8:	d102      	bne.n	8005ef0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005eee:	e02f      	b.n	8005f50 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005ef0:	f107 030c 	add.w	r3, r7, #12
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f82e 	bl	8005f58 <SD_FindSCR>
 8005efc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d001      	beq.n	8005f08 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	e023      	b.n	8005f50 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01c      	beq.n	8005f4c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1a:	041b      	lsls	r3, r3, #16
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 fbcd 	bl	80066be <SDMMC_CmdAppCommand>
 8005f24:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d001      	beq.n	8005f30 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	e00f      	b.n	8005f50 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2100      	movs	r1, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fc04 	bl	8006744 <SDMMC_CmdBusWidth>
 8005f3c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	e003      	b.n	8005f50 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e001      	b.n	8005f50 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005f4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005f62:	f7fa fe8d 	bl	8000c80 <HAL_GetTick>
 8005f66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2108      	movs	r1, #8
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fa50 	bl	8006424 <SDMMC_CmdBlockLength>
 8005f84:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8e:	e0ad      	b.n	80060ec <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f98:	041b      	lsls	r3, r3, #16
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 fb8e 	bl	80066be <SDMMC_CmdAppCommand>
 8005fa2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <SD_FindSCR+0x56>
  {
    return errorstate;
 8005faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fac:	e09e      	b.n	80060ec <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005fae:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005fb8:	2330      	movs	r3, #48	; 0x30
 8005fba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f107 0210 	add.w	r2, r7, #16
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f000 f9fa 	bl	80063cc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 fbd4 	bl	800678a <SDMMC_CmdSendSCR>
 8005fe2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d027      	beq.n	800603a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	e07e      	b.n	80060ec <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d113      	bne.n	8006024 <SD_FindSCR+0xcc>
 8005ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d110      	bne.n	8006024 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 f958 	bl	80062bc <SDMMC_ReadFIFO>
 800600c:	4603      	mov	r3, r0
 800600e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f000 f951 	bl	80062bc <SDMMC_ReadFIFO>
 800601a:	4603      	mov	r3, r0
 800601c:	60fb      	str	r3, [r7, #12]
      index++;
 800601e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006020:	3301      	adds	r3, #1
 8006022:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006024:	f7fa fe2c 	bl	8000c80 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006032:	d102      	bne.n	800603a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006038:	e058      	b.n	80060ec <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006040:	f240 532a 	movw	r3, #1322	; 0x52a
 8006044:	4013      	ands	r3, r2
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0d1      	beq.n	8005fee <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b00      	cmp	r3, #0
 8006056:	d005      	beq.n	8006064 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2208      	movs	r2, #8
 800605e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006060:	2308      	movs	r3, #8
 8006062:	e043      	b.n	80060ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d005      	beq.n	800607e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2202      	movs	r2, #2
 8006078:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800607a:	2302      	movs	r3, #2
 800607c:	e036      	b.n	80060ec <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d005      	beq.n	8006098 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2220      	movs	r2, #32
 8006092:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006094:	2320      	movs	r3, #32
 8006096:	e029      	b.n	80060ec <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <SD_FindSCR+0x19c>)
 800609e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	061a      	lsls	r2, r3, #24
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060ac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	0a1b      	lsrs	r3, r3, #8
 80060b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80060b6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	0e1b      	lsrs	r3, r3, #24
 80060bc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	601a      	str	r2, [r3, #0]
    scr++;
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	3304      	adds	r3, #4
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	061a      	lsls	r2, r3, #24
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060d4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	0a1b      	lsrs	r3, r3, #8
 80060da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80060de:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	0e1b      	lsrs	r3, r3, #24
 80060e4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80060e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3738      	adds	r7, #56	; 0x38
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	18000f3a 	.word	0x18000f3a

080060f8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610a:	2b1f      	cmp	r3, #31
 800610c:	d936      	bls.n	800617c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e027      	b.n	8006164 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4618      	mov	r0, r3
 800611a:	f000 f8cf 	bl	80062bc <SDMMC_ReadFIFO>
 800611e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	b2da      	uxtb	r2, r3
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	3301      	adds	r3, #1
 800612c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	b2da      	uxtb	r2, r3
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	3301      	adds	r3, #1
 800613c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	0c1b      	lsrs	r3, r3, #16
 8006142:	b2da      	uxtb	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	3301      	adds	r3, #1
 800614c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	b2da      	uxtb	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	3301      	adds	r3, #1
 800615c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	3301      	adds	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b07      	cmp	r3, #7
 8006168:	d9d4      	bls.n	8006114 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	f1a3 0220 	sub.w	r2, r3, #32
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800617c:	bf00      	nop
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	2b1f      	cmp	r3, #31
 8006198:	d93a      	bls.n	8006210 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800619a:	2300      	movs	r3, #0
 800619c:	617b      	str	r3, [r7, #20]
 800619e:	e02b      	b.n	80061f8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	021a      	lsls	r2, r3, #8
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	3301      	adds	r3, #1
 80061bc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	041a      	lsls	r2, r3, #16
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3301      	adds	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	061a      	lsls	r2, r3, #24
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
      tmp++;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	3301      	adds	r3, #1
 80061e0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f107 020c 	add.w	r2, r7, #12
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f000 f872 	bl	80062d6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	3301      	adds	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	2b07      	cmp	r3, #7
 80061fc:	d9d0      	bls.n	80061a0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f1a3 0220 	sub.w	r2, r3, #32
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	621a      	str	r2, [r3, #32]
  }
}
 8006210:	bf00      	nop
 8006212:	3718      	adds	r7, #24
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8006268:	b084      	sub	sp, #16
 800626a:	b480      	push	{r7}
 800626c:	b085      	sub	sp, #20
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	f107 001c 	add.w	r0, r7, #28
 8006276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800627e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8006280:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8006282:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8006286:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8006288:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800628a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800628e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4b07      	ldr	r3, [pc, #28]	; (80062b8 <SDMMC_Init+0x50>)
 800629c:	4013      	ands	r3, r2
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	b004      	add	sp, #16
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	ffc02c00 	.word	0xffc02c00

080062bc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f043 0203 	orr.w	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0303 	and.w	r3, r3, #3
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006356:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800635c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006362:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	4b06      	ldr	r3, [pc, #24]	; (8006388 <SDMMC_SendCommand+0x50>)
 8006370:	4013      	ands	r3, r2
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3714      	adds	r7, #20
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr
 8006388:	fffee0c0 	.word	0xfffee0c0

0800638c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	b2db      	uxtb	r3, r3
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3314      	adds	r3, #20
 80063b4:	461a      	mov	r2, r3
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	4413      	add	r3, r2
 80063ba:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80063f2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80063f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80063fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006416:	2300      	movs	r3, #0

}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006432:	2310      	movs	r3, #16
 8006434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800643a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff ff73 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006452:	f241 3288 	movw	r2, #5000	; 0x1388
 8006456:	2110      	movs	r1, #16
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fa5f 	bl	800691c <SDMMC_GetCmdResp1>
 800645e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006460:	69fb      	ldr	r3, [r7, #28]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b088      	sub	sp, #32
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
 8006472:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006478:	2311      	movs	r3, #17
 800647a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800647c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006482:	2300      	movs	r3, #0
 8006484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800648a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800648c:	f107 0308 	add.w	r3, r7, #8
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff ff50 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006498:	f241 3288 	movw	r2, #5000	; 0x1388
 800649c:	2111      	movs	r1, #17
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fa3c 	bl	800691c <SDMMC_GetCmdResp1>
 80064a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064a6:	69fb      	ldr	r3, [r7, #28]
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80064be:	2312      	movs	r3, #18
 80064c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064c8:	2300      	movs	r3, #0
 80064ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064d0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064d2:	f107 0308 	add.w	r3, r7, #8
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f7ff ff2d 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80064de:	f241 3288 	movw	r2, #5000	; 0x1388
 80064e2:	2112      	movs	r1, #18
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fa19 	bl	800691c <SDMMC_GetCmdResp1>
 80064ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064ec:	69fb      	ldr	r3, [r7, #28]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3720      	adds	r7, #32
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b088      	sub	sp, #32
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006504:	2318      	movs	r3, #24
 8006506:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006508:	f44f 7380 	mov.w	r3, #256	; 0x100
 800650c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006516:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006518:	f107 0308 	add.w	r3, r7, #8
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff ff0a 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006524:	f241 3288 	movw	r2, #5000	; 0x1388
 8006528:	2118      	movs	r1, #24
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9f6 	bl	800691c <SDMMC_GetCmdResp1>
 8006530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006532:	69fb      	ldr	r3, [r7, #28]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3720      	adds	r7, #32
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b088      	sub	sp, #32
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800654a:	2319      	movs	r3, #25
 800654c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800654e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006554:	2300      	movs	r3, #0
 8006556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800655c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800655e:	f107 0308 	add.w	r3, r7, #8
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7ff fee7 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	2119      	movs	r1, #25
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f9d3 	bl	800691c <SDMMC_GetCmdResp1>
 8006576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006578:	69fb      	ldr	r3, [r7, #28]
}
 800657a:	4618      	mov	r0, r3
 800657c:	3720      	adds	r7, #32
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b088      	sub	sp, #32
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006590:	230c      	movs	r3, #12
 8006592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800659e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065a2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065bc:	f107 0308 	add.w	r3, r7, #8
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff feb8 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80065c8:	4a0b      	ldr	r2, [pc, #44]	; (80065f8 <SDMMC_CmdStopTransfer+0x74>)
 80065ca:	210c      	movs	r1, #12
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 f9a5 	bl	800691c <SDMMC_GetCmdResp1>
 80065d2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065e6:	d101      	bne.n	80065ec <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80065e8:	2300      	movs	r3, #0
 80065ea:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80065ec:	69fb      	ldr	r3, [r7, #28]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3720      	adds	r7, #32
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	05f5e100 	.word	0x05f5e100

080065fc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800660a:	2307      	movs	r3, #7
 800660c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800660e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006612:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800661c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800661e:	f107 0308 	add.w	r3, r7, #8
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7ff fe87 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800662a:	f241 3288 	movw	r2, #5000	; 0x1388
 800662e:	2107      	movs	r1, #7
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 f973 	bl	800691c <SDMMC_GetCmdResp1>
 8006636:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006638:	69fb      	ldr	r3, [r7, #28]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b088      	sub	sp, #32
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006652:	2300      	movs	r3, #0
 8006654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800665a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800665e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006660:	f107 0308 	add.w	r3, r7, #8
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff fe66 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 fb97 	bl	8006da0 <SDMMC_GetCmdError>
 8006672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006674:	69fb      	ldr	r3, [r7, #28]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3720      	adds	r7, #32
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b088      	sub	sp, #32
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006686:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800668a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800668c:	2308      	movs	r3, #8
 800668e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006696:	2300      	movs	r3, #0
 8006698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800669a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800669e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066a0:	f107 0308 	add.w	r3, r7, #8
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f7ff fe46 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fb29 	bl	8006d04 <SDMMC_GetCmdResp7>
 80066b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066b4:	69fb      	ldr	r3, [r7, #28]
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3720      	adds	r7, #32
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80066be:	b580      	push	{r7, lr}
 80066c0:	b088      	sub	sp, #32
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80066cc:	2337      	movs	r3, #55	; 0x37
 80066ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80066d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80066d6:	2300      	movs	r3, #0
 80066d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80066da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80066e0:	f107 0308 	add.w	r3, r7, #8
 80066e4:	4619      	mov	r1, r3
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7ff fe26 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80066ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f0:	2137      	movs	r1, #55	; 0x37
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f912 	bl	800691c <SDMMC_GetCmdResp1>
 80066f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066fa:	69fb      	ldr	r3, [r7, #28]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3720      	adds	r7, #32
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b088      	sub	sp, #32
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006712:	2329      	movs	r3, #41	; 0x29
 8006714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800671a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006726:	f107 0308 	add.w	r3, r7, #8
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7ff fe03 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fa2e 	bl	8006b94 <SDMMC_GetCmdResp3>
 8006738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800673a:	69fb      	ldr	r3, [r7, #28]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006752:	2306      	movs	r3, #6
 8006754:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800675a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800675c:	2300      	movs	r3, #0
 800675e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006764:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006766:	f107 0308 	add.w	r3, r7, #8
 800676a:	4619      	mov	r1, r3
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7ff fde3 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006772:	f241 3288 	movw	r2, #5000	; 0x1388
 8006776:	2106      	movs	r1, #6
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8cf 	bl	800691c <SDMMC_GetCmdResp1>
 800677e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006780:	69fb      	ldr	r3, [r7, #28]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b088      	sub	sp, #32
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006796:	2333      	movs	r3, #51	; 0x33
 8006798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800679a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800679e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fdc1 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	2133      	movs	r1, #51	; 0x33
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8ad 	bl	800691c <SDMMC_GetCmdResp1>
 80067c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067c4:	69fb      	ldr	r3, [r7, #28]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b088      	sub	sp, #32
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80067da:	2302      	movs	r3, #2
 80067dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80067de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80067e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80067e4:	2300      	movs	r3, #0
 80067e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80067e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff fd9f 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f980 	bl	8006b00 <SDMMC_GetCmdResp2>
 8006800:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006802:	69fb      	ldr	r3, [r7, #28]
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800681a:	2309      	movs	r3, #9
 800681c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800681e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800682c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800682e:	f107 0308 	add.w	r3, r7, #8
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fd7f 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f960 	bl	8006b00 <SDMMC_GetCmdResp2>
 8006840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006842:	69fb      	ldr	r3, [r7, #28]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800685a:	2303      	movs	r3, #3
 800685c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800685e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006864:	2300      	movs	r3, #0
 8006866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800686c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800686e:	f107 0308 	add.w	r3, r7, #8
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f7ff fd5f 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	2103      	movs	r1, #3
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9c8 	bl	8006c14 <SDMMC_GetCmdResp6>
 8006884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006886:	69fb      	ldr	r3, [r7, #28]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3720      	adds	r7, #32
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800689e:	230d      	movs	r3, #13
 80068a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068a8:	2300      	movs	r3, #0
 80068aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068b2:	f107 0308 	add.w	r3, r7, #8
 80068b6:	4619      	mov	r1, r3
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff fd3d 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80068be:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c2:	210d      	movs	r1, #13
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 f829 	bl	800691c <SDMMC_GetCmdResp1>
 80068ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068cc:	69fb      	ldr	r3, [r7, #28]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3720      	adds	r7, #32
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b088      	sub	sp, #32
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80068e2:	230d      	movs	r3, #13
 80068e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80068e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80068f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80068f6:	f107 0308 	add.w	r3, r7, #8
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7ff fd1b 	bl	8006338 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006902:	f241 3288 	movw	r2, #5000	; 0x1388
 8006906:	210d      	movs	r1, #13
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 f807 	bl	800691c <SDMMC_GetCmdResp1>
 800690e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006910:	69fb      	ldr	r3, [r7, #28]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3720      	adds	r7, #32
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	460b      	mov	r3, r1
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800692a:	4b70      	ldr	r3, [pc, #448]	; (8006aec <SDMMC_GetCmdResp1+0x1d0>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a70      	ldr	r2, [pc, #448]	; (8006af0 <SDMMC_GetCmdResp1+0x1d4>)
 8006930:	fba2 2303 	umull	r2, r3, r2, r3
 8006934:	0a5a      	lsrs	r2, r3, #9
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	fb02 f303 	mul.w	r3, r2, r3
 800693c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	61fa      	str	r2, [r7, #28]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d102      	bne.n	800694e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006948:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800694c:	e0c9      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	4b67      	ldr	r3, [pc, #412]	; (8006af4 <SDMMC_GetCmdResp1+0x1d8>)
 8006958:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0ef      	beq.n	800693e <SDMMC_GetCmdResp1+0x22>
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1ea      	bne.n	800693e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696c:	f003 0304 	and.w	r3, r3, #4
 8006970:	2b00      	cmp	r3, #0
 8006972:	d004      	beq.n	800697e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2204      	movs	r2, #4
 8006978:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800697a:	2304      	movs	r3, #4
 800697c:	e0b1      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006990:	2301      	movs	r3, #1
 8006992:	e0a6      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4a58      	ldr	r2, [pc, #352]	; (8006af8 <SDMMC_GetCmdResp1+0x1dc>)
 8006998:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f7ff fcf6 	bl	800638c <SDMMC_GetCommandResponse>
 80069a0:	4603      	mov	r3, r0
 80069a2:	461a      	mov	r2, r3
 80069a4:	7afb      	ldrb	r3, [r7, #11]
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d001      	beq.n	80069ae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e099      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80069ae:	2100      	movs	r1, #0
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f7ff fcf8 	bl	80063a6 <SDMMC_GetResponse>
 80069b6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4b50      	ldr	r3, [pc, #320]	; (8006afc <SDMMC_GetCmdResp1+0x1e0>)
 80069bc:	4013      	ands	r3, r2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d101      	bne.n	80069c6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e08d      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da02      	bge.n	80069d2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80069cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069d0:	e087      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80069dc:	2340      	movs	r3, #64	; 0x40
 80069de:	e080      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80069ea:	2380      	movs	r3, #128	; 0x80
 80069ec:	e079      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80069f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069fc:	e071      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a0c:	e069      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1c:	e061      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a2c:	e059      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a3c:	e051      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a4c:	e049      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006a58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a5c:	e041      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a6c:	e039      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a7c:	e031      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006a88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006a8c:	e029      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006a98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a9c:	e021      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006aa8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006aac:	e019      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006abc:	e011      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ac8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006acc:	e009      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006ad8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006adc:	e001      	b.n	8006ae2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	24000000 	.word	0x24000000
 8006af0:	10624dd3 	.word	0x10624dd3
 8006af4:	00200045 	.word	0x00200045
 8006af8:	002000c5 	.word	0x002000c5
 8006afc:	fdffe008 	.word	0xfdffe008

08006b00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006b08:	4b1f      	ldr	r3, [pc, #124]	; (8006b88 <SDMMC_GetCmdResp2+0x88>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <SDMMC_GetCmdResp2+0x8c>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0a5b      	lsrs	r3, r3, #9
 8006b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	60fa      	str	r2, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b2c:	e026      	b.n	8006b7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b32:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0ef      	beq.n	8006b1e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1ea      	bne.n	8006b1e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b4c:	f003 0304 	and.w	r3, r3, #4
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d004      	beq.n	8006b5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2204      	movs	r2, #4
 8006b58:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b5a:	2304      	movs	r3, #4
 8006b5c:	e00e      	b.n	8006b7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d004      	beq.n	8006b74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2201      	movs	r2, #1
 8006b6e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e003      	b.n	8006b7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a06      	ldr	r2, [pc, #24]	; (8006b90 <SDMMC_GetCmdResp2+0x90>)
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	24000000 	.word	0x24000000
 8006b8c:	10624dd3 	.word	0x10624dd3
 8006b90:	002000c5 	.word	0x002000c5

08006b94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b085      	sub	sp, #20
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006b9c:	4b1a      	ldr	r3, [pc, #104]	; (8006c08 <SDMMC_GetCmdResp3+0x74>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1a      	ldr	r2, [pc, #104]	; (8006c0c <SDMMC_GetCmdResp3+0x78>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	0a5b      	lsrs	r3, r3, #9
 8006ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bac:	fb02 f303 	mul.w	r3, r2, r3
 8006bb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	1e5a      	subs	r2, r3, #1
 8006bb6:	60fa      	str	r2, [r7, #12]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d102      	bne.n	8006bc2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc0:	e01b      	b.n	8006bfa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d0ef      	beq.n	8006bb2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1ea      	bne.n	8006bb2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	f003 0304 	and.w	r3, r3, #4
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d004      	beq.n	8006bf2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2204      	movs	r2, #4
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bee:	2304      	movs	r3, #4
 8006bf0:	e003      	b.n	8006bfa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <SDMMC_GetCmdResp3+0x7c>)
 8006bf6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	24000000 	.word	0x24000000
 8006c0c:	10624dd3 	.word	0x10624dd3
 8006c10:	002000c5 	.word	0x002000c5

08006c14 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006c22:	4b35      	ldr	r3, [pc, #212]	; (8006cf8 <SDMMC_GetCmdResp6+0xe4>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a35      	ldr	r2, [pc, #212]	; (8006cfc <SDMMC_GetCmdResp6+0xe8>)
 8006c28:	fba2 2303 	umull	r2, r3, r2, r3
 8006c2c:	0a5b      	lsrs	r3, r3, #9
 8006c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c32:	fb02 f303 	mul.w	r3, r2, r3
 8006c36:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	1e5a      	subs	r2, r3, #1
 8006c3c:	61fa      	str	r2, [r7, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c46:	e052      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d0ef      	beq.n	8006c38 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1ea      	bne.n	8006c38 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c66:	f003 0304 	and.w	r3, r3, #4
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2204      	movs	r2, #4
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c74:	2304      	movs	r3, #4
 8006c76:	e03a      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	f003 0301 	and.w	r3, r3, #1
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d004      	beq.n	8006c8e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e02f      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fb7c 	bl	800638c <SDMMC_GetCommandResponse>
 8006c94:	4603      	mov	r3, r0
 8006c96:	461a      	mov	r2, r3
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d001      	beq.n	8006ca2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e025      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <SDMMC_GetCmdResp6+0xec>)
 8006ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8006ca8:	2100      	movs	r1, #0
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f7ff fb7b 	bl	80063a6 <SDMMC_GetResponse>
 8006cb0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	0c1b      	lsrs	r3, r3, #16
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e011      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cd8:	e009      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ce8:	e001      	b.n	8006cee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	24000000 	.word	0x24000000
 8006cfc:	10624dd3 	.word	0x10624dd3
 8006d00:	002000c5 	.word	0x002000c5

08006d04 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006d0c:	4b22      	ldr	r3, [pc, #136]	; (8006d98 <SDMMC_GetCmdResp7+0x94>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a22      	ldr	r2, [pc, #136]	; (8006d9c <SDMMC_GetCmdResp7+0x98>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	0a5b      	lsrs	r3, r3, #9
 8006d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1c:	fb02 f303 	mul.w	r3, r2, r3
 8006d20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1e5a      	subs	r2, r3, #1
 8006d26:	60fa      	str	r2, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d102      	bne.n	8006d32 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d30:	e02c      	b.n	8006d8c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d36:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d0ef      	beq.n	8006d22 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1ea      	bne.n	8006d22 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d50:	f003 0304 	and.w	r3, r3, #4
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d004      	beq.n	8006d62 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2204      	movs	r2, #4
 8006d5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d5e:	2304      	movs	r3, #4
 8006d60:	e014      	b.n	8006d8c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d004      	beq.n	8006d78 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2201      	movs	r2, #1
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d74:	2301      	movs	r3, #1
 8006d76:	e009      	b.n	8006d8c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2240      	movs	r2, #64	; 0x40
 8006d88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006d8a:	2300      	movs	r3, #0

}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3714      	adds	r7, #20
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr
 8006d98:	24000000 	.word	0x24000000
 8006d9c:	10624dd3 	.word	0x10624dd3

08006da0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006da8:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <SDMMC_GetCmdError+0x50>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a11      	ldr	r2, [pc, #68]	; (8006df4 <SDMMC_GetCmdError+0x54>)
 8006dae:	fba2 2303 	umull	r2, r3, r2, r3
 8006db2:	0a5b      	lsrs	r3, r3, #9
 8006db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db8:	fb02 f303 	mul.w	r3, r2, r3
 8006dbc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1e5a      	subs	r2, r3, #1
 8006dc2:	60fa      	str	r2, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d102      	bne.n	8006dce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006dcc:	e009      	b.n	8006de2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0f1      	beq.n	8006dbe <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a06      	ldr	r2, [pc, #24]	; (8006df8 <SDMMC_GetCmdError+0x58>)
 8006dde:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	24000000 	.word	0x24000000
 8006df4:	10624dd3 	.word	0x10624dd3
 8006df8:	002000c5 	.word	0x002000c5

08006dfc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006e00:	4904      	ldr	r1, [pc, #16]	; (8006e14 <MX_FATFS_Init+0x18>)
 8006e02:	4805      	ldr	r0, [pc, #20]	; (8006e18 <MX_FATFS_Init+0x1c>)
 8006e04:	f002 fbe6 	bl	80095d4 <FATFS_LinkDriver>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <MX_FATFS_Init+0x20>)
 8006e0e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	24000110 	.word	0x24000110
 8006e18:	0800a634 	.word	0x0800a634
 8006e1c:	2400010c 	.word	0x2400010c

08006e20 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006e24:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr

08006e30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006e3a:	f000 f877 	bl	8006f2c <BSP_SD_IsDetected>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d001      	beq.n	8006e48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006e44:	2302      	movs	r3, #2
 8006e46:	e005      	b.n	8006e54 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006e48:	4804      	ldr	r0, [pc, #16]	; (8006e5c <BSP_SD_Init+0x2c>)
 8006e4a:	f7fd fda9 	bl	80049a0 <HAL_SD_Init>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006e52:	79fb      	ldrb	r3, [r7, #7]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3708      	adds	r7, #8
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	24000088 	.word	0x24000088

08006e60 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	68f9      	ldr	r1, [r7, #12]
 8006e76:	4806      	ldr	r0, [pc, #24]	; (8006e90 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006e78:	f7fd feb2 	bl	8004be0 <HAL_SD_ReadBlocks_DMA>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d001      	beq.n	8006e86 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	24000088 	.word	0x24000088

08006e94 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	68f9      	ldr	r1, [r7, #12]
 8006eaa:	4806      	ldr	r0, [pc, #24]	; (8006ec4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006eac:	f7fd ff40 	bl	8004d30 <HAL_SD_WriteBlocks_DMA>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	24000088 	.word	0x24000088

08006ec8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006ecc:	4805      	ldr	r0, [pc, #20]	; (8006ee4 <BSP_SD_GetCardState+0x1c>)
 8006ece:	f7fe fd39 	bl	8005944 <HAL_SD_GetCardState>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	bf14      	ite	ne
 8006ed8:	2301      	movne	r3, #1
 8006eda:	2300      	moveq	r3, #0
 8006edc:	b2db      	uxtb	r3, r3
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	24000088 	.word	0x24000088

08006ee8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	4803      	ldr	r0, [pc, #12]	; (8006f00 <BSP_SD_GetCardInfo+0x18>)
 8006ef4:	f7fe fbe8 	bl	80056c8 <HAL_SD_GetCardInfo>
}
 8006ef8:	bf00      	nop
 8006efa:	3708      	adds	r7, #8
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	24000088 	.word	0x24000088

08006f04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006f0c:	f000 f9a0 	bl	8007250 <BSP_SD_WriteCpltCallback>
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006f20:	f000 f9a2 	bl	8007268 <BSP_SD_ReadCpltCallback>
}
 8006f24:	bf00      	nop
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b082      	sub	sp, #8
 8006f30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006f32:	2301      	movs	r3, #1
 8006f34:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006f36:	f000 f80b 	bl	8006f50 <BSP_PlatformIsDetected>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006f40:	2300      	movs	r3, #0
 8006f42:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006f44:	79fb      	ldrb	r3, [r7, #7]
 8006f46:	b2db      	uxtb	r3, r3
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3708      	adds	r7, #8
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006f56:	2301      	movs	r3, #1
 8006f58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	4806      	ldr	r0, [pc, #24]	; (8006f78 <BSP_PlatformIsDetected+0x28>)
 8006f5e:	f7fa f977 	bl	8001250 <HAL_GPIO_ReadPin>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	58021000 	.word	0x58021000

08006f7c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006f84:	f7f9 fe7c 	bl	8000c80 <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006f8a:	e006      	b.n	8006f9a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006f8c:	f7ff ff9c 	bl	8006ec8 <BSP_SD_GetCardState>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e009      	b.n	8006fae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006f9a:	f7f9 fe71 	bl	8000c80 <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d8f0      	bhi.n	8006f8c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <SD_CheckStatus+0x38>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006fc8:	f7ff ff7e 	bl	8006ec8 <BSP_SD_GetCardState>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d107      	bne.n	8006fe2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006fd2:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <SD_CheckStatus+0x38>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	f023 0301 	bic.w	r3, r3, #1
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	4b04      	ldr	r3, [pc, #16]	; (8006ff0 <SD_CheckStatus+0x38>)
 8006fe0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006fe2:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <SD_CheckStatus+0x38>)
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	b2db      	uxtb	r3, r3
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	2400000d 	.word	0x2400000d

08006ff4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006ffe:	f7ff ff17 	bl	8006e30 <BSP_SD_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d107      	bne.n	8007018 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007008:	79fb      	ldrb	r3, [r7, #7]
 800700a:	4618      	mov	r0, r3
 800700c:	f7ff ffd4 	bl	8006fb8 <SD_CheckStatus>
 8007010:	4603      	mov	r3, r0
 8007012:	461a      	mov	r2, r3
 8007014:	4b04      	ldr	r3, [pc, #16]	; (8007028 <SD_initialize+0x34>)
 8007016:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007018:	4b03      	ldr	r3, [pc, #12]	; (8007028 <SD_initialize+0x34>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	2400000d 	.word	0x2400000d

0800702c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007036:	79fb      	ldrb	r3, [r7, #7]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ffbd 	bl	8006fb8 <SD_CheckStatus>
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800705c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007060:	f7ff ff8c 	bl	8006f7c <SD_CheckStatusWithTimeout>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	da01      	bge.n	800706e <SD_read+0x26>
  {
    return res;
 800706a:	7dfb      	ldrb	r3, [r7, #23]
 800706c:	e03b      	b.n	80070e6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	68b8      	ldr	r0, [r7, #8]
 8007074:	f7ff fef4 	bl	8006e60 <BSP_SD_ReadBlocks_DMA>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d132      	bne.n	80070e4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800707e:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <SD_read+0xa8>)
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8007084:	f7f9 fdfc 	bl	8000c80 <HAL_GetTick>
 8007088:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800708a:	bf00      	nop
 800708c:	4b18      	ldr	r3, [pc, #96]	; (80070f0 <SD_read+0xa8>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d108      	bne.n	80070a6 <SD_read+0x5e>
 8007094:	f7f9 fdf4 	bl	8000c80 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	f247 522f 	movw	r2, #29999	; 0x752f
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d9f2      	bls.n	800708c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <SD_read+0xa8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d102      	bne.n	80070b4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	75fb      	strb	r3, [r7, #23]
 80070b2:	e017      	b.n	80070e4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <SD_read+0xa8>)
 80070b6:	2200      	movs	r2, #0
 80070b8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80070ba:	f7f9 fde1 	bl	8000c80 <HAL_GetTick>
 80070be:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80070c0:	e007      	b.n	80070d2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070c2:	f7ff ff01 	bl	8006ec8 <BSP_SD_GetCardState>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <SD_read+0x8a>
          {
            res = RES_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80070d0:	e008      	b.n	80070e4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80070d2:	f7f9 fdd5 	bl	8000c80 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	f247 522f 	movw	r2, #29999	; 0x752f
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d9ee      	bls.n	80070c2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80070e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	24000578 	.word	0x24000578

080070f4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b086      	sub	sp, #24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60b9      	str	r1, [r7, #8]
 80070fc:	607a      	str	r2, [r7, #4]
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8007108:	4b24      	ldr	r3, [pc, #144]	; (800719c <SD_write+0xa8>)
 800710a:	2200      	movs	r2, #0
 800710c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800710e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007112:	f7ff ff33 	bl	8006f7c <SD_CheckStatusWithTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	da01      	bge.n	8007120 <SD_write+0x2c>
  {
    return res;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
 800711e:	e038      	b.n	8007192 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007120:	683a      	ldr	r2, [r7, #0]
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	68b8      	ldr	r0, [r7, #8]
 8007126:	f7ff feb5 	bl	8006e94 <BSP_SD_WriteBlocks_DMA>
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d12f      	bne.n	8007190 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007130:	f7f9 fda6 	bl	8000c80 <HAL_GetTick>
 8007134:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007136:	bf00      	nop
 8007138:	4b18      	ldr	r3, [pc, #96]	; (800719c <SD_write+0xa8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d108      	bne.n	8007152 <SD_write+0x5e>
 8007140:	f7f9 fd9e 	bl	8000c80 <HAL_GetTick>
 8007144:	4602      	mov	r2, r0
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	f247 522f 	movw	r2, #29999	; 0x752f
 800714e:	4293      	cmp	r3, r2
 8007150:	d9f2      	bls.n	8007138 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8007152:	4b12      	ldr	r3, [pc, #72]	; (800719c <SD_write+0xa8>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d102      	bne.n	8007160 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	75fb      	strb	r3, [r7, #23]
 800715e:	e017      	b.n	8007190 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8007160:	4b0e      	ldr	r3, [pc, #56]	; (800719c <SD_write+0xa8>)
 8007162:	2200      	movs	r2, #0
 8007164:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007166:	f7f9 fd8b 	bl	8000c80 <HAL_GetTick>
 800716a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800716c:	e007      	b.n	800717e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800716e:	f7ff feab 	bl	8006ec8 <BSP_SD_GetCardState>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d102      	bne.n	800717e <SD_write+0x8a>
          {
            res = RES_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
            break;
 800717c:	e008      	b.n	8007190 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800717e:	f7f9 fd7f 	bl	8000c80 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	f247 522f 	movw	r2, #29999	; 0x752f
 800718c:	4293      	cmp	r3, r2
 800718e:	d9ee      	bls.n	800716e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8007190:	7dfb      	ldrb	r3, [r7, #23]
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	24000574 	.word	0x24000574

080071a0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08c      	sub	sp, #48	; 0x30
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	4603      	mov	r3, r0
 80071a8:	603a      	str	r2, [r7, #0]
 80071aa:	71fb      	strb	r3, [r7, #7]
 80071ac:	460b      	mov	r3, r1
 80071ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80071b6:	4b25      	ldr	r3, [pc, #148]	; (800724c <SD_ioctl+0xac>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <SD_ioctl+0x28>
 80071c4:	2303      	movs	r3, #3
 80071c6:	e03c      	b.n	8007242 <SD_ioctl+0xa2>

  switch (cmd)
 80071c8:	79bb      	ldrb	r3, [r7, #6]
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d834      	bhi.n	8007238 <SD_ioctl+0x98>
 80071ce:	a201      	add	r2, pc, #4	; (adr r2, 80071d4 <SD_ioctl+0x34>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	080071e5 	.word	0x080071e5
 80071d8:	080071ed 	.word	0x080071ed
 80071dc:	08007205 	.word	0x08007205
 80071e0:	0800721f 	.word	0x0800721f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071ea:	e028      	b.n	800723e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80071ec:	f107 0308 	add.w	r3, r7, #8
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fe79 	bl	8006ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80071f6:	6a3a      	ldr	r2, [r7, #32]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007202:	e01c      	b.n	800723e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007204:	f107 0308 	add.w	r3, r7, #8
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff fe6d 	bl	8006ee8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800720e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007210:	b29a      	uxth	r2, r3
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800721c:	e00f      	b.n	800723e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800721e:	f107 0308 	add.w	r3, r7, #8
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff fe60 	bl	8006ee8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722a:	0a5a      	lsrs	r2, r3, #9
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007236:	e002      	b.n	800723e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007238:	2304      	movs	r3, #4
 800723a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800723e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007242:	4618      	mov	r0, r3
 8007244:	3730      	adds	r7, #48	; 0x30
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	2400000d 	.word	0x2400000d

08007250 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8007254:	4b03      	ldr	r3, [pc, #12]	; (8007264 <BSP_SD_WriteCpltCallback+0x14>)
 8007256:	2201      	movs	r2, #1
 8007258:	601a      	str	r2, [r3, #0]
}
 800725a:	bf00      	nop
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	24000574 	.word	0x24000574

08007268 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800726c:	4b03      	ldr	r3, [pc, #12]	; (800727c <BSP_SD_ReadCpltCallback+0x14>)
 800726e:	2201      	movs	r2, #1
 8007270:	601a      	str	r2, [r3, #0]
}
 8007272:	bf00      	nop
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	24000578 	.word	0x24000578

08007280 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	4603      	mov	r3, r0
 8007288:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	4a08      	ldr	r2, [pc, #32]	; (80072b0 <disk_status+0x30>)
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	79fa      	ldrb	r2, [r7, #7]
 8007298:	4905      	ldr	r1, [pc, #20]	; (80072b0 <disk_status+0x30>)
 800729a:	440a      	add	r2, r1
 800729c:	7a12      	ldrb	r2, [r2, #8]
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	240005a4 	.word	0x240005a4

080072b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	4603      	mov	r3, r0
 80072bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	4a0d      	ldr	r2, [pc, #52]	; (80072fc <disk_initialize+0x48>)
 80072c6:	5cd3      	ldrb	r3, [r2, r3]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d111      	bne.n	80072f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	4a0b      	ldr	r2, [pc, #44]	; (80072fc <disk_initialize+0x48>)
 80072d0:	2101      	movs	r1, #1
 80072d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80072d4:	79fb      	ldrb	r3, [r7, #7]
 80072d6:	4a09      	ldr	r2, [pc, #36]	; (80072fc <disk_initialize+0x48>)
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	79fa      	ldrb	r2, [r7, #7]
 80072e2:	4906      	ldr	r1, [pc, #24]	; (80072fc <disk_initialize+0x48>)
 80072e4:	440a      	add	r2, r1
 80072e6:	7a12      	ldrb	r2, [r2, #8]
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
 80072ec:	4603      	mov	r3, r0
 80072ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80072f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	240005a4 	.word	0x240005a4

08007300 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007300:	b590      	push	{r4, r7, lr}
 8007302:	b087      	sub	sp, #28
 8007304:	af00      	add	r7, sp, #0
 8007306:	60b9      	str	r1, [r7, #8]
 8007308:	607a      	str	r2, [r7, #4]
 800730a:	603b      	str	r3, [r7, #0]
 800730c:	4603      	mov	r3, r0
 800730e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	4a0a      	ldr	r2, [pc, #40]	; (800733c <disk_read+0x3c>)
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	689c      	ldr	r4, [r3, #8]
 800731c:	7bfb      	ldrb	r3, [r7, #15]
 800731e:	4a07      	ldr	r2, [pc, #28]	; (800733c <disk_read+0x3c>)
 8007320:	4413      	add	r3, r2
 8007322:	7a18      	ldrb	r0, [r3, #8]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	47a0      	blx	r4
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	bd90      	pop	{r4, r7, pc}
 800733a:	bf00      	nop
 800733c:	240005a4 	.word	0x240005a4

08007340 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007340:	b590      	push	{r4, r7, lr}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60b9      	str	r1, [r7, #8]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	603b      	str	r3, [r7, #0]
 800734c:	4603      	mov	r3, r0
 800734e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007350:	7bfb      	ldrb	r3, [r7, #15]
 8007352:	4a0a      	ldr	r2, [pc, #40]	; (800737c <disk_write+0x3c>)
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	68dc      	ldr	r4, [r3, #12]
 800735c:	7bfb      	ldrb	r3, [r7, #15]
 800735e:	4a07      	ldr	r2, [pc, #28]	; (800737c <disk_write+0x3c>)
 8007360:	4413      	add	r3, r2
 8007362:	7a18      	ldrb	r0, [r3, #8]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	47a0      	blx	r4
 800736c:	4603      	mov	r3, r0
 800736e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007370:	7dfb      	ldrb	r3, [r7, #23]
}
 8007372:	4618      	mov	r0, r3
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	bd90      	pop	{r4, r7, pc}
 800737a:	bf00      	nop
 800737c:	240005a4 	.word	0x240005a4

08007380 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	4603      	mov	r3, r0
 8007388:	603a      	str	r2, [r7, #0]
 800738a:	71fb      	strb	r3, [r7, #7]
 800738c:	460b      	mov	r3, r1
 800738e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	4a09      	ldr	r2, [pc, #36]	; (80073b8 <disk_ioctl+0x38>)
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4413      	add	r3, r2
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	79fa      	ldrb	r2, [r7, #7]
 800739e:	4906      	ldr	r1, [pc, #24]	; (80073b8 <disk_ioctl+0x38>)
 80073a0:	440a      	add	r2, r1
 80073a2:	7a10      	ldrb	r0, [r2, #8]
 80073a4:	79b9      	ldrb	r1, [r7, #6]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4798      	blx	r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
  return res;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	240005a4 	.word	0x240005a4

080073bc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	3301      	adds	r3, #1
 80073c8:	781b      	ldrb	r3, [r3, #0]
 80073ca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80073cc:	89fb      	ldrh	r3, [r7, #14]
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	b21a      	sxth	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	b21b      	sxth	r3, r3
 80073d8:	4313      	orrs	r3, r2
 80073da:	b21b      	sxth	r3, r3
 80073dc:	81fb      	strh	r3, [r7, #14]
	return rv;
 80073de:	89fb      	ldrh	r3, [r7, #14]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	3303      	adds	r3, #3
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	021b      	lsls	r3, r3, #8
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	3202      	adds	r2, #2
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	3201      	adds	r2, #1
 8007412:	7812      	ldrb	r2, [r2, #0]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	021b      	lsls	r3, r3, #8
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	7812      	ldrb	r2, [r2, #0]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]
	return rv;
 8007424:	68fb      	ldr	r3, [r7, #12]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	887a      	ldrh	r2, [r7, #2]
 8007446:	b2d2      	uxtb	r2, r2
 8007448:	701a      	strb	r2, [r3, #0]
 800744a:	887b      	ldrh	r3, [r7, #2]
 800744c:	0a1b      	lsrs	r3, r3, #8
 800744e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	607a      	str	r2, [r7, #4]
 8007456:	887a      	ldrh	r2, [r7, #2]
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	b2d2      	uxtb	r2, r2
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	0a1b      	lsrs	r3, r3, #8
 8007482:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	607a      	str	r2, [r7, #4]
 800748a:	683a      	ldr	r2, [r7, #0]
 800748c:	b2d2      	uxtb	r2, r2
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	0a1b      	lsrs	r3, r3, #8
 8007494:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	607a      	str	r2, [r7, #4]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	b2d2      	uxtb	r2, r2
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	0a1b      	lsrs	r3, r3, #8
 80074a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	607a      	str	r2, [r7, #4]
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00d      	beq.n	80074f6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	1c53      	adds	r3, r2, #1
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	6179      	str	r1, [r7, #20]
 80074e6:	7812      	ldrb	r2, [r2, #0]
 80074e8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	607b      	str	r3, [r7, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1f1      	bne.n	80074da <mem_cpy+0x1a>
	}
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	60b9      	str	r1, [r7, #8]
 800750c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	1c5a      	adds	r2, r3, #1
 8007516:	617a      	str	r2, [r7, #20]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3b01      	subs	r3, #1
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f3      	bne.n	8007512 <mem_set+0x10>
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	371c      	adds	r7, #28
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007538:	b480      	push	{r7}
 800753a:	b089      	sub	sp, #36	; 0x24
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	61fa      	str	r2, [r7, #28]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	4619      	mov	r1, r3
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	61ba      	str	r2, [r7, #24]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	1acb      	subs	r3, r1, r3
 8007564:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3b01      	subs	r3, #1
 800756a:	607b      	str	r3, [r7, #4]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <mem_cmp+0x40>
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d0eb      	beq.n	8007550 <mem_cmp+0x18>

	return r;
 8007578:	697b      	ldr	r3, [r7, #20]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3724      	adds	r7, #36	; 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007586:	b480      	push	{r7}
 8007588:	b083      	sub	sp, #12
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007590:	e002      	b.n	8007598 <chk_chr+0x12>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	3301      	adds	r3, #1
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <chk_chr+0x26>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d1f2      	bne.n	8007592 <chk_chr+0xc>
	return *str;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	781b      	ldrb	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80075c6:	2300      	movs	r3, #0
 80075c8:	60bb      	str	r3, [r7, #8]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	e029      	b.n	8007624 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <chk_lock+0xb4>)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4413      	add	r3, r2
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d01d      	beq.n	800761a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80075de:	4a24      	ldr	r2, [pc, #144]	; (8007670 <chk_lock+0xb4>)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	4413      	add	r3, r2
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d116      	bne.n	800761e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80075f0:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <chk_lock+0xb4>)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	4413      	add	r3, r2
 80075f8:	3304      	adds	r3, #4
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007600:	429a      	cmp	r2, r3
 8007602:	d10c      	bne.n	800761e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007604:	4a1a      	ldr	r2, [pc, #104]	; (8007670 <chk_lock+0xb4>)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4413      	add	r3, r2
 800760c:	3308      	adds	r3, #8
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007614:	429a      	cmp	r2, r3
 8007616:	d102      	bne.n	800761e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007618:	e007      	b.n	800762a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800761a:	2301      	movs	r3, #1
 800761c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d9d2      	bls.n	80075d0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d109      	bne.n	8007644 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d102      	bne.n	800763c <chk_lock+0x80>
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	2b02      	cmp	r3, #2
 800763a:	d101      	bne.n	8007640 <chk_lock+0x84>
 800763c:	2300      	movs	r3, #0
 800763e:	e010      	b.n	8007662 <chk_lock+0xa6>
 8007640:	2312      	movs	r3, #18
 8007642:	e00e      	b.n	8007662 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <chk_lock+0xa0>
 800764a:	4a09      	ldr	r2, [pc, #36]	; (8007670 <chk_lock+0xb4>)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	4413      	add	r3, r2
 8007652:	330c      	adds	r3, #12
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765a:	d101      	bne.n	8007660 <chk_lock+0xa4>
 800765c:	2310      	movs	r3, #16
 800765e:	e000      	b.n	8007662 <chk_lock+0xa6>
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3714      	adds	r7, #20
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	24000584 	.word	0x24000584

08007674 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800767a:	2300      	movs	r3, #0
 800767c:	607b      	str	r3, [r7, #4]
 800767e:	e002      	b.n	8007686 <enq_lock+0x12>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3301      	adds	r3, #1
 8007684:	607b      	str	r3, [r7, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d806      	bhi.n	800769a <enq_lock+0x26>
 800768c:	4a09      	ldr	r2, [pc, #36]	; (80076b4 <enq_lock+0x40>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	011b      	lsls	r3, r3, #4
 8007692:	4413      	add	r3, r2
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1f2      	bne.n	8007680 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b02      	cmp	r3, #2
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	24000584 	.word	0x24000584

080076b8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
 80076c6:	e01f      	b.n	8007708 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80076c8:	4a41      	ldr	r2, [pc, #260]	; (80077d0 <inc_lock+0x118>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	4413      	add	r3, r2
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d113      	bne.n	8007702 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80076da:	4a3d      	ldr	r2, [pc, #244]	; (80077d0 <inc_lock+0x118>)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	4413      	add	r3, r2
 80076e2:	3304      	adds	r3, #4
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d109      	bne.n	8007702 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80076ee:	4a38      	ldr	r2, [pc, #224]	; (80077d0 <inc_lock+0x118>)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	3308      	adds	r3, #8
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80076fe:	429a      	cmp	r2, r3
 8007700:	d006      	beq.n	8007710 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3301      	adds	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d9dc      	bls.n	80076c8 <inc_lock+0x10>
 800770e:	e000      	b.n	8007712 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007710:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b02      	cmp	r3, #2
 8007716:	d132      	bne.n	800777e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]
 800771c:	e002      	b.n	8007724 <inc_lock+0x6c>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	3301      	adds	r3, #1
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d806      	bhi.n	8007738 <inc_lock+0x80>
 800772a:	4a29      	ldr	r2, [pc, #164]	; (80077d0 <inc_lock+0x118>)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	4413      	add	r3, r2
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d1f2      	bne.n	800771e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d101      	bne.n	8007742 <inc_lock+0x8a>
 800773e:	2300      	movs	r3, #0
 8007740:	e040      	b.n	80077c4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	4922      	ldr	r1, [pc, #136]	; (80077d0 <inc_lock+0x118>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	011b      	lsls	r3, r3, #4
 800774c:	440b      	add	r3, r1
 800774e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	491e      	ldr	r1, [pc, #120]	; (80077d0 <inc_lock+0x118>)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	440b      	add	r3, r1
 800775c:	3304      	adds	r3, #4
 800775e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	491a      	ldr	r1, [pc, #104]	; (80077d0 <inc_lock+0x118>)
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	440b      	add	r3, r1
 800776c:	3308      	adds	r3, #8
 800776e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007770:	4a17      	ldr	r2, [pc, #92]	; (80077d0 <inc_lock+0x118>)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	4413      	add	r3, r2
 8007778:	330c      	adds	r3, #12
 800777a:	2200      	movs	r2, #0
 800777c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d009      	beq.n	8007798 <inc_lock+0xe0>
 8007784:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <inc_lock+0x118>)
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	4413      	add	r3, r2
 800778c:	330c      	adds	r3, #12
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d001      	beq.n	8007798 <inc_lock+0xe0>
 8007794:	2300      	movs	r3, #0
 8007796:	e015      	b.n	80077c4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d108      	bne.n	80077b0 <inc_lock+0xf8>
 800779e:	4a0c      	ldr	r2, [pc, #48]	; (80077d0 <inc_lock+0x118>)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4413      	add	r3, r2
 80077a6:	330c      	adds	r3, #12
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	e001      	b.n	80077b4 <inc_lock+0xfc>
 80077b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077b4:	4906      	ldr	r1, [pc, #24]	; (80077d0 <inc_lock+0x118>)
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	440b      	add	r3, r1
 80077bc:	330c      	adds	r3, #12
 80077be:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	3301      	adds	r3, #1
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	24000584 	.word	0x24000584

080077d4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3b01      	subs	r3, #1
 80077e0:	607b      	str	r3, [r7, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d825      	bhi.n	8007834 <dec_lock+0x60>
		n = Files[i].ctr;
 80077e8:	4a17      	ldr	r2, [pc, #92]	; (8007848 <dec_lock+0x74>)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	011b      	lsls	r3, r3, #4
 80077ee:	4413      	add	r3, r2
 80077f0:	330c      	adds	r3, #12
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80077f6:	89fb      	ldrh	r3, [r7, #14]
 80077f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077fc:	d101      	bne.n	8007802 <dec_lock+0x2e>
 80077fe:	2300      	movs	r3, #0
 8007800:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007802:	89fb      	ldrh	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <dec_lock+0x3a>
 8007808:	89fb      	ldrh	r3, [r7, #14]
 800780a:	3b01      	subs	r3, #1
 800780c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800780e:	4a0e      	ldr	r2, [pc, #56]	; (8007848 <dec_lock+0x74>)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	4413      	add	r3, r2
 8007816:	330c      	adds	r3, #12
 8007818:	89fa      	ldrh	r2, [r7, #14]
 800781a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800781c:	89fb      	ldrh	r3, [r7, #14]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d105      	bne.n	800782e <dec_lock+0x5a>
 8007822:	4a09      	ldr	r2, [pc, #36]	; (8007848 <dec_lock+0x74>)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	011b      	lsls	r3, r3, #4
 8007828:	4413      	add	r3, r2
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	737b      	strb	r3, [r7, #13]
 8007832:	e001      	b.n	8007838 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007834:	2302      	movs	r3, #2
 8007836:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007838:	7b7b      	ldrb	r3, [r7, #13]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3714      	adds	r7, #20
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
 8007846:	bf00      	nop
 8007848:	24000584 	.word	0x24000584

0800784c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e010      	b.n	800787c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800785a:	4a0d      	ldr	r2, [pc, #52]	; (8007890 <clear_lock+0x44>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	4413      	add	r3, r2
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d105      	bne.n	8007876 <clear_lock+0x2a>
 800786a:	4a09      	ldr	r2, [pc, #36]	; (8007890 <clear_lock+0x44>)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3301      	adds	r3, #1
 800787a:	60fb      	str	r3, [r7, #12]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d9eb      	bls.n	800785a <clear_lock+0xe>
	}
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	24000584 	.word	0x24000584

08007894 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	78db      	ldrb	r3, [r3, #3]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d034      	beq.n	8007912 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7858      	ldrb	r0, [r3, #1]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078b8:	2301      	movs	r3, #1
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	f7ff fd40 	bl	8007340 <disk_write>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <sync_window+0x38>
			res = FR_DISK_ERR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	73fb      	strb	r3, [r7, #15]
 80078ca:	e022      	b.n	8007912 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	1ad2      	subs	r2, r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d217      	bcs.n	8007912 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	789b      	ldrb	r3, [r3, #2]
 80078e6:	613b      	str	r3, [r7, #16]
 80078e8:	e010      	b.n	800790c <sync_window+0x78>
					wsect += fs->fsize;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	699b      	ldr	r3, [r3, #24]
 80078ee:	697a      	ldr	r2, [r7, #20]
 80078f0:	4413      	add	r3, r2
 80078f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	7858      	ldrb	r0, [r3, #1]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80078fe:	2301      	movs	r3, #1
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	f7ff fd1d 	bl	8007340 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	3b01      	subs	r3, #1
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d8eb      	bhi.n	80078ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007912:	7bfb      	ldrb	r3, [r7, #15]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3718      	adds	r7, #24
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792e:	683a      	ldr	r2, [r7, #0]
 8007930:	429a      	cmp	r2, r3
 8007932:	d01b      	beq.n	800796c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f7ff ffad 	bl	8007894 <sync_window>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d113      	bne.n	800796c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7858      	ldrb	r0, [r3, #1]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800794e:	2301      	movs	r3, #1
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	f7ff fcd5 	bl	8007300 <disk_read>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800795c:	f04f 33ff 	mov.w	r3, #4294967295
 8007960:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007962:	2301      	movs	r3, #1
 8007964:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ff87 	bl	8007894 <sync_window>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d158      	bne.n	8007a42 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b03      	cmp	r3, #3
 8007996:	d148      	bne.n	8007a2a <sync_fs+0xb2>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	791b      	ldrb	r3, [r3, #4]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d144      	bne.n	8007a2a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3330      	adds	r3, #48	; 0x30
 80079a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079a8:	2100      	movs	r1, #0
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff fda9 	bl	8007502 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	3330      	adds	r3, #48	; 0x30
 80079b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80079b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff fd38 	bl	8007432 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	3330      	adds	r3, #48	; 0x30
 80079c6:	4921      	ldr	r1, [pc, #132]	; (8007a4c <sync_fs+0xd4>)
 80079c8:	4618      	mov	r0, r3
 80079ca:	f7ff fd4d 	bl	8007468 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3330      	adds	r3, #48	; 0x30
 80079d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80079d6:	491e      	ldr	r1, [pc, #120]	; (8007a50 <sync_fs+0xd8>)
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fd45 	bl	8007468 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3330      	adds	r3, #48	; 0x30
 80079e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	4619      	mov	r1, r3
 80079ec:	4610      	mov	r0, r2
 80079ee:	f7ff fd3b 	bl	8007468 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	3330      	adds	r3, #48	; 0x30
 80079f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	4619      	mov	r1, r3
 8007a00:	4610      	mov	r0, r2
 8007a02:	f7ff fd31 	bl	8007468 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	7858      	ldrb	r0, [r3, #1]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a1e:	2301      	movs	r3, #1
 8007a20:	f7ff fc8e 	bl	8007340 <disk_write>
			fs->fsi_flag = 0;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	785b      	ldrb	r3, [r3, #1]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2100      	movs	r1, #0
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff fca4 	bl	8007380 <disk_ioctl>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <sync_fs+0xca>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	41615252 	.word	0x41615252
 8007a50:	61417272 	.word	0x61417272

08007a54 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	3b02      	subs	r3, #2
 8007a62:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	695b      	ldr	r3, [r3, #20]
 8007a68:	3b02      	subs	r3, #2
 8007a6a:	683a      	ldr	r2, [r7, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d301      	bcc.n	8007a74 <clust2sect+0x20>
 8007a70:	2300      	movs	r3, #0
 8007a72:	e008      	b.n	8007a86 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	895b      	ldrh	r3, [r3, #10]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	fb03 f202 	mul.w	r2, r3, r2
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a84:	4413      	add	r3, r2
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b086      	sub	sp, #24
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d904      	bls.n	8007ab2 <get_fat+0x20>
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d302      	bcc.n	8007ab8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	617b      	str	r3, [r7, #20]
 8007ab6:	e08f      	b.n	8007bd8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8007abc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d062      	beq.n	8007b8c <get_fat+0xfa>
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	dc7c      	bgt.n	8007bc4 <get_fat+0x132>
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d002      	beq.n	8007ad4 <get_fat+0x42>
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d042      	beq.n	8007b58 <get_fat+0xc6>
 8007ad2:	e077      	b.n	8007bc4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	085b      	lsrs	r3, r3, #1
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4413      	add	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	6a1a      	ldr	r2, [r3, #32]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	0a5b      	lsrs	r3, r3, #9
 8007aea:	4413      	add	r3, r2
 8007aec:	4619      	mov	r1, r3
 8007aee:	6938      	ldr	r0, [r7, #16]
 8007af0:	f7ff ff14 	bl	800791c <move_window>
 8007af4:	4603      	mov	r3, r0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d167      	bne.n	8007bca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	60fa      	str	r2, [r7, #12]
 8007b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4413      	add	r3, r2
 8007b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b0c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	6a1a      	ldr	r2, [r3, #32]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	0a5b      	lsrs	r3, r3, #9
 8007b16:	4413      	add	r3, r2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6938      	ldr	r0, [r7, #16]
 8007b1c:	f7ff fefe 	bl	800791c <move_window>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d153      	bne.n	8007bce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b34:	021b      	lsls	r3, r3, #8
 8007b36:	461a      	mov	r2, r3
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <get_fat+0xbc>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	091b      	lsrs	r3, r3, #4
 8007b4c:	e002      	b.n	8007b54 <get_fat+0xc2>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b54:	617b      	str	r3, [r7, #20]
			break;
 8007b56:	e03f      	b.n	8007bd8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	0a1b      	lsrs	r3, r3, #8
 8007b60:	4413      	add	r3, r2
 8007b62:	4619      	mov	r1, r3
 8007b64:	6938      	ldr	r0, [r7, #16]
 8007b66:	f7ff fed9 	bl	800791c <move_window>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d130      	bne.n	8007bd2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007b7e:	4413      	add	r3, r2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fc1b 	bl	80073bc <ld_word>
 8007b86:	4603      	mov	r3, r0
 8007b88:	617b      	str	r3, [r7, #20]
			break;
 8007b8a:	e025      	b.n	8007bd8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	6a1a      	ldr	r2, [r3, #32]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	09db      	lsrs	r3, r3, #7
 8007b94:	4413      	add	r3, r2
 8007b96:	4619      	mov	r1, r3
 8007b98:	6938      	ldr	r0, [r7, #16]
 8007b9a:	f7ff febf 	bl	800791c <move_window>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d118      	bne.n	8007bd6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007bb2:	4413      	add	r3, r2
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff fc19 	bl	80073ec <ld_dword>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007bc0:	617b      	str	r3, [r7, #20]
			break;
 8007bc2:	e009      	b.n	8007bd8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e006      	b.n	8007bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bca:	bf00      	nop
 8007bcc:	e004      	b.n	8007bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bce:	bf00      	nop
 8007bd0:	e002      	b.n	8007bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007bd2:	bf00      	nop
 8007bd4:	e000      	b.n	8007bd8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007bd6:	bf00      	nop
		}
	}

	return val;
 8007bd8:	697b      	ldr	r3, [r7, #20]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007be2:	b590      	push	{r4, r7, lr}
 8007be4:	b089      	sub	sp, #36	; 0x24
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	60f8      	str	r0, [r7, #12]
 8007bea:	60b9      	str	r1, [r7, #8]
 8007bec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007bee:	2302      	movs	r3, #2
 8007bf0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	f240 80d9 	bls.w	8007dac <put_fat+0x1ca>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	f080 80d3 	bcs.w	8007dac <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	f000 8096 	beq.w	8007d3c <put_fat+0x15a>
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	f300 80cb 	bgt.w	8007dac <put_fat+0x1ca>
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d002      	beq.n	8007c20 <put_fat+0x3e>
 8007c1a:	2b02      	cmp	r3, #2
 8007c1c:	d06e      	beq.n	8007cfc <put_fat+0x11a>
 8007c1e:	e0c5      	b.n	8007dac <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	085b      	lsrs	r3, r3, #1
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	0a5b      	lsrs	r3, r3, #9
 8007c36:	4413      	add	r3, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f7ff fe6e 	bl	800791c <move_window>
 8007c40:	4603      	mov	r3, r0
 8007c42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c44:	7ffb      	ldrb	r3, [r7, #31]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f040 80a9 	bne.w	8007d9e <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	1c59      	adds	r1, r3, #1
 8007c56:	61b9      	str	r1, [r7, #24]
 8007c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c5c:	4413      	add	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d00d      	beq.n	8007c86 <put_fat+0xa4>
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b25b      	sxtb	r3, r3
 8007c70:	f003 030f 	and.w	r3, r3, #15
 8007c74:	b25a      	sxtb	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	011b      	lsls	r3, r3, #4
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	b25b      	sxtb	r3, r3
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	e001      	b.n	8007c8a <put_fat+0xa8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	697a      	ldr	r2, [r7, #20]
 8007c8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1a      	ldr	r2, [r3, #32]
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	0a5b      	lsrs	r3, r3, #9
 8007c9c:	4413      	add	r3, r2
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f7ff fe3b 	bl	800791c <move_window>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007caa:	7ffb      	ldrb	r3, [r7, #31]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d178      	bne.n	8007da2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cbc:	4413      	add	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d003      	beq.n	8007cd2 <put_fat+0xf0>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	091b      	lsrs	r3, r3, #4
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	e00e      	b.n	8007cf0 <put_fat+0x10e>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	b25b      	sxtb	r3, r3
 8007cd8:	f023 030f 	bic.w	r3, r3, #15
 8007cdc:	b25a      	sxtb	r2, r3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	b25b      	sxtb	r3, r3
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	b25b      	sxtb	r3, r3
 8007cea:	4313      	orrs	r3, r2
 8007cec:	b25b      	sxtb	r3, r3
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	70da      	strb	r2, [r3, #3]
			break;
 8007cfa:	e057      	b.n	8007dac <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6a1a      	ldr	r2, [r3, #32]
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	0a1b      	lsrs	r3, r3, #8
 8007d04:	4413      	add	r3, r2
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f7ff fe07 	bl	800791c <move_window>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d12:	7ffb      	ldrb	r3, [r7, #31]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d146      	bne.n	8007da6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	005b      	lsls	r3, r3, #1
 8007d22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007d26:	4413      	add	r3, r2
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	b292      	uxth	r2, r2
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fb7f 	bl	8007432 <st_word>
			fs->wflag = 1;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	70da      	strb	r2, [r3, #3]
			break;
 8007d3a:	e037      	b.n	8007dac <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1a      	ldr	r2, [r3, #32]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	09db      	lsrs	r3, r3, #7
 8007d44:	4413      	add	r3, r2
 8007d46:	4619      	mov	r1, r3
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fde7 	bl	800791c <move_window>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d52:	7ffb      	ldrb	r3, [r7, #31]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d128      	bne.n	8007daa <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007d6c:	4413      	add	r3, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fb3c 	bl	80073ec <ld_dword>
 8007d74:	4603      	mov	r3, r0
 8007d76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007d7a:	4323      	orrs	r3, r4
 8007d7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007d8c:	4413      	add	r3, r2
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff fb69 	bl	8007468 <st_dword>
			fs->wflag = 1;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	70da      	strb	r2, [r3, #3]
			break;
 8007d9c:	e006      	b.n	8007dac <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007d9e:	bf00      	nop
 8007da0:	e004      	b.n	8007dac <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007da2:	bf00      	nop
 8007da4:	e002      	b.n	8007dac <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007da6:	bf00      	nop
 8007da8:	e000      	b.n	8007dac <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007daa:	bf00      	nop
		}
	}
	return res;
 8007dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3724      	adds	r7, #36	; 0x24
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd90      	pop	{r4, r7, pc}

08007db6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b088      	sub	sp, #32
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d904      	bls.n	8007ddc <remove_chain+0x26>
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d301      	bcc.n	8007de0 <remove_chain+0x2a>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e04b      	b.n	8007e78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007de6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dea:	6879      	ldr	r1, [r7, #4]
 8007dec:	69b8      	ldr	r0, [r7, #24]
 8007dee:	f7ff fef8 	bl	8007be2 <put_fat>
 8007df2:	4603      	mov	r3, r0
 8007df4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007df6:	7ffb      	ldrb	r3, [r7, #31]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <remove_chain+0x4a>
 8007dfc:	7ffb      	ldrb	r3, [r7, #31]
 8007dfe:	e03b      	b.n	8007e78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e00:	68b9      	ldr	r1, [r7, #8]
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff fe45 	bl	8007a92 <get_fat>
 8007e08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d031      	beq.n	8007e74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d101      	bne.n	8007e1a <remove_chain+0x64>
 8007e16:	2302      	movs	r3, #2
 8007e18:	e02e      	b.n	8007e78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d101      	bne.n	8007e26 <remove_chain+0x70>
 8007e22:	2301      	movs	r3, #1
 8007e24:	e028      	b.n	8007e78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e26:	2200      	movs	r2, #0
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	69b8      	ldr	r0, [r7, #24]
 8007e2c:	f7ff fed9 	bl	8007be2 <put_fat>
 8007e30:	4603      	mov	r3, r0
 8007e32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007e34:	7ffb      	ldrb	r3, [r7, #31]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d001      	beq.n	8007e3e <remove_chain+0x88>
 8007e3a:	7ffb      	ldrb	r3, [r7, #31]
 8007e3c:	e01c      	b.n	8007e78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	691a      	ldr	r2, [r3, #16]
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	3b02      	subs	r3, #2
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d20b      	bcs.n	8007e64 <remove_chain+0xae>
			fs->free_clst++;
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	1c5a      	adds	r2, r3, #1
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	791b      	ldrb	r3, [r3, #4]
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	695b      	ldr	r3, [r3, #20]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d3c6      	bcc.n	8007e00 <remove_chain+0x4a>
 8007e72:	e000      	b.n	8007e76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007e74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3720      	adds	r7, #32
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b088      	sub	sp, #32
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10d      	bne.n	8007eb2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d004      	beq.n	8007eac <create_chain+0x2c>
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d31b      	bcc.n	8007ee4 <create_chain+0x64>
 8007eac:	2301      	movs	r3, #1
 8007eae:	61bb      	str	r3, [r7, #24]
 8007eb0:	e018      	b.n	8007ee4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff fdec 	bl	8007a92 <get_fat>
 8007eba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d801      	bhi.n	8007ec6 <create_chain+0x46>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e070      	b.n	8007fa8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ecc:	d101      	bne.n	8007ed2 <create_chain+0x52>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	e06a      	b.n	8007fa8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d201      	bcs.n	8007ee0 <create_chain+0x60>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	e063      	b.n	8007fa8 <create_chain+0x128>
		scl = clst;
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	3301      	adds	r3, #1
 8007eec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	69fa      	ldr	r2, [r7, #28]
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d307      	bcc.n	8007f08 <create_chain+0x88>
				ncl = 2;
 8007ef8:	2302      	movs	r3, #2
 8007efa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d901      	bls.n	8007f08 <create_chain+0x88>
 8007f04:	2300      	movs	r3, #0
 8007f06:	e04f      	b.n	8007fa8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f08:	69f9      	ldr	r1, [r7, #28]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fdc1 	bl	8007a92 <get_fat>
 8007f10:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00e      	beq.n	8007f36 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d003      	beq.n	8007f26 <create_chain+0xa6>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f24:	d101      	bne.n	8007f2a <create_chain+0xaa>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	e03e      	b.n	8007fa8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f2a:	69fa      	ldr	r2, [r7, #28]
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d1da      	bne.n	8007ee8 <create_chain+0x68>
 8007f32:	2300      	movs	r3, #0
 8007f34:	e038      	b.n	8007fa8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007f36:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007f38:	f04f 32ff 	mov.w	r2, #4294967295
 8007f3c:	69f9      	ldr	r1, [r7, #28]
 8007f3e:	6938      	ldr	r0, [r7, #16]
 8007f40:	f7ff fe4f 	bl	8007be2 <put_fat>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <create_chain+0xe2>
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d006      	beq.n	8007f62 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007f54:	69fa      	ldr	r2, [r7, #28]
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6938      	ldr	r0, [r7, #16]
 8007f5a:	f7ff fe42 	bl	8007be2 <put_fat>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007f62:	7dfb      	ldrb	r3, [r7, #23]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d116      	bne.n	8007f96 <create_chain+0x116>
		fs->last_clst = ncl;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	3b02      	subs	r3, #2
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d804      	bhi.n	8007f86 <create_chain+0x106>
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	1e5a      	subs	r2, r3, #1
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	791b      	ldrb	r3, [r3, #4]
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	b2da      	uxtb	r2, r3
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	711a      	strb	r2, [r3, #4]
 8007f94:	e007      	b.n	8007fa6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007f96:	7dfb      	ldrb	r3, [r7, #23]
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d102      	bne.n	8007fa2 <create_chain+0x122>
 8007f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa0:	e000      	b.n	8007fa4 <create_chain+0x124>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007fa6:	69fb      	ldr	r3, [r7, #28]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3720      	adds	r7, #32
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b087      	sub	sp, #28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	0a5b      	lsrs	r3, r3, #9
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	8952      	ldrh	r2, [r2, #10]
 8007fd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	1d1a      	adds	r2, r3, #4
 8007fda:	613a      	str	r2, [r7, #16]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <clmt_clust+0x3a>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	e010      	b.n	800800c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d307      	bcc.n	8008002 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008000:	e7e9      	b.n	8007fd6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008002:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	4413      	add	r3, r2
}
 800800c:	4618      	mov	r0, r3
 800800e:	371c      	adds	r7, #28
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800802e:	d204      	bcs.n	800803a <dir_sdi+0x22>
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	f003 031f 	and.w	r3, r3, #31
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <dir_sdi+0x26>
		return FR_INT_ERR;
 800803a:	2302      	movs	r3, #2
 800803c:	e063      	b.n	8008106 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	683a      	ldr	r2, [r7, #0]
 8008042:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <dir_sdi+0x46>
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b02      	cmp	r3, #2
 8008056:	d902      	bls.n	800805e <dir_sdi+0x46>
		clst = fs->dirbase;
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10c      	bne.n	800807e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	693a      	ldr	r2, [r7, #16]
 800806a:	8912      	ldrh	r2, [r2, #8]
 800806c:	4293      	cmp	r3, r2
 800806e:	d301      	bcc.n	8008074 <dir_sdi+0x5c>
 8008070:	2302      	movs	r3, #2
 8008072:	e048      	b.n	8008106 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	61da      	str	r2, [r3, #28]
 800807c:	e029      	b.n	80080d2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	895b      	ldrh	r3, [r3, #10]
 8008082:	025b      	lsls	r3, r3, #9
 8008084:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008086:	e019      	b.n	80080bc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6979      	ldr	r1, [r7, #20]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff fd00 	bl	8007a92 <get_fat>
 8008092:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800809a:	d101      	bne.n	80080a0 <dir_sdi+0x88>
 800809c:	2301      	movs	r3, #1
 800809e:	e032      	b.n	8008106 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d904      	bls.n	80080b0 <dir_sdi+0x98>
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	697a      	ldr	r2, [r7, #20]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d301      	bcc.n	80080b4 <dir_sdi+0x9c>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e028      	b.n	8008106 <dir_sdi+0xee>
			ofs -= csz;
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d2e1      	bcs.n	8008088 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80080c4:	6979      	ldr	r1, [r7, #20]
 80080c6:	6938      	ldr	r0, [r7, #16]
 80080c8:	f7ff fcc4 	bl	8007a54 <clust2sect>
 80080cc:	4602      	mov	r2, r0
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <dir_sdi+0xcc>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e010      	b.n	8008106 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69da      	ldr	r2, [r3, #28]
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	0a5b      	lsrs	r3, r3, #9
 80080ec:	441a      	add	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080fe:	441a      	add	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3718      	adds	r7, #24
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b086      	sub	sp, #24
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	3320      	adds	r3, #32
 8008124:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d003      	beq.n	8008136 <dir_next+0x28>
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008134:	d301      	bcc.n	800813a <dir_next+0x2c>
 8008136:	2304      	movs	r3, #4
 8008138:	e0aa      	b.n	8008290 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008140:	2b00      	cmp	r3, #0
 8008142:	f040 8098 	bne.w	8008276 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	1c5a      	adds	r2, r3, #1
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d10b      	bne.n	8008170 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	8912      	ldrh	r2, [r2, #8]
 8008160:	4293      	cmp	r3, r2
 8008162:	f0c0 8088 	bcc.w	8008276 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	61da      	str	r2, [r3, #28]
 800816c:	2304      	movs	r3, #4
 800816e:	e08f      	b.n	8008290 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	0a5b      	lsrs	r3, r3, #9
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	8952      	ldrh	r2, [r2, #10]
 8008178:	3a01      	subs	r2, #1
 800817a:	4013      	ands	r3, r2
 800817c:	2b00      	cmp	r3, #0
 800817e:	d17a      	bne.n	8008276 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f7ff fc82 	bl	8007a92 <get_fat>
 800818e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d801      	bhi.n	800819a <dir_next+0x8c>
 8008196:	2302      	movs	r3, #2
 8008198:	e07a      	b.n	8008290 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a0:	d101      	bne.n	80081a6 <dir_next+0x98>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e074      	b.n	8008290 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	697a      	ldr	r2, [r7, #20]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d358      	bcc.n	8008262 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d104      	bne.n	80081c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	61da      	str	r2, [r3, #28]
 80081bc:	2304      	movs	r3, #4
 80081be:	e067      	b.n	8008290 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f7ff fe59 	bl	8007e80 <create_chain>
 80081ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <dir_next+0xcc>
 80081d6:	2307      	movs	r3, #7
 80081d8:	e05a      	b.n	8008290 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d101      	bne.n	80081e4 <dir_next+0xd6>
 80081e0:	2302      	movs	r3, #2
 80081e2:	e055      	b.n	8008290 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ea:	d101      	bne.n	80081f0 <dir_next+0xe2>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e04f      	b.n	8008290 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80081f0:	68f8      	ldr	r0, [r7, #12]
 80081f2:	f7ff fb4f 	bl	8007894 <sync_window>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <dir_next+0xf2>
 80081fc:	2301      	movs	r3, #1
 80081fe:	e047      	b.n	8008290 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3330      	adds	r3, #48	; 0x30
 8008204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff f979 	bl	8007502 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008210:	2300      	movs	r3, #0
 8008212:	613b      	str	r3, [r7, #16]
 8008214:	6979      	ldr	r1, [r7, #20]
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff fc1c 	bl	8007a54 <clust2sect>
 800821c:	4602      	mov	r2, r0
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	62da      	str	r2, [r3, #44]	; 0x2c
 8008222:	e012      	b.n	800824a <dir_next+0x13c>
						fs->wflag = 1;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2201      	movs	r2, #1
 8008228:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f7ff fb32 	bl	8007894 <sync_window>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <dir_next+0x12c>
 8008236:	2301      	movs	r3, #1
 8008238:	e02a      	b.n	8008290 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	3301      	adds	r3, #1
 800823e:	613b      	str	r3, [r7, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	62da      	str	r2, [r3, #44]	; 0x2c
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	895b      	ldrh	r3, [r3, #10]
 800824e:	461a      	mov	r2, r3
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	4293      	cmp	r3, r2
 8008254:	d3e6      	bcc.n	8008224 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	1ad2      	subs	r2, r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008268:	6979      	ldr	r1, [r7, #20]
 800826a:	68f8      	ldr	r0, [r7, #12]
 800826c:	f7ff fbf2 	bl	8007a54 <clust2sect>
 8008270:	4602      	mov	r2, r0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008288:	441a      	add	r2, r3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b086      	sub	sp, #24
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80082a8:	2100      	movs	r1, #0
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f7ff feb4 	bl	8008018 <dir_sdi>
 80082b0:	4603      	mov	r3, r0
 80082b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d12b      	bne.n	8008312 <dir_alloc+0x7a>
		n = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	69db      	ldr	r3, [r3, #28]
 80082c2:	4619      	mov	r1, r3
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f7ff fb29 	bl	800791c <move_window>
 80082ca:	4603      	mov	r3, r0
 80082cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082ce:	7dfb      	ldrb	r3, [r7, #23]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d11d      	bne.n	8008310 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	2be5      	cmp	r3, #229	; 0xe5
 80082dc:	d004      	beq.n	80082e8 <dir_alloc+0x50>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d107      	bne.n	80082f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3301      	adds	r3, #1
 80082ec:	613b      	str	r3, [r7, #16]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d102      	bne.n	80082fc <dir_alloc+0x64>
 80082f6:	e00c      	b.n	8008312 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80082f8:	2300      	movs	r3, #0
 80082fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80082fc:	2101      	movs	r1, #1
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f7ff ff05 	bl	800810e <dir_next>
 8008304:	4603      	mov	r3, r0
 8008306:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008308:	7dfb      	ldrb	r3, [r7, #23]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d0d7      	beq.n	80082be <dir_alloc+0x26>
 800830e:	e000      	b.n	8008312 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008310:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008312:	7dfb      	ldrb	r3, [r7, #23]
 8008314:	2b04      	cmp	r3, #4
 8008316:	d101      	bne.n	800831c <dir_alloc+0x84>
 8008318:	2307      	movs	r3, #7
 800831a:	75fb      	strb	r3, [r7, #23]
	return res;
 800831c:	7dfb      	ldrb	r3, [r7, #23]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3718      	adds	r7, #24
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	331a      	adds	r3, #26
 8008334:	4618      	mov	r0, r3
 8008336:	f7ff f841 	bl	80073bc <ld_word>
 800833a:	4603      	mov	r3, r0
 800833c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	2b03      	cmp	r3, #3
 8008344:	d109      	bne.n	800835a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	3314      	adds	r3, #20
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff f836 	bl	80073bc <ld_word>
 8008350:	4603      	mov	r3, r0
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	4313      	orrs	r3, r2
 8008358:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800835a:	68fb      	ldr	r3, [r7, #12]
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	331a      	adds	r3, #26
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	b292      	uxth	r2, r2
 8008378:	4611      	mov	r1, r2
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff f859 	bl	8007432 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	781b      	ldrb	r3, [r3, #0]
 8008384:	2b03      	cmp	r3, #3
 8008386:	d109      	bne.n	800839c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	f103 0214 	add.w	r2, r3, #20
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	0c1b      	lsrs	r3, r3, #16
 8008392:	b29b      	uxth	r3, r3
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f7ff f84b 	bl	8007432 <st_word>
	}
}
 800839c:	bf00      	nop
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80083b2:	2100      	movs	r1, #0
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f7ff fe2f 	bl	8008018 <dir_sdi>
 80083ba:	4603      	mov	r3, r0
 80083bc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <dir_find+0x24>
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
 80083c6:	e03e      	b.n	8008446 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	4619      	mov	r1, r3
 80083ce:	6938      	ldr	r0, [r7, #16]
 80083d0:	f7ff faa4 	bl	800791c <move_window>
 80083d4:	4603      	mov	r3, r0
 80083d6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80083d8:	7dfb      	ldrb	r3, [r7, #23]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d12f      	bne.n	800843e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <dir_find+0x4e>
 80083ec:	2304      	movs	r3, #4
 80083ee:	75fb      	strb	r3, [r7, #23]
 80083f0:	e028      	b.n	8008444 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	330b      	adds	r3, #11
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6a1b      	ldr	r3, [r3, #32]
 8008408:	330b      	adds	r3, #11
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	f003 0308 	and.w	r3, r3, #8
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10a      	bne.n	800842a <dir_find+0x86>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a18      	ldr	r0, [r3, #32]
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3324      	adds	r3, #36	; 0x24
 800841c:	220b      	movs	r2, #11
 800841e:	4619      	mov	r1, r3
 8008420:	f7ff f88a 	bl	8007538 <mem_cmp>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7ff fe6e 	bl	800810e <dir_next>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0c5      	beq.n	80083c8 <dir_find+0x24>
 800843c:	e002      	b.n	8008444 <dir_find+0xa0>
		if (res != FR_OK) break;
 800843e:	bf00      	nop
 8008440:	e000      	b.n	8008444 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008442:	bf00      	nop

	return res;
 8008444:	7dfb      	ldrb	r3, [r7, #23]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3718      	adds	r7, #24
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800845c:	2101      	movs	r1, #1
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff ff1a 	bl	8008298 <dir_alloc>
 8008464:	4603      	mov	r3, r0
 8008466:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008468:	7bfb      	ldrb	r3, [r7, #15]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d11c      	bne.n	80084a8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	69db      	ldr	r3, [r3, #28]
 8008472:	4619      	mov	r1, r3
 8008474:	68b8      	ldr	r0, [r7, #8]
 8008476:	f7ff fa51 	bl	800791c <move_window>
 800847a:	4603      	mov	r3, r0
 800847c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d111      	bne.n	80084a8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a1b      	ldr	r3, [r3, #32]
 8008488:	2220      	movs	r2, #32
 800848a:	2100      	movs	r1, #0
 800848c:	4618      	mov	r0, r3
 800848e:	f7ff f838 	bl	8007502 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a18      	ldr	r0, [r3, #32]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	3324      	adds	r3, #36	; 0x24
 800849a:	220b      	movs	r2, #11
 800849c:	4619      	mov	r1, r3
 800849e:	f7ff f80f 	bl	80074c0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	2201      	movs	r2, #1
 80084a6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
	...

080084b4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b088      	sub	sp, #32
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3324      	adds	r3, #36	; 0x24
 80084c8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80084ca:	220b      	movs	r2, #11
 80084cc:	2120      	movs	r1, #32
 80084ce:	68b8      	ldr	r0, [r7, #8]
 80084d0:	f7ff f817 	bl	8007502 <mem_set>
	si = i = 0; ni = 8;
 80084d4:	2300      	movs	r3, #0
 80084d6:	613b      	str	r3, [r7, #16]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	61fb      	str	r3, [r7, #28]
 80084dc:	2308      	movs	r3, #8
 80084de:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80084e0:	69fb      	ldr	r3, [r7, #28]
 80084e2:	1c5a      	adds	r2, r3, #1
 80084e4:	61fa      	str	r2, [r7, #28]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80084ee:	7efb      	ldrb	r3, [r7, #27]
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d94e      	bls.n	8008592 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80084f4:	7efb      	ldrb	r3, [r7, #27]
 80084f6:	2b2f      	cmp	r3, #47	; 0x2f
 80084f8:	d006      	beq.n	8008508 <create_name+0x54>
 80084fa:	7efb      	ldrb	r3, [r7, #27]
 80084fc:	2b5c      	cmp	r3, #92	; 0x5c
 80084fe:	d110      	bne.n	8008522 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008500:	e002      	b.n	8008508 <create_name+0x54>
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	3301      	adds	r3, #1
 8008506:	61fb      	str	r3, [r7, #28]
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	4413      	add	r3, r2
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	2b2f      	cmp	r3, #47	; 0x2f
 8008512:	d0f6      	beq.n	8008502 <create_name+0x4e>
 8008514:	68fa      	ldr	r2, [r7, #12]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	4413      	add	r3, r2
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	2b5c      	cmp	r3, #92	; 0x5c
 800851e:	d0f0      	beq.n	8008502 <create_name+0x4e>
			break;
 8008520:	e038      	b.n	8008594 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008522:	7efb      	ldrb	r3, [r7, #27]
 8008524:	2b2e      	cmp	r3, #46	; 0x2e
 8008526:	d003      	beq.n	8008530 <create_name+0x7c>
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	429a      	cmp	r2, r3
 800852e:	d30c      	bcc.n	800854a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	2b0b      	cmp	r3, #11
 8008534:	d002      	beq.n	800853c <create_name+0x88>
 8008536:	7efb      	ldrb	r3, [r7, #27]
 8008538:	2b2e      	cmp	r3, #46	; 0x2e
 800853a:	d001      	beq.n	8008540 <create_name+0x8c>
 800853c:	2306      	movs	r3, #6
 800853e:	e044      	b.n	80085ca <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008540:	2308      	movs	r3, #8
 8008542:	613b      	str	r3, [r7, #16]
 8008544:	230b      	movs	r3, #11
 8008546:	617b      	str	r3, [r7, #20]
			continue;
 8008548:	e022      	b.n	8008590 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800854a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800854e:	2b00      	cmp	r3, #0
 8008550:	da04      	bge.n	800855c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008552:	7efb      	ldrb	r3, [r7, #27]
 8008554:	3b80      	subs	r3, #128	; 0x80
 8008556:	4a1f      	ldr	r2, [pc, #124]	; (80085d4 <create_name+0x120>)
 8008558:	5cd3      	ldrb	r3, [r2, r3]
 800855a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800855c:	7efb      	ldrb	r3, [r7, #27]
 800855e:	4619      	mov	r1, r3
 8008560:	481d      	ldr	r0, [pc, #116]	; (80085d8 <create_name+0x124>)
 8008562:	f7ff f810 	bl	8007586 <chk_chr>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <create_name+0xbc>
 800856c:	2306      	movs	r3, #6
 800856e:	e02c      	b.n	80085ca <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008570:	7efb      	ldrb	r3, [r7, #27]
 8008572:	2b60      	cmp	r3, #96	; 0x60
 8008574:	d905      	bls.n	8008582 <create_name+0xce>
 8008576:	7efb      	ldrb	r3, [r7, #27]
 8008578:	2b7a      	cmp	r3, #122	; 0x7a
 800857a:	d802      	bhi.n	8008582 <create_name+0xce>
 800857c:	7efb      	ldrb	r3, [r7, #27]
 800857e:	3b20      	subs	r3, #32
 8008580:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	1c5a      	adds	r2, r3, #1
 8008586:	613a      	str	r2, [r7, #16]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	4413      	add	r3, r2
 800858c:	7efa      	ldrb	r2, [r7, #27]
 800858e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008590:	e7a6      	b.n	80084e0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008592:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	441a      	add	r2, r3
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <create_name+0xf4>
 80085a4:	2306      	movs	r3, #6
 80085a6:	e010      	b.n	80085ca <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2be5      	cmp	r3, #229	; 0xe5
 80085ae:	d102      	bne.n	80085b6 <create_name+0x102>
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2205      	movs	r2, #5
 80085b4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80085b6:	7efb      	ldrb	r3, [r7, #27]
 80085b8:	2b20      	cmp	r3, #32
 80085ba:	d801      	bhi.n	80085c0 <create_name+0x10c>
 80085bc:	2204      	movs	r2, #4
 80085be:	e000      	b.n	80085c2 <create_name+0x10e>
 80085c0:	2200      	movs	r2, #0
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	330b      	adds	r3, #11
 80085c6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80085c8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	0800a648 	.word	0x0800a648
 80085d8:	0800a5e0 	.word	0x0800a5e0

080085dc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b086      	sub	sp, #24
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80085f0:	e002      	b.n	80085f8 <follow_path+0x1c>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	3301      	adds	r3, #1
 80085f6:	603b      	str	r3, [r7, #0]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	2b2f      	cmp	r3, #47	; 0x2f
 80085fe:	d0f8      	beq.n	80085f2 <follow_path+0x16>
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	2b5c      	cmp	r3, #92	; 0x5c
 8008606:	d0f4      	beq.n	80085f2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b1f      	cmp	r3, #31
 8008614:	d80a      	bhi.n	800862c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2280      	movs	r2, #128	; 0x80
 800861a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800861e:	2100      	movs	r1, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fcf9 	bl	8008018 <dir_sdi>
 8008626:	4603      	mov	r3, r0
 8008628:	75fb      	strb	r3, [r7, #23]
 800862a:	e043      	b.n	80086b4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800862c:	463b      	mov	r3, r7
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f7ff ff3f 	bl	80084b4 <create_name>
 8008636:	4603      	mov	r3, r0
 8008638:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d134      	bne.n	80086aa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f7ff feaf 	bl	80083a4 <dir_find>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008650:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008658:	7dfb      	ldrb	r3, [r7, #23]
 800865a:	2b04      	cmp	r3, #4
 800865c:	d127      	bne.n	80086ae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800865e:	7afb      	ldrb	r3, [r7, #11]
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	2b00      	cmp	r3, #0
 8008666:	d122      	bne.n	80086ae <follow_path+0xd2>
 8008668:	2305      	movs	r3, #5
 800866a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800866c:	e01f      	b.n	80086ae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	f003 0304 	and.w	r3, r3, #4
 8008674:	2b00      	cmp	r3, #0
 8008676:	d11c      	bne.n	80086b2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	799b      	ldrb	r3, [r3, #6]
 800867c:	f003 0310 	and.w	r3, r3, #16
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008684:	2305      	movs	r3, #5
 8008686:	75fb      	strb	r3, [r7, #23]
 8008688:	e014      	b.n	80086b4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008698:	4413      	add	r3, r2
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7ff fe42 	bl	8008326 <ld_clust>
 80086a2:	4602      	mov	r2, r0
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80086a8:	e7c0      	b.n	800862c <follow_path+0x50>
			if (res != FR_OK) break;
 80086aa:	bf00      	nop
 80086ac:	e002      	b.n	80086b4 <follow_path+0xd8>
				break;
 80086ae:	bf00      	nop
 80086b0:	e000      	b.n	80086b4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80086b2:	bf00      	nop
			}
		}
	}

	return res;
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}

080086be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80086be:	b480      	push	{r7}
 80086c0:	b087      	sub	sp, #28
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80086c6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d031      	beq.n	8008738 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	617b      	str	r3, [r7, #20]
 80086da:	e002      	b.n	80086e2 <get_ldnumber+0x24>
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	3301      	adds	r3, #1
 80086e0:	617b      	str	r3, [r7, #20]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d903      	bls.n	80086f2 <get_ldnumber+0x34>
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b3a      	cmp	r3, #58	; 0x3a
 80086f0:	d1f4      	bne.n	80086dc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	2b3a      	cmp	r3, #58	; 0x3a
 80086f8:	d11c      	bne.n	8008734 <get_ldnumber+0x76>
			tp = *path;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	60fa      	str	r2, [r7, #12]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	3b30      	subs	r3, #48	; 0x30
 800870a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	2b09      	cmp	r3, #9
 8008710:	d80e      	bhi.n	8008730 <get_ldnumber+0x72>
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	429a      	cmp	r2, r3
 8008718:	d10a      	bne.n	8008730 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d107      	bne.n	8008730 <get_ldnumber+0x72>
					vol = (int)i;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	3301      	adds	r3, #1
 8008728:	617b      	str	r3, [r7, #20]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	e002      	b.n	800873a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008734:	2300      	movs	r3, #0
 8008736:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008738:	693b      	ldr	r3, [r7, #16]
}
 800873a:	4618      	mov	r0, r3
 800873c:	371c      	adds	r7, #28
 800873e:	46bd      	mov	sp, r7
 8008740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008744:	4770      	bx	lr
	...

08008748 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	70da      	strb	r2, [r3, #3]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff f8da 	bl	800791c <move_window>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d001      	beq.n	8008772 <check_fs+0x2a>
 800876e:	2304      	movs	r3, #4
 8008770:	e038      	b.n	80087e4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	3330      	adds	r3, #48	; 0x30
 8008776:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fe1e 	bl	80073bc <ld_word>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008788:	429a      	cmp	r2, r3
 800878a:	d001      	beq.n	8008790 <check_fs+0x48>
 800878c:	2303      	movs	r3, #3
 800878e:	e029      	b.n	80087e4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008796:	2be9      	cmp	r3, #233	; 0xe9
 8008798:	d009      	beq.n	80087ae <check_fs+0x66>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087a0:	2beb      	cmp	r3, #235	; 0xeb
 80087a2:	d11e      	bne.n	80087e2 <check_fs+0x9a>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80087aa:	2b90      	cmp	r3, #144	; 0x90
 80087ac:	d119      	bne.n	80087e2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3330      	adds	r3, #48	; 0x30
 80087b2:	3336      	adds	r3, #54	; 0x36
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fe19 	bl	80073ec <ld_dword>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80087c0:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <check_fs+0xa4>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d101      	bne.n	80087ca <check_fs+0x82>
 80087c6:	2300      	movs	r3, #0
 80087c8:	e00c      	b.n	80087e4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	3330      	adds	r3, #48	; 0x30
 80087ce:	3352      	adds	r3, #82	; 0x52
 80087d0:	4618      	mov	r0, r3
 80087d2:	f7fe fe0b 	bl	80073ec <ld_dword>
 80087d6:	4603      	mov	r3, r0
 80087d8:	4a05      	ldr	r2, [pc, #20]	; (80087f0 <check_fs+0xa8>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d101      	bne.n	80087e2 <check_fs+0x9a>
 80087de:	2300      	movs	r3, #0
 80087e0:	e000      	b.n	80087e4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80087e2:	2302      	movs	r3, #2
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3708      	adds	r7, #8
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	00544146 	.word	0x00544146
 80087f0:	33544146 	.word	0x33544146

080087f4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b096      	sub	sp, #88	; 0x58
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	2200      	movs	r2, #0
 8008806:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f7ff ff58 	bl	80086be <get_ldnumber>
 800880e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008812:	2b00      	cmp	r3, #0
 8008814:	da01      	bge.n	800881a <find_volume+0x26>
 8008816:	230b      	movs	r3, #11
 8008818:	e22d      	b.n	8008c76 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800881a:	4aa1      	ldr	r2, [pc, #644]	; (8008aa0 <find_volume+0x2ac>)
 800881c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008822:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <find_volume+0x3a>
 800882a:	230c      	movs	r3, #12
 800882c:	e223      	b.n	8008c76 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008832:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	f023 0301 	bic.w	r3, r3, #1
 800883a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800883c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	785b      	ldrb	r3, [r3, #1]
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fd19 	bl	8007280 <disk_status>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008854:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008858:	f003 0301 	and.w	r3, r3, #1
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10c      	bne.n	800887a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d007      	beq.n	8008876 <find_volume+0x82>
 8008866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008872:	230a      	movs	r3, #10
 8008874:	e1ff      	b.n	8008c76 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008876:	2300      	movs	r3, #0
 8008878:	e1fd      	b.n	8008c76 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887c:	2200      	movs	r2, #0
 800887e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008882:	b2da      	uxtb	r2, r3
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fd11 	bl	80072b4 <disk_initialize>
 8008892:	4603      	mov	r3, r0
 8008894:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008898:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800889c:	f003 0301 	and.w	r3, r3, #1
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80088a4:	2303      	movs	r3, #3
 80088a6:	e1e6      	b.n	8008c76 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d007      	beq.n	80088be <find_volume+0xca>
 80088ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80088ba:	230a      	movs	r3, #10
 80088bc:	e1db      	b.n	8008c76 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80088c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088c6:	f7ff ff3f 	bl	8008748 <check_fs>
 80088ca:	4603      	mov	r3, r0
 80088cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80088d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d149      	bne.n	800896c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80088d8:	2300      	movs	r3, #0
 80088da:	643b      	str	r3, [r7, #64]	; 0x40
 80088dc:	e01e      	b.n	800891c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80088de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80088e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e6:	011b      	lsls	r3, r3, #4
 80088e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80088ec:	4413      	add	r3, r2
 80088ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80088f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f2:	3304      	adds	r3, #4
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d006      	beq.n	8008908 <find_volume+0x114>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	3308      	adds	r3, #8
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fd74 	bl	80073ec <ld_dword>
 8008904:	4602      	mov	r2, r0
 8008906:	e000      	b.n	800890a <find_volume+0x116>
 8008908:	2200      	movs	r2, #0
 800890a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	3358      	adds	r3, #88	; 0x58
 8008910:	443b      	add	r3, r7
 8008912:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008918:	3301      	adds	r3, #1
 800891a:	643b      	str	r3, [r7, #64]	; 0x40
 800891c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800891e:	2b03      	cmp	r3, #3
 8008920:	d9dd      	bls.n	80088de <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008922:	2300      	movs	r3, #0
 8008924:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <find_volume+0x13e>
 800892c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800892e:	3b01      	subs	r3, #1
 8008930:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008932:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	3358      	adds	r3, #88	; 0x58
 8008938:	443b      	add	r3, r7
 800893a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800893e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008942:	2b00      	cmp	r3, #0
 8008944:	d005      	beq.n	8008952 <find_volume+0x15e>
 8008946:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008948:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800894a:	f7ff fefd 	bl	8008748 <check_fs>
 800894e:	4603      	mov	r3, r0
 8008950:	e000      	b.n	8008954 <find_volume+0x160>
 8008952:	2303      	movs	r3, #3
 8008954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008958:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800895c:	2b01      	cmp	r3, #1
 800895e:	d905      	bls.n	800896c <find_volume+0x178>
 8008960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008962:	3301      	adds	r3, #1
 8008964:	643b      	str	r3, [r7, #64]	; 0x40
 8008966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008968:	2b03      	cmp	r3, #3
 800896a:	d9e2      	bls.n	8008932 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800896c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008970:	2b04      	cmp	r3, #4
 8008972:	d101      	bne.n	8008978 <find_volume+0x184>
 8008974:	2301      	movs	r3, #1
 8008976:	e17e      	b.n	8008c76 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800897c:	2b01      	cmp	r3, #1
 800897e:	d901      	bls.n	8008984 <find_volume+0x190>
 8008980:	230d      	movs	r3, #13
 8008982:	e178      	b.n	8008c76 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	3330      	adds	r3, #48	; 0x30
 8008988:	330b      	adds	r3, #11
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fd16 	bl	80073bc <ld_word>
 8008990:	4603      	mov	r3, r0
 8008992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008996:	d001      	beq.n	800899c <find_volume+0x1a8>
 8008998:	230d      	movs	r3, #13
 800899a:	e16c      	b.n	8008c76 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800899c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800899e:	3330      	adds	r3, #48	; 0x30
 80089a0:	3316      	adds	r3, #22
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fd0a 	bl	80073bc <ld_word>
 80089a8:	4603      	mov	r3, r0
 80089aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80089ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <find_volume+0x1cc>
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	3330      	adds	r3, #48	; 0x30
 80089b6:	3324      	adds	r3, #36	; 0x24
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fd17 	bl	80073ec <ld_dword>
 80089be:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80089c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089c4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80089cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80089d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089d2:	789b      	ldrb	r3, [r3, #2]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d005      	beq.n	80089e4 <find_volume+0x1f0>
 80089d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089da:	789b      	ldrb	r3, [r3, #2]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d001      	beq.n	80089e4 <find_volume+0x1f0>
 80089e0:	230d      	movs	r3, #13
 80089e2:	e148      	b.n	8008c76 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80089e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089e6:	789b      	ldrb	r3, [r3, #2]
 80089e8:	461a      	mov	r2, r3
 80089ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089ec:	fb02 f303 	mul.w	r3, r2, r3
 80089f0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80089f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80089fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a00:	895b      	ldrh	r3, [r3, #10]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d008      	beq.n	8008a18 <find_volume+0x224>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	895b      	ldrh	r3, [r3, #10]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0e:	895b      	ldrh	r3, [r3, #10]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	4013      	ands	r3, r2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <find_volume+0x228>
 8008a18:	230d      	movs	r3, #13
 8008a1a:	e12c      	b.n	8008c76 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1e:	3330      	adds	r3, #48	; 0x30
 8008a20:	3311      	adds	r3, #17
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe fcca 	bl	80073bc <ld_word>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a32:	891b      	ldrh	r3, [r3, #8]
 8008a34:	f003 030f 	and.w	r3, r3, #15
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <find_volume+0x24e>
 8008a3e:	230d      	movs	r3, #13
 8008a40:	e119      	b.n	8008c76 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a44:	3330      	adds	r3, #48	; 0x30
 8008a46:	3313      	adds	r3, #19
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7fe fcb7 	bl	80073bc <ld_word>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d106      	bne.n	8008a66 <find_volume+0x272>
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	3330      	adds	r3, #48	; 0x30
 8008a5c:	3320      	adds	r3, #32
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f7fe fcc4 	bl	80073ec <ld_dword>
 8008a64:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	3330      	adds	r3, #48	; 0x30
 8008a6a:	330e      	adds	r3, #14
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe fca5 	bl	80073bc <ld_word>
 8008a72:	4603      	mov	r3, r0
 8008a74:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008a76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <find_volume+0x28c>
 8008a7c:	230d      	movs	r3, #13
 8008a7e:	e0fa      	b.n	8008c76 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008a80:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a84:	4413      	add	r3, r2
 8008a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a88:	8912      	ldrh	r2, [r2, #8]
 8008a8a:	0912      	lsrs	r2, r2, #4
 8008a8c:	b292      	uxth	r2, r2
 8008a8e:	4413      	add	r3, r2
 8008a90:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008a92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d204      	bcs.n	8008aa4 <find_volume+0x2b0>
 8008a9a:	230d      	movs	r3, #13
 8008a9c:	e0eb      	b.n	8008c76 <find_volume+0x482>
 8008a9e:	bf00      	nop
 8008aa0:	2400057c 	.word	0x2400057c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa8:	1ad3      	subs	r3, r2, r3
 8008aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008aac:	8952      	ldrh	r2, [r2, #10]
 8008aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <find_volume+0x2ca>
 8008aba:	230d      	movs	r3, #13
 8008abc:	e0db      	b.n	8008c76 <find_volume+0x482>
		fmt = FS_FAT32;
 8008abe:	2303      	movs	r3, #3
 8008ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d802      	bhi.n	8008ad4 <find_volume+0x2e0>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d802      	bhi.n	8008ae4 <find_volume+0x2f0>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae6:	1c9a      	adds	r2, r3, #2
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008af0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008af2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af6:	441a      	add	r2, r3
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008afc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	441a      	add	r2, r3
 8008b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b04:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008b06:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d11e      	bne.n	8008b4c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b10:	3330      	adds	r3, #48	; 0x30
 8008b12:	332a      	adds	r3, #42	; 0x2a
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fc51 	bl	80073bc <ld_word>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <find_volume+0x330>
 8008b20:	230d      	movs	r3, #13
 8008b22:	e0a8      	b.n	8008c76 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b26:	891b      	ldrh	r3, [r3, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d001      	beq.n	8008b30 <find_volume+0x33c>
 8008b2c:	230d      	movs	r3, #13
 8008b2e:	e0a2      	b.n	8008c76 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	3330      	adds	r3, #48	; 0x30
 8008b34:	332c      	adds	r3, #44	; 0x2c
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe fc58 	bl	80073ec <ld_dword>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b40:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	647b      	str	r3, [r7, #68]	; 0x44
 8008b4a:	e01f      	b.n	8008b8c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	891b      	ldrh	r3, [r3, #8]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <find_volume+0x364>
 8008b54:	230d      	movs	r3, #13
 8008b56:	e08e      	b.n	8008c76 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	6a1a      	ldr	r2, [r3, #32]
 8008b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5e:	441a      	add	r2, r3
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008b64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008b68:	2b02      	cmp	r3, #2
 8008b6a:	d103      	bne.n	8008b74 <find_volume+0x380>
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	695b      	ldr	r3, [r3, #20]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	e00a      	b.n	8008b8a <find_volume+0x396>
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	695a      	ldr	r2, [r3, #20]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	005b      	lsls	r3, r3, #1
 8008b7c:	4413      	add	r3, r2
 8008b7e:	085a      	lsrs	r2, r3, #1
 8008b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b82:	695b      	ldr	r3, [r3, #20]
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008b8a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b92:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008b96:	0a5b      	lsrs	r3, r3, #9
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d201      	bcs.n	8008ba0 <find_volume+0x3ac>
 8008b9c:	230d      	movs	r3, #13
 8008b9e:	e06a      	b.n	8008c76 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ba6:	611a      	str	r2, [r3, #16]
 8008ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bae:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb2:	2280      	movs	r2, #128	; 0x80
 8008bb4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d149      	bne.n	8008c52 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc0:	3330      	adds	r3, #48	; 0x30
 8008bc2:	3330      	adds	r3, #48	; 0x30
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fbf9 	bl	80073bc <ld_word>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d140      	bne.n	8008c52 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bd8:	f7fe fea0 	bl	800791c <move_window>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d137      	bne.n	8008c52 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be4:	2200      	movs	r2, #0
 8008be6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bea:	3330      	adds	r3, #48	; 0x30
 8008bec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe fbe3 	bl	80073bc <ld_word>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	d127      	bne.n	8008c52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c04:	3330      	adds	r3, #48	; 0x30
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fbf0 	bl	80073ec <ld_dword>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	4a1c      	ldr	r2, [pc, #112]	; (8008c80 <find_volume+0x48c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d11e      	bne.n	8008c52 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c16:	3330      	adds	r3, #48	; 0x30
 8008c18:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fe fbe5 	bl	80073ec <ld_dword>
 8008c22:	4603      	mov	r3, r0
 8008c24:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <find_volume+0x490>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d113      	bne.n	8008c52 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2c:	3330      	adds	r3, #48	; 0x30
 8008c2e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fbda 	bl	80073ec <ld_dword>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	3330      	adds	r3, #48	; 0x30
 8008c42:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7fe fbd0 	bl	80073ec <ld_dword>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c50:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008c58:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <find_volume+0x494>)
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	3301      	adds	r3, #1
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <find_volume+0x494>)
 8008c64:	801a      	strh	r2, [r3, #0]
 8008c66:	4b08      	ldr	r3, [pc, #32]	; (8008c88 <find_volume+0x494>)
 8008c68:	881a      	ldrh	r2, [r3, #0]
 8008c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008c6e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c70:	f7fe fdec 	bl	800784c <clear_lock>
#endif
	return FR_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3758      	adds	r7, #88	; 0x58
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	41615252 	.word	0x41615252
 8008c84:	61417272 	.word	0x61417272
 8008c88:	24000580 	.word	0x24000580

08008c8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
 8008c94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008c96:	2309      	movs	r3, #9
 8008c98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01c      	beq.n	8008cda <validate+0x4e>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d018      	beq.n	8008cda <validate+0x4e>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d013      	beq.n	8008cda <validate+0x4e>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	889a      	ldrh	r2, [r3, #4]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	88db      	ldrh	r3, [r3, #6]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d10c      	bne.n	8008cda <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f7fe fada 	bl	8007280 <disk_status>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <validate+0x4e>
			res = FR_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <validate+0x5a>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	e000      	b.n	8008ce8 <validate+0x5c>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	6013      	str	r3, [r2, #0]
	return res;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
	...

08008cf8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	4613      	mov	r3, r2
 8008d04:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff fcd5 	bl	80086be <get_ldnumber>
 8008d14:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da01      	bge.n	8008d20 <f_mount+0x28>
 8008d1c:	230b      	movs	r3, #11
 8008d1e:	e02b      	b.n	8008d78 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008d20:	4a17      	ldr	r2, [pc, #92]	; (8008d80 <f_mount+0x88>)
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d28:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d005      	beq.n	8008d3c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008d30:	69b8      	ldr	r0, [r7, #24]
 8008d32:	f7fe fd8b 	bl	800784c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008d36:	69bb      	ldr	r3, [r7, #24]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d002      	beq.n	8008d48 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	490d      	ldr	r1, [pc, #52]	; (8008d80 <f_mount+0x88>)
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d002      	beq.n	8008d5e <f_mount+0x66>
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d001      	beq.n	8008d62 <f_mount+0x6a>
 8008d5e:	2300      	movs	r3, #0
 8008d60:	e00a      	b.n	8008d78 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008d62:	f107 010c 	add.w	r1, r7, #12
 8008d66:	f107 0308 	add.w	r3, r7, #8
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fd41 	bl	80087f4 <find_volume>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3720      	adds	r7, #32
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	2400057c 	.word	0x2400057c

08008d84 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b098      	sub	sp, #96	; 0x60
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d101      	bne.n	8008d9c <f_open+0x18>
 8008d98:	2309      	movs	r3, #9
 8008d9a:	e1ad      	b.n	80090f8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008d9c:	79fb      	ldrb	r3, [r7, #7]
 8008d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008da4:	79fa      	ldrb	r2, [r7, #7]
 8008da6:	f107 0110 	add.w	r1, r7, #16
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fd20 	bl	80087f4 <find_volume>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	f040 8191 	bne.w	80090e6 <f_open+0x362>
		dj.obj.fs = fs;
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	f107 0314 	add.w	r3, r7, #20
 8008dce:	4611      	mov	r1, r2
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fc03 	bl	80085dc <follow_path>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008ddc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d11a      	bne.n	8008e1a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008de4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008de8:	b25b      	sxtb	r3, r3
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	da03      	bge.n	8008df6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008dee:	2306      	movs	r3, #6
 8008df0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008df4:	e011      	b.n	8008e1a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	f023 0301 	bic.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	bf14      	ite	ne
 8008e00:	2301      	movne	r3, #1
 8008e02:	2300      	moveq	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	f107 0314 	add.w	r3, r7, #20
 8008e0c:	4611      	mov	r1, r2
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f7fe fbd4 	bl	80075bc <chk_lock>
 8008e14:	4603      	mov	r3, r0
 8008e16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	f003 031c 	and.w	r3, r3, #28
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d07f      	beq.n	8008f24 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d017      	beq.n	8008e5c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d10e      	bne.n	8008e52 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008e34:	f7fe fc1e 	bl	8007674 <enq_lock>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <f_open+0xc8>
 8008e3e:	f107 0314 	add.w	r3, r7, #20
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fb03 	bl	800844e <dir_register>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	e000      	b.n	8008e4e <f_open+0xca>
 8008e4c:	2312      	movs	r3, #18
 8008e4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008e52:	79fb      	ldrb	r3, [r7, #7]
 8008e54:	f043 0308 	orr.w	r3, r3, #8
 8008e58:	71fb      	strb	r3, [r7, #7]
 8008e5a:	e010      	b.n	8008e7e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008e5c:	7ebb      	ldrb	r3, [r7, #26]
 8008e5e:	f003 0311 	and.w	r3, r3, #17
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <f_open+0xea>
					res = FR_DENIED;
 8008e66:	2307      	movs	r3, #7
 8008e68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e6c:	e007      	b.n	8008e7e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008e6e:	79fb      	ldrb	r3, [r7, #7]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <f_open+0xfa>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008e7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d168      	bne.n	8008f58 <f_open+0x1d4>
 8008e86:	79fb      	ldrb	r3, [r7, #7]
 8008e88:	f003 0308 	and.w	r3, r3, #8
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d063      	beq.n	8008f58 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008e90:	f7fd ffc6 	bl	8006e20 <get_fattime>
 8008e94:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	330e      	adds	r3, #14
 8008e9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fe fae3 	bl	8007468 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea4:	3316      	adds	r3, #22
 8008ea6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fadd 	bl	8007468 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	330b      	adds	r3, #11
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eba:	4611      	mov	r1, r2
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fa32 	bl	8008326 <ld_clust>
 8008ec2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ec8:	2200      	movs	r2, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff fa4a 	bl	8008364 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	331c      	adds	r3, #28
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7fe fac6 	bl	8007468 <st_dword>
					fs->wflag = 1;
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d037      	beq.n	8008f58 <f_open+0x1d4>
						dw = fs->winsect;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008eee:	f107 0314 	add.w	r3, r7, #20
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe ff5d 	bl	8007db6 <remove_chain>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008f02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d126      	bne.n	8008f58 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fd04 	bl	800791c <move_window>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f1e:	3a01      	subs	r2, #1
 8008f20:	60da      	str	r2, [r3, #12]
 8008f22:	e019      	b.n	8008f58 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008f24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d115      	bne.n	8008f58 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008f2c:	7ebb      	ldrb	r3, [r7, #26]
 8008f2e:	f003 0310 	and.w	r3, r3, #16
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008f36:	2304      	movs	r3, #4
 8008f38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f3c:	e00c      	b.n	8008f58 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	f003 0302 	and.w	r3, r3, #2
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d007      	beq.n	8008f58 <f_open+0x1d4>
 8008f48:	7ebb      	ldrb	r3, [r7, #26]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d002      	beq.n	8008f58 <f_open+0x1d4>
						res = FR_DENIED;
 8008f52:	2307      	movs	r3, #7
 8008f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d128      	bne.n	8008fb2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008f60:	79fb      	ldrb	r3, [r7, #7]
 8008f62:	f003 0308 	and.w	r3, r3, #8
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d003      	beq.n	8008f72 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f70:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008f7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008f80:	79fb      	ldrb	r3, [r7, #7]
 8008f82:	f023 0301 	bic.w	r3, r3, #1
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	bf14      	ite	ne
 8008f8a:	2301      	movne	r3, #1
 8008f8c:	2300      	moveq	r3, #0
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	461a      	mov	r2, r3
 8008f92:	f107 0314 	add.w	r3, r7, #20
 8008f96:	4611      	mov	r1, r2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7fe fb8d 	bl	80076b8 <inc_lock>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d102      	bne.n	8008fb2 <f_open+0x22e>
 8008fac:	2302      	movs	r3, #2
 8008fae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f040 8095 	bne.w	80090e6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7ff f9af 	bl	8008326 <ld_clust>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd0:	331c      	adds	r3, #28
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe fa0a 	bl	80073ec <ld_dword>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008fe4:	693a      	ldr	r2, [r7, #16]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	88da      	ldrh	r2, [r3, #6]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	79fa      	ldrb	r2, [r7, #7]
 8008ff6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	2200      	movs	r2, #0
 8009002:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	3330      	adds	r3, #48	; 0x30
 800900e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009012:	2100      	movs	r1, #0
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe fa74 	bl	8007502 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	d060      	beq.n	80090e6 <f_open+0x362>
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05c      	beq.n	80090e6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	68da      	ldr	r2, [r3, #12]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	895b      	ldrh	r3, [r3, #10]
 8009038:	025b      	lsls	r3, r3, #9
 800903a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	657b      	str	r3, [r7, #84]	; 0x54
 8009048:	e016      	b.n	8009078 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe fd1f 	bl	8007a92 <get_fat>
 8009054:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009056:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009058:	2b01      	cmp	r3, #1
 800905a:	d802      	bhi.n	8009062 <f_open+0x2de>
 800905c:	2302      	movs	r3, #2
 800905e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009068:	d102      	bne.n	8009070 <f_open+0x2ec>
 800906a:	2301      	movs	r3, #1
 800906c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009070:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009072:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	657b      	str	r3, [r7, #84]	; 0x54
 8009078:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <f_open+0x304>
 8009080:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009082:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009084:	429a      	cmp	r2, r3
 8009086:	d8e0      	bhi.n	800904a <f_open+0x2c6>
				}
				fp->clust = clst;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800908c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d127      	bne.n	80090e6 <f_open+0x362>
 8009096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909c:	2b00      	cmp	r3, #0
 800909e:	d022      	beq.n	80090e6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7fe fcd5 	bl	8007a54 <clust2sect>
 80090aa:	6478      	str	r0, [r7, #68]	; 0x44
 80090ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <f_open+0x336>
						res = FR_INT_ERR;
 80090b2:	2302      	movs	r3, #2
 80090b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80090b8:	e015      	b.n	80090e6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80090ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090bc:	0a5a      	lsrs	r2, r3, #9
 80090be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	7858      	ldrb	r0, [r3, #1]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a1a      	ldr	r2, [r3, #32]
 80090d4:	2301      	movs	r3, #1
 80090d6:	f7fe f913 	bl	8007300 <disk_read>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <f_open+0x362>
 80090e0:	2301      	movs	r3, #1
 80090e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80090e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <f_open+0x370>
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80090f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3760      	adds	r7, #96	; 0x60
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08c      	sub	sp, #48	; 0x30
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f107 0210 	add.w	r2, r7, #16
 800911e:	4611      	mov	r1, r2
 8009120:	4618      	mov	r0, r3
 8009122:	f7ff fdb3 	bl	8008c8c <validate>
 8009126:	4603      	mov	r3, r0
 8009128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800912c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009130:	2b00      	cmp	r3, #0
 8009132:	d107      	bne.n	8009144 <f_write+0x44>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	7d5b      	ldrb	r3, [r3, #21]
 8009138:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800913c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009140:	2b00      	cmp	r3, #0
 8009142:	d002      	beq.n	800914a <f_write+0x4a>
 8009144:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009148:	e14b      	b.n	80093e2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	7d1b      	ldrb	r3, [r3, #20]
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <f_write+0x5a>
 8009156:	2307      	movs	r3, #7
 8009158:	e143      	b.n	80093e2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	429a      	cmp	r2, r3
 8009168:	f080 812d 	bcs.w	80093c6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	699b      	ldr	r3, [r3, #24]
 8009170:	43db      	mvns	r3, r3
 8009172:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009174:	e127      	b.n	80093c6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800917e:	2b00      	cmp	r3, #0
 8009180:	f040 80e3 	bne.w	800934a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	0a5b      	lsrs	r3, r3, #9
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	8952      	ldrh	r2, [r2, #10]
 800918e:	3a01      	subs	r2, #1
 8009190:	4013      	ands	r3, r2
 8009192:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d143      	bne.n	8009222 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10c      	bne.n	80091bc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80091a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d11a      	bne.n	80091e4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	2100      	movs	r1, #0
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe fe64 	bl	8007e80 <create_chain>
 80091b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80091ba:	e013      	b.n	80091e4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	4619      	mov	r1, r3
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7fe fef0 	bl	8007fb0 <clmt_clust>
 80091d0:	62b8      	str	r0, [r7, #40]	; 0x28
 80091d2:	e007      	b.n	80091e4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f7fe fe4f 	bl	8007e80 <create_chain>
 80091e2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 80f2 	beq.w	80093d0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d104      	bne.n	80091fc <f_write+0xfc>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	2202      	movs	r2, #2
 80091f6:	755a      	strb	r2, [r3, #21]
 80091f8:	2302      	movs	r3, #2
 80091fa:	e0f2      	b.n	80093e2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009202:	d104      	bne.n	800920e <f_write+0x10e>
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	755a      	strb	r2, [r3, #21]
 800920a:	2301      	movs	r3, #1
 800920c:	e0e9      	b.n	80093e2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009212:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d102      	bne.n	8009222 <f_write+0x122>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009220:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	7d1b      	ldrb	r3, [r3, #20]
 8009226:	b25b      	sxtb	r3, r3
 8009228:	2b00      	cmp	r3, #0
 800922a:	da18      	bge.n	800925e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	7858      	ldrb	r0, [r3, #1]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a1a      	ldr	r2, [r3, #32]
 800923a:	2301      	movs	r3, #1
 800923c:	f7fe f880 	bl	8007340 <disk_write>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d004      	beq.n	8009250 <f_write+0x150>
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2201      	movs	r2, #1
 800924a:	755a      	strb	r2, [r3, #21]
 800924c:	2301      	movs	r3, #1
 800924e:	e0c8      	b.n	80093e2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	7d1b      	ldrb	r3, [r3, #20]
 8009254:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009258:	b2da      	uxtb	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	69db      	ldr	r3, [r3, #28]
 8009264:	4619      	mov	r1, r3
 8009266:	4610      	mov	r0, r2
 8009268:	f7fe fbf4 	bl	8007a54 <clust2sect>
 800926c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d104      	bne.n	800927e <f_write+0x17e>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2202      	movs	r2, #2
 8009278:	755a      	strb	r2, [r3, #21]
 800927a:	2302      	movs	r3, #2
 800927c:	e0b1      	b.n	80093e2 <f_write+0x2e2>
			sect += csect;
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	69bb      	ldr	r3, [r7, #24]
 8009282:	4413      	add	r3, r2
 8009284:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	0a5b      	lsrs	r3, r3, #9
 800928a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800928c:	6a3b      	ldr	r3, [r7, #32]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d03c      	beq.n	800930c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009292:	69ba      	ldr	r2, [r7, #24]
 8009294:	6a3b      	ldr	r3, [r7, #32]
 8009296:	4413      	add	r3, r2
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	8952      	ldrh	r2, [r2, #10]
 800929c:	4293      	cmp	r3, r2
 800929e:	d905      	bls.n	80092ac <f_write+0x1ac>
					cc = fs->csize - csect;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	895b      	ldrh	r3, [r3, #10]
 80092a4:	461a      	mov	r2, r3
 80092a6:	69bb      	ldr	r3, [r7, #24]
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	7858      	ldrb	r0, [r3, #1]
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	69f9      	ldr	r1, [r7, #28]
 80092b6:	f7fe f843 	bl	8007340 <disk_write>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <f_write+0x1ca>
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	755a      	strb	r2, [r3, #21]
 80092c6:	2301      	movs	r3, #1
 80092c8:	e08b      	b.n	80093e2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1a      	ldr	r2, [r3, #32]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	6a3a      	ldr	r2, [r7, #32]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d915      	bls.n	8009304 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	6a1a      	ldr	r2, [r3, #32]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	1ad3      	subs	r3, r2, r3
 80092e6:	025b      	lsls	r3, r3, #9
 80092e8:	69fa      	ldr	r2, [r7, #28]
 80092ea:	4413      	add	r3, r2
 80092ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092f0:	4619      	mov	r1, r3
 80092f2:	f7fe f8e5 	bl	80074c0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	7d1b      	ldrb	r3, [r3, #20]
 80092fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009304:	6a3b      	ldr	r3, [r7, #32]
 8009306:	025b      	lsls	r3, r3, #9
 8009308:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800930a:	e03f      	b.n	800938c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	429a      	cmp	r2, r3
 8009314:	d016      	beq.n	8009344 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	699a      	ldr	r2, [r3, #24]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800931e:	429a      	cmp	r2, r3
 8009320:	d210      	bcs.n	8009344 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	7858      	ldrb	r0, [r3, #1]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800932c:	2301      	movs	r3, #1
 800932e:	697a      	ldr	r2, [r7, #20]
 8009330:	f7fd ffe6 	bl	8007300 <disk_read>
 8009334:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009336:	2b00      	cmp	r3, #0
 8009338:	d004      	beq.n	8009344 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	755a      	strb	r2, [r3, #21]
 8009340:	2301      	movs	r3, #1
 8009342:	e04e      	b.n	80093e2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	697a      	ldr	r2, [r7, #20]
 8009348:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009352:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	429a      	cmp	r2, r3
 800935e:	d901      	bls.n	8009364 <f_write+0x264>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009372:	4413      	add	r3, r2
 8009374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009376:	69f9      	ldr	r1, [r7, #28]
 8009378:	4618      	mov	r0, r3
 800937a:	f7fe f8a1 	bl	80074c0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	7d1b      	ldrb	r3, [r3, #20]
 8009382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009386:	b2da      	uxtb	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800938c:	69fa      	ldr	r2, [r7, #28]
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	4413      	add	r3, r2
 8009392:	61fb      	str	r3, [r7, #28]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	699a      	ldr	r2, [r3, #24]
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	441a      	add	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	619a      	str	r2, [r3, #24]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	68da      	ldr	r2, [r3, #12]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	699b      	ldr	r3, [r3, #24]
 80093a8:	429a      	cmp	r2, r3
 80093aa:	bf38      	it	cc
 80093ac:	461a      	movcc	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	60da      	str	r2, [r3, #12]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	441a      	add	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f47f aed4 	bne.w	8009176 <f_write+0x76>
 80093ce:	e000      	b.n	80093d2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80093d0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	7d1b      	ldrb	r3, [r3, #20]
 80093d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093da:	b2da      	uxtb	r2, r3
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3730      	adds	r7, #48	; 0x30
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b086      	sub	sp, #24
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f107 0208 	add.w	r2, r7, #8
 80093f8:	4611      	mov	r1, r2
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7ff fc46 	bl	8008c8c <validate>
 8009400:	4603      	mov	r3, r0
 8009402:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d168      	bne.n	80094dc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	7d1b      	ldrb	r3, [r3, #20]
 800940e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009412:	2b00      	cmp	r3, #0
 8009414:	d062      	beq.n	80094dc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7d1b      	ldrb	r3, [r3, #20]
 800941a:	b25b      	sxtb	r3, r3
 800941c:	2b00      	cmp	r3, #0
 800941e:	da15      	bge.n	800944c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	7858      	ldrb	r0, [r3, #1]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1a      	ldr	r2, [r3, #32]
 800942e:	2301      	movs	r3, #1
 8009430:	f7fd ff86 	bl	8007340 <disk_write>
 8009434:	4603      	mov	r3, r0
 8009436:	2b00      	cmp	r3, #0
 8009438:	d001      	beq.n	800943e <f_sync+0x54>
 800943a:	2301      	movs	r3, #1
 800943c:	e04f      	b.n	80094de <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	7d1b      	ldrb	r3, [r3, #20]
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	b2da      	uxtb	r2, r3
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800944c:	f7fd fce8 	bl	8006e20 <get_fattime>
 8009450:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	4619      	mov	r1, r3
 800945a:	4610      	mov	r0, r2
 800945c:	f7fe fa5e 	bl	800791c <move_window>
 8009460:	4603      	mov	r3, r0
 8009462:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009464:	7dfb      	ldrb	r3, [r7, #23]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d138      	bne.n	80094dc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	330b      	adds	r3, #11
 8009474:	781a      	ldrb	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	330b      	adds	r3, #11
 800947a:	f042 0220 	orr.w	r2, r2, #32
 800947e:	b2d2      	uxtb	r2, r2
 8009480:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6818      	ldr	r0, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	461a      	mov	r2, r3
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	f7fe ff69 	bl	8008364 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f103 021c 	add.w	r2, r3, #28
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7fd ffe2 	bl	8007468 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3316      	adds	r3, #22
 80094a8:	6939      	ldr	r1, [r7, #16]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f7fd ffdc 	bl	8007468 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3312      	adds	r3, #18
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fd ffbb 	bl	8007432 <st_word>
					fs->wflag = 1;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2201      	movs	r2, #1
 80094c0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fa57 	bl	8007978 <sync_fs>
 80094ca:	4603      	mov	r3, r0
 80094cc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	7d1b      	ldrb	r3, [r3, #20]
 80094d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094d6:	b2da      	uxtb	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}

080094e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80094e6:	b580      	push	{r7, lr}
 80094e8:	b084      	sub	sp, #16
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff ff7b 	bl	80093ea <f_sync>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d118      	bne.n	8009530 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f107 0208 	add.w	r2, r7, #8
 8009504:	4611      	mov	r1, r2
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fbc0 	bl	8008c8c <validate>
 800950c:	4603      	mov	r3, r0
 800950e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009510:	7bfb      	ldrb	r3, [r7, #15]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10c      	bne.n	8009530 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe f95a 	bl	80077d4 <dec_lock>
 8009520:	4603      	mov	r3, r0
 8009522:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800953c:	b480      	push	{r7}
 800953e:	b087      	sub	sp, #28
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	4613      	mov	r3, r2
 8009548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800954a:	2301      	movs	r3, #1
 800954c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009552:	4b1f      	ldr	r3, [pc, #124]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009554:	7a5b      	ldrb	r3, [r3, #9]
 8009556:	b2db      	uxtb	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	d131      	bne.n	80095c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800955c:	4b1c      	ldr	r3, [pc, #112]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800955e:	7a5b      	ldrb	r3, [r3, #9]
 8009560:	b2db      	uxtb	r3, r3
 8009562:	461a      	mov	r2, r3
 8009564:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009566:	2100      	movs	r1, #0
 8009568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800956a:	4b19      	ldr	r3, [pc, #100]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800956c:	7a5b      	ldrb	r3, [r3, #9]
 800956e:	b2db      	uxtb	r3, r3
 8009570:	4a17      	ldr	r2, [pc, #92]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	4413      	add	r3, r2
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800957a:	4b15      	ldr	r3, [pc, #84]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800957c:	7a5b      	ldrb	r3, [r3, #9]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	461a      	mov	r2, r3
 8009582:	4b13      	ldr	r3, [pc, #76]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009584:	4413      	add	r3, r2
 8009586:	79fa      	ldrb	r2, [r7, #7]
 8009588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800958a:	4b11      	ldr	r3, [pc, #68]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 800958c:	7a5b      	ldrb	r3, [r3, #9]
 800958e:	b2db      	uxtb	r3, r3
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	b2d1      	uxtb	r1, r2
 8009594:	4a0e      	ldr	r2, [pc, #56]	; (80095d0 <FATFS_LinkDriverEx+0x94>)
 8009596:	7251      	strb	r1, [r2, #9]
 8009598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800959a:	7dbb      	ldrb	r3, [r7, #22]
 800959c:	3330      	adds	r3, #48	; 0x30
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	3301      	adds	r3, #1
 80095a8:	223a      	movs	r2, #58	; 0x3a
 80095aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	3302      	adds	r3, #2
 80095b0:	222f      	movs	r2, #47	; 0x2f
 80095b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	3303      	adds	r3, #3
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80095c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	371c      	adds	r7, #28
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	240005a4 	.word	0x240005a4

080095d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b082      	sub	sp, #8
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80095de:	2200      	movs	r2, #0
 80095e0:	6839      	ldr	r1, [r7, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f7ff ffaa 	bl	800953c <FATFS_LinkDriverEx>
 80095e8:	4603      	mov	r3, r0
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
	...

080095f4 <std>:
 80095f4:	2300      	movs	r3, #0
 80095f6:	b510      	push	{r4, lr}
 80095f8:	4604      	mov	r4, r0
 80095fa:	e9c0 3300 	strd	r3, r3, [r0]
 80095fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009602:	6083      	str	r3, [r0, #8]
 8009604:	8181      	strh	r1, [r0, #12]
 8009606:	6643      	str	r3, [r0, #100]	; 0x64
 8009608:	81c2      	strh	r2, [r0, #14]
 800960a:	6183      	str	r3, [r0, #24]
 800960c:	4619      	mov	r1, r3
 800960e:	2208      	movs	r2, #8
 8009610:	305c      	adds	r0, #92	; 0x5c
 8009612:	f000 f9f7 	bl	8009a04 <memset>
 8009616:	4b0d      	ldr	r3, [pc, #52]	; (800964c <std+0x58>)
 8009618:	6263      	str	r3, [r4, #36]	; 0x24
 800961a:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <std+0x5c>)
 800961c:	62a3      	str	r3, [r4, #40]	; 0x28
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <std+0x60>)
 8009620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009622:	4b0d      	ldr	r3, [pc, #52]	; (8009658 <std+0x64>)
 8009624:	6323      	str	r3, [r4, #48]	; 0x30
 8009626:	4b0d      	ldr	r3, [pc, #52]	; (800965c <std+0x68>)
 8009628:	6224      	str	r4, [r4, #32]
 800962a:	429c      	cmp	r4, r3
 800962c:	d006      	beq.n	800963c <std+0x48>
 800962e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009632:	4294      	cmp	r4, r2
 8009634:	d002      	beq.n	800963c <std+0x48>
 8009636:	33d0      	adds	r3, #208	; 0xd0
 8009638:	429c      	cmp	r4, r3
 800963a:	d105      	bne.n	8009648 <std+0x54>
 800963c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009644:	f000 ba56 	b.w	8009af4 <__retarget_lock_init_recursive>
 8009648:	bd10      	pop	{r4, pc}
 800964a:	bf00      	nop
 800964c:	08009855 	.word	0x08009855
 8009650:	08009877 	.word	0x08009877
 8009654:	080098af 	.word	0x080098af
 8009658:	080098d3 	.word	0x080098d3
 800965c:	240005b0 	.word	0x240005b0

08009660 <stdio_exit_handler>:
 8009660:	4a02      	ldr	r2, [pc, #8]	; (800966c <stdio_exit_handler+0xc>)
 8009662:	4903      	ldr	r1, [pc, #12]	; (8009670 <stdio_exit_handler+0x10>)
 8009664:	4803      	ldr	r0, [pc, #12]	; (8009674 <stdio_exit_handler+0x14>)
 8009666:	f000 b869 	b.w	800973c <_fwalk_sglue>
 800966a:	bf00      	nop
 800966c:	24000010 	.word	0x24000010
 8009670:	0800a3a1 	.word	0x0800a3a1
 8009674:	2400001c 	.word	0x2400001c

08009678 <cleanup_stdio>:
 8009678:	6841      	ldr	r1, [r0, #4]
 800967a:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <cleanup_stdio+0x34>)
 800967c:	4299      	cmp	r1, r3
 800967e:	b510      	push	{r4, lr}
 8009680:	4604      	mov	r4, r0
 8009682:	d001      	beq.n	8009688 <cleanup_stdio+0x10>
 8009684:	f000 fe8c 	bl	800a3a0 <_fflush_r>
 8009688:	68a1      	ldr	r1, [r4, #8]
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <cleanup_stdio+0x38>)
 800968c:	4299      	cmp	r1, r3
 800968e:	d002      	beq.n	8009696 <cleanup_stdio+0x1e>
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fe85 	bl	800a3a0 <_fflush_r>
 8009696:	68e1      	ldr	r1, [r4, #12]
 8009698:	4b06      	ldr	r3, [pc, #24]	; (80096b4 <cleanup_stdio+0x3c>)
 800969a:	4299      	cmp	r1, r3
 800969c:	d004      	beq.n	80096a8 <cleanup_stdio+0x30>
 800969e:	4620      	mov	r0, r4
 80096a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a4:	f000 be7c 	b.w	800a3a0 <_fflush_r>
 80096a8:	bd10      	pop	{r4, pc}
 80096aa:	bf00      	nop
 80096ac:	240005b0 	.word	0x240005b0
 80096b0:	24000618 	.word	0x24000618
 80096b4:	24000680 	.word	0x24000680

080096b8 <global_stdio_init.part.0>:
 80096b8:	b510      	push	{r4, lr}
 80096ba:	4b0b      	ldr	r3, [pc, #44]	; (80096e8 <global_stdio_init.part.0+0x30>)
 80096bc:	4c0b      	ldr	r4, [pc, #44]	; (80096ec <global_stdio_init.part.0+0x34>)
 80096be:	4a0c      	ldr	r2, [pc, #48]	; (80096f0 <global_stdio_init.part.0+0x38>)
 80096c0:	601a      	str	r2, [r3, #0]
 80096c2:	4620      	mov	r0, r4
 80096c4:	2200      	movs	r2, #0
 80096c6:	2104      	movs	r1, #4
 80096c8:	f7ff ff94 	bl	80095f4 <std>
 80096cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80096d0:	2201      	movs	r2, #1
 80096d2:	2109      	movs	r1, #9
 80096d4:	f7ff ff8e 	bl	80095f4 <std>
 80096d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80096dc:	2202      	movs	r2, #2
 80096de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096e2:	2112      	movs	r1, #18
 80096e4:	f7ff bf86 	b.w	80095f4 <std>
 80096e8:	240006e8 	.word	0x240006e8
 80096ec:	240005b0 	.word	0x240005b0
 80096f0:	08009661 	.word	0x08009661

080096f4 <__sfp_lock_acquire>:
 80096f4:	4801      	ldr	r0, [pc, #4]	; (80096fc <__sfp_lock_acquire+0x8>)
 80096f6:	f000 b9fe 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 80096fa:	bf00      	nop
 80096fc:	240006f1 	.word	0x240006f1

08009700 <__sfp_lock_release>:
 8009700:	4801      	ldr	r0, [pc, #4]	; (8009708 <__sfp_lock_release+0x8>)
 8009702:	f000 b9f9 	b.w	8009af8 <__retarget_lock_release_recursive>
 8009706:	bf00      	nop
 8009708:	240006f1 	.word	0x240006f1

0800970c <__sinit>:
 800970c:	b510      	push	{r4, lr}
 800970e:	4604      	mov	r4, r0
 8009710:	f7ff fff0 	bl	80096f4 <__sfp_lock_acquire>
 8009714:	6a23      	ldr	r3, [r4, #32]
 8009716:	b11b      	cbz	r3, 8009720 <__sinit+0x14>
 8009718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800971c:	f7ff bff0 	b.w	8009700 <__sfp_lock_release>
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <__sinit+0x28>)
 8009722:	6223      	str	r3, [r4, #32]
 8009724:	4b04      	ldr	r3, [pc, #16]	; (8009738 <__sinit+0x2c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1f5      	bne.n	8009718 <__sinit+0xc>
 800972c:	f7ff ffc4 	bl	80096b8 <global_stdio_init.part.0>
 8009730:	e7f2      	b.n	8009718 <__sinit+0xc>
 8009732:	bf00      	nop
 8009734:	08009679 	.word	0x08009679
 8009738:	240006e8 	.word	0x240006e8

0800973c <_fwalk_sglue>:
 800973c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009740:	4607      	mov	r7, r0
 8009742:	4688      	mov	r8, r1
 8009744:	4614      	mov	r4, r2
 8009746:	2600      	movs	r6, #0
 8009748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800974c:	f1b9 0901 	subs.w	r9, r9, #1
 8009750:	d505      	bpl.n	800975e <_fwalk_sglue+0x22>
 8009752:	6824      	ldr	r4, [r4, #0]
 8009754:	2c00      	cmp	r4, #0
 8009756:	d1f7      	bne.n	8009748 <_fwalk_sglue+0xc>
 8009758:	4630      	mov	r0, r6
 800975a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800975e:	89ab      	ldrh	r3, [r5, #12]
 8009760:	2b01      	cmp	r3, #1
 8009762:	d907      	bls.n	8009774 <_fwalk_sglue+0x38>
 8009764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009768:	3301      	adds	r3, #1
 800976a:	d003      	beq.n	8009774 <_fwalk_sglue+0x38>
 800976c:	4629      	mov	r1, r5
 800976e:	4638      	mov	r0, r7
 8009770:	47c0      	blx	r8
 8009772:	4306      	orrs	r6, r0
 8009774:	3568      	adds	r5, #104	; 0x68
 8009776:	e7e9      	b.n	800974c <_fwalk_sglue+0x10>

08009778 <iprintf>:
 8009778:	b40f      	push	{r0, r1, r2, r3}
 800977a:	b507      	push	{r0, r1, r2, lr}
 800977c:	4906      	ldr	r1, [pc, #24]	; (8009798 <iprintf+0x20>)
 800977e:	ab04      	add	r3, sp, #16
 8009780:	6808      	ldr	r0, [r1, #0]
 8009782:	f853 2b04 	ldr.w	r2, [r3], #4
 8009786:	6881      	ldr	r1, [r0, #8]
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	f000 fad9 	bl	8009d40 <_vfiprintf_r>
 800978e:	b003      	add	sp, #12
 8009790:	f85d eb04 	ldr.w	lr, [sp], #4
 8009794:	b004      	add	sp, #16
 8009796:	4770      	bx	lr
 8009798:	24000068 	.word	0x24000068

0800979c <_puts_r>:
 800979c:	6a03      	ldr	r3, [r0, #32]
 800979e:	b570      	push	{r4, r5, r6, lr}
 80097a0:	6884      	ldr	r4, [r0, #8]
 80097a2:	4605      	mov	r5, r0
 80097a4:	460e      	mov	r6, r1
 80097a6:	b90b      	cbnz	r3, 80097ac <_puts_r+0x10>
 80097a8:	f7ff ffb0 	bl	800970c <__sinit>
 80097ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097ae:	07db      	lsls	r3, r3, #31
 80097b0:	d405      	bmi.n	80097be <_puts_r+0x22>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	0598      	lsls	r0, r3, #22
 80097b6:	d402      	bmi.n	80097be <_puts_r+0x22>
 80097b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097ba:	f000 f99c 	bl	8009af6 <__retarget_lock_acquire_recursive>
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	0719      	lsls	r1, r3, #28
 80097c2:	d513      	bpl.n	80097ec <_puts_r+0x50>
 80097c4:	6923      	ldr	r3, [r4, #16]
 80097c6:	b18b      	cbz	r3, 80097ec <_puts_r+0x50>
 80097c8:	3e01      	subs	r6, #1
 80097ca:	68a3      	ldr	r3, [r4, #8]
 80097cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80097d0:	3b01      	subs	r3, #1
 80097d2:	60a3      	str	r3, [r4, #8]
 80097d4:	b9e9      	cbnz	r1, 8009812 <_puts_r+0x76>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da2e      	bge.n	8009838 <_puts_r+0x9c>
 80097da:	4622      	mov	r2, r4
 80097dc:	210a      	movs	r1, #10
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 f87b 	bl	80098da <__swbuf_r>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d007      	beq.n	80097f8 <_puts_r+0x5c>
 80097e8:	250a      	movs	r5, #10
 80097ea:	e007      	b.n	80097fc <_puts_r+0x60>
 80097ec:	4621      	mov	r1, r4
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 f8b0 	bl	8009954 <__swsetup_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d0e7      	beq.n	80097c8 <_puts_r+0x2c>
 80097f8:	f04f 35ff 	mov.w	r5, #4294967295
 80097fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097fe:	07da      	lsls	r2, r3, #31
 8009800:	d405      	bmi.n	800980e <_puts_r+0x72>
 8009802:	89a3      	ldrh	r3, [r4, #12]
 8009804:	059b      	lsls	r3, r3, #22
 8009806:	d402      	bmi.n	800980e <_puts_r+0x72>
 8009808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800980a:	f000 f975 	bl	8009af8 <__retarget_lock_release_recursive>
 800980e:	4628      	mov	r0, r5
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	2b00      	cmp	r3, #0
 8009814:	da04      	bge.n	8009820 <_puts_r+0x84>
 8009816:	69a2      	ldr	r2, [r4, #24]
 8009818:	429a      	cmp	r2, r3
 800981a:	dc06      	bgt.n	800982a <_puts_r+0x8e>
 800981c:	290a      	cmp	r1, #10
 800981e:	d004      	beq.n	800982a <_puts_r+0x8e>
 8009820:	6823      	ldr	r3, [r4, #0]
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	6022      	str	r2, [r4, #0]
 8009826:	7019      	strb	r1, [r3, #0]
 8009828:	e7cf      	b.n	80097ca <_puts_r+0x2e>
 800982a:	4622      	mov	r2, r4
 800982c:	4628      	mov	r0, r5
 800982e:	f000 f854 	bl	80098da <__swbuf_r>
 8009832:	3001      	adds	r0, #1
 8009834:	d1c9      	bne.n	80097ca <_puts_r+0x2e>
 8009836:	e7df      	b.n	80097f8 <_puts_r+0x5c>
 8009838:	6823      	ldr	r3, [r4, #0]
 800983a:	250a      	movs	r5, #10
 800983c:	1c5a      	adds	r2, r3, #1
 800983e:	6022      	str	r2, [r4, #0]
 8009840:	701d      	strb	r5, [r3, #0]
 8009842:	e7db      	b.n	80097fc <_puts_r+0x60>

08009844 <puts>:
 8009844:	4b02      	ldr	r3, [pc, #8]	; (8009850 <puts+0xc>)
 8009846:	4601      	mov	r1, r0
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	f7ff bfa7 	b.w	800979c <_puts_r>
 800984e:	bf00      	nop
 8009850:	24000068 	.word	0x24000068

08009854 <__sread>:
 8009854:	b510      	push	{r4, lr}
 8009856:	460c      	mov	r4, r1
 8009858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800985c:	f000 f8fc 	bl	8009a58 <_read_r>
 8009860:	2800      	cmp	r0, #0
 8009862:	bfab      	itete	ge
 8009864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009866:	89a3      	ldrhlt	r3, [r4, #12]
 8009868:	181b      	addge	r3, r3, r0
 800986a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800986e:	bfac      	ite	ge
 8009870:	6563      	strge	r3, [r4, #84]	; 0x54
 8009872:	81a3      	strhlt	r3, [r4, #12]
 8009874:	bd10      	pop	{r4, pc}

08009876 <__swrite>:
 8009876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800987a:	461f      	mov	r7, r3
 800987c:	898b      	ldrh	r3, [r1, #12]
 800987e:	05db      	lsls	r3, r3, #23
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	4616      	mov	r6, r2
 8009886:	d505      	bpl.n	8009894 <__swrite+0x1e>
 8009888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800988c:	2302      	movs	r3, #2
 800988e:	2200      	movs	r2, #0
 8009890:	f000 f8d0 	bl	8009a34 <_lseek_r>
 8009894:	89a3      	ldrh	r3, [r4, #12]
 8009896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800989a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800989e:	81a3      	strh	r3, [r4, #12]
 80098a0:	4632      	mov	r2, r6
 80098a2:	463b      	mov	r3, r7
 80098a4:	4628      	mov	r0, r5
 80098a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098aa:	f000 b8e7 	b.w	8009a7c <_write_r>

080098ae <__sseek>:
 80098ae:	b510      	push	{r4, lr}
 80098b0:	460c      	mov	r4, r1
 80098b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b6:	f000 f8bd 	bl	8009a34 <_lseek_r>
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	89a3      	ldrh	r3, [r4, #12]
 80098be:	bf15      	itete	ne
 80098c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80098c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098ca:	81a3      	strheq	r3, [r4, #12]
 80098cc:	bf18      	it	ne
 80098ce:	81a3      	strhne	r3, [r4, #12]
 80098d0:	bd10      	pop	{r4, pc}

080098d2 <__sclose>:
 80098d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d6:	f000 b89d 	b.w	8009a14 <_close_r>

080098da <__swbuf_r>:
 80098da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098dc:	460e      	mov	r6, r1
 80098de:	4614      	mov	r4, r2
 80098e0:	4605      	mov	r5, r0
 80098e2:	b118      	cbz	r0, 80098ec <__swbuf_r+0x12>
 80098e4:	6a03      	ldr	r3, [r0, #32]
 80098e6:	b90b      	cbnz	r3, 80098ec <__swbuf_r+0x12>
 80098e8:	f7ff ff10 	bl	800970c <__sinit>
 80098ec:	69a3      	ldr	r3, [r4, #24]
 80098ee:	60a3      	str	r3, [r4, #8]
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	071a      	lsls	r2, r3, #28
 80098f4:	d525      	bpl.n	8009942 <__swbuf_r+0x68>
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	b31b      	cbz	r3, 8009942 <__swbuf_r+0x68>
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	6922      	ldr	r2, [r4, #16]
 80098fe:	1a98      	subs	r0, r3, r2
 8009900:	6963      	ldr	r3, [r4, #20]
 8009902:	b2f6      	uxtb	r6, r6
 8009904:	4283      	cmp	r3, r0
 8009906:	4637      	mov	r7, r6
 8009908:	dc04      	bgt.n	8009914 <__swbuf_r+0x3a>
 800990a:	4621      	mov	r1, r4
 800990c:	4628      	mov	r0, r5
 800990e:	f000 fd47 	bl	800a3a0 <_fflush_r>
 8009912:	b9e0      	cbnz	r0, 800994e <__swbuf_r+0x74>
 8009914:	68a3      	ldr	r3, [r4, #8]
 8009916:	3b01      	subs	r3, #1
 8009918:	60a3      	str	r3, [r4, #8]
 800991a:	6823      	ldr	r3, [r4, #0]
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	6022      	str	r2, [r4, #0]
 8009920:	701e      	strb	r6, [r3, #0]
 8009922:	6962      	ldr	r2, [r4, #20]
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	429a      	cmp	r2, r3
 8009928:	d004      	beq.n	8009934 <__swbuf_r+0x5a>
 800992a:	89a3      	ldrh	r3, [r4, #12]
 800992c:	07db      	lsls	r3, r3, #31
 800992e:	d506      	bpl.n	800993e <__swbuf_r+0x64>
 8009930:	2e0a      	cmp	r6, #10
 8009932:	d104      	bne.n	800993e <__swbuf_r+0x64>
 8009934:	4621      	mov	r1, r4
 8009936:	4628      	mov	r0, r5
 8009938:	f000 fd32 	bl	800a3a0 <_fflush_r>
 800993c:	b938      	cbnz	r0, 800994e <__swbuf_r+0x74>
 800993e:	4638      	mov	r0, r7
 8009940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009942:	4621      	mov	r1, r4
 8009944:	4628      	mov	r0, r5
 8009946:	f000 f805 	bl	8009954 <__swsetup_r>
 800994a:	2800      	cmp	r0, #0
 800994c:	d0d5      	beq.n	80098fa <__swbuf_r+0x20>
 800994e:	f04f 37ff 	mov.w	r7, #4294967295
 8009952:	e7f4      	b.n	800993e <__swbuf_r+0x64>

08009954 <__swsetup_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <__swsetup_r+0xac>)
 8009958:	4605      	mov	r5, r0
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	460c      	mov	r4, r1
 800995e:	b118      	cbz	r0, 8009968 <__swsetup_r+0x14>
 8009960:	6a03      	ldr	r3, [r0, #32]
 8009962:	b90b      	cbnz	r3, 8009968 <__swsetup_r+0x14>
 8009964:	f7ff fed2 	bl	800970c <__sinit>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800996e:	0718      	lsls	r0, r3, #28
 8009970:	d422      	bmi.n	80099b8 <__swsetup_r+0x64>
 8009972:	06d9      	lsls	r1, r3, #27
 8009974:	d407      	bmi.n	8009986 <__swsetup_r+0x32>
 8009976:	2309      	movs	r3, #9
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e034      	b.n	80099f0 <__swsetup_r+0x9c>
 8009986:	0758      	lsls	r0, r3, #29
 8009988:	d512      	bpl.n	80099b0 <__swsetup_r+0x5c>
 800998a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800998c:	b141      	cbz	r1, 80099a0 <__swsetup_r+0x4c>
 800998e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009992:	4299      	cmp	r1, r3
 8009994:	d002      	beq.n	800999c <__swsetup_r+0x48>
 8009996:	4628      	mov	r0, r5
 8009998:	f000 f8b0 	bl	8009afc <_free_r>
 800999c:	2300      	movs	r3, #0
 800999e:	6363      	str	r3, [r4, #52]	; 0x34
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	2300      	movs	r3, #0
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f043 0308 	orr.w	r3, r3, #8
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b94b      	cbnz	r3, 80099d0 <__swsetup_r+0x7c>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c6:	d003      	beq.n	80099d0 <__swsetup_r+0x7c>
 80099c8:	4621      	mov	r1, r4
 80099ca:	4628      	mov	r0, r5
 80099cc:	f000 fd36 	bl	800a43c <__smakebuf_r>
 80099d0:	89a0      	ldrh	r0, [r4, #12]
 80099d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099d6:	f010 0301 	ands.w	r3, r0, #1
 80099da:	d00a      	beq.n	80099f2 <__swsetup_r+0x9e>
 80099dc:	2300      	movs	r3, #0
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	6963      	ldr	r3, [r4, #20]
 80099e2:	425b      	negs	r3, r3
 80099e4:	61a3      	str	r3, [r4, #24]
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	b943      	cbnz	r3, 80099fc <__swsetup_r+0xa8>
 80099ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099ee:	d1c4      	bne.n	800997a <__swsetup_r+0x26>
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	0781      	lsls	r1, r0, #30
 80099f4:	bf58      	it	pl
 80099f6:	6963      	ldrpl	r3, [r4, #20]
 80099f8:	60a3      	str	r3, [r4, #8]
 80099fa:	e7f4      	b.n	80099e6 <__swsetup_r+0x92>
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7f7      	b.n	80099f0 <__swsetup_r+0x9c>
 8009a00:	24000068 	.word	0x24000068

08009a04 <memset>:
 8009a04:	4402      	add	r2, r0
 8009a06:	4603      	mov	r3, r0
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d100      	bne.n	8009a0e <memset+0xa>
 8009a0c:	4770      	bx	lr
 8009a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a12:	e7f9      	b.n	8009a08 <memset+0x4>

08009a14 <_close_r>:
 8009a14:	b538      	push	{r3, r4, r5, lr}
 8009a16:	4d06      	ldr	r5, [pc, #24]	; (8009a30 <_close_r+0x1c>)
 8009a18:	2300      	movs	r3, #0
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	4608      	mov	r0, r1
 8009a1e:	602b      	str	r3, [r5, #0]
 8009a20:	f7f6 ff9b 	bl	800095a <_close>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_close_r+0x1a>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_close_r+0x1a>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	240006ec 	.word	0x240006ec

08009a34 <_lseek_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	; (8009a54 <_lseek_r+0x20>)
 8009a38:	4604      	mov	r4, r0
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	f7f6 ffb0 	bl	80009a8 <_lseek>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_lseek_r+0x1e>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_lseek_r+0x1e>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	240006ec 	.word	0x240006ec

08009a58 <_read_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	; (8009a78 <_read_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f6 ff3e 	bl	80008e8 <_read>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_read_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_read_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	240006ec 	.word	0x240006ec

08009a7c <_write_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_write_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f6 ff49 	bl	8000922 <_write>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_write_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_write_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	240006ec 	.word	0x240006ec

08009aa0 <__errno>:
 8009aa0:	4b01      	ldr	r3, [pc, #4]	; (8009aa8 <__errno+0x8>)
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	24000068 	.word	0x24000068

08009aac <__libc_init_array>:
 8009aac:	b570      	push	{r4, r5, r6, lr}
 8009aae:	4d0d      	ldr	r5, [pc, #52]	; (8009ae4 <__libc_init_array+0x38>)
 8009ab0:	4c0d      	ldr	r4, [pc, #52]	; (8009ae8 <__libc_init_array+0x3c>)
 8009ab2:	1b64      	subs	r4, r4, r5
 8009ab4:	10a4      	asrs	r4, r4, #2
 8009ab6:	2600      	movs	r6, #0
 8009ab8:	42a6      	cmp	r6, r4
 8009aba:	d109      	bne.n	8009ad0 <__libc_init_array+0x24>
 8009abc:	4d0b      	ldr	r5, [pc, #44]	; (8009aec <__libc_init_array+0x40>)
 8009abe:	4c0c      	ldr	r4, [pc, #48]	; (8009af0 <__libc_init_array+0x44>)
 8009ac0:	f000 fd2a 	bl	800a518 <_init>
 8009ac4:	1b64      	subs	r4, r4, r5
 8009ac6:	10a4      	asrs	r4, r4, #2
 8009ac8:	2600      	movs	r6, #0
 8009aca:	42a6      	cmp	r6, r4
 8009acc:	d105      	bne.n	8009ada <__libc_init_array+0x2e>
 8009ace:	bd70      	pop	{r4, r5, r6, pc}
 8009ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad4:	4798      	blx	r3
 8009ad6:	3601      	adds	r6, #1
 8009ad8:	e7ee      	b.n	8009ab8 <__libc_init_array+0xc>
 8009ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ade:	4798      	blx	r3
 8009ae0:	3601      	adds	r6, #1
 8009ae2:	e7f2      	b.n	8009aca <__libc_init_array+0x1e>
 8009ae4:	0800a6fc 	.word	0x0800a6fc
 8009ae8:	0800a6fc 	.word	0x0800a6fc
 8009aec:	0800a6fc 	.word	0x0800a6fc
 8009af0:	0800a700 	.word	0x0800a700

08009af4 <__retarget_lock_init_recursive>:
 8009af4:	4770      	bx	lr

08009af6 <__retarget_lock_acquire_recursive>:
 8009af6:	4770      	bx	lr

08009af8 <__retarget_lock_release_recursive>:
 8009af8:	4770      	bx	lr
	...

08009afc <_free_r>:
 8009afc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009afe:	2900      	cmp	r1, #0
 8009b00:	d044      	beq.n	8009b8c <_free_r+0x90>
 8009b02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b06:	9001      	str	r0, [sp, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b0e:	bfb8      	it	lt
 8009b10:	18e4      	addlt	r4, r4, r3
 8009b12:	f000 f8df 	bl	8009cd4 <__malloc_lock>
 8009b16:	4a1e      	ldr	r2, [pc, #120]	; (8009b90 <_free_r+0x94>)
 8009b18:	9801      	ldr	r0, [sp, #4]
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	b933      	cbnz	r3, 8009b2c <_free_r+0x30>
 8009b1e:	6063      	str	r3, [r4, #4]
 8009b20:	6014      	str	r4, [r2, #0]
 8009b22:	b003      	add	sp, #12
 8009b24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b28:	f000 b8da 	b.w	8009ce0 <__malloc_unlock>
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d908      	bls.n	8009b42 <_free_r+0x46>
 8009b30:	6825      	ldr	r5, [r4, #0]
 8009b32:	1961      	adds	r1, r4, r5
 8009b34:	428b      	cmp	r3, r1
 8009b36:	bf01      	itttt	eq
 8009b38:	6819      	ldreq	r1, [r3, #0]
 8009b3a:	685b      	ldreq	r3, [r3, #4]
 8009b3c:	1949      	addeq	r1, r1, r5
 8009b3e:	6021      	streq	r1, [r4, #0]
 8009b40:	e7ed      	b.n	8009b1e <_free_r+0x22>
 8009b42:	461a      	mov	r2, r3
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	b10b      	cbz	r3, 8009b4c <_free_r+0x50>
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	d9fa      	bls.n	8009b42 <_free_r+0x46>
 8009b4c:	6811      	ldr	r1, [r2, #0]
 8009b4e:	1855      	adds	r5, r2, r1
 8009b50:	42a5      	cmp	r5, r4
 8009b52:	d10b      	bne.n	8009b6c <_free_r+0x70>
 8009b54:	6824      	ldr	r4, [r4, #0]
 8009b56:	4421      	add	r1, r4
 8009b58:	1854      	adds	r4, r2, r1
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6011      	str	r1, [r2, #0]
 8009b5e:	d1e0      	bne.n	8009b22 <_free_r+0x26>
 8009b60:	681c      	ldr	r4, [r3, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6053      	str	r3, [r2, #4]
 8009b66:	440c      	add	r4, r1
 8009b68:	6014      	str	r4, [r2, #0]
 8009b6a:	e7da      	b.n	8009b22 <_free_r+0x26>
 8009b6c:	d902      	bls.n	8009b74 <_free_r+0x78>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6003      	str	r3, [r0, #0]
 8009b72:	e7d6      	b.n	8009b22 <_free_r+0x26>
 8009b74:	6825      	ldr	r5, [r4, #0]
 8009b76:	1961      	adds	r1, r4, r5
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	bf04      	itt	eq
 8009b7c:	6819      	ldreq	r1, [r3, #0]
 8009b7e:	685b      	ldreq	r3, [r3, #4]
 8009b80:	6063      	str	r3, [r4, #4]
 8009b82:	bf04      	itt	eq
 8009b84:	1949      	addeq	r1, r1, r5
 8009b86:	6021      	streq	r1, [r4, #0]
 8009b88:	6054      	str	r4, [r2, #4]
 8009b8a:	e7ca      	b.n	8009b22 <_free_r+0x26>
 8009b8c:	b003      	add	sp, #12
 8009b8e:	bd30      	pop	{r4, r5, pc}
 8009b90:	240006f4 	.word	0x240006f4

08009b94 <sbrk_aligned>:
 8009b94:	b570      	push	{r4, r5, r6, lr}
 8009b96:	4e0e      	ldr	r6, [pc, #56]	; (8009bd0 <sbrk_aligned+0x3c>)
 8009b98:	460c      	mov	r4, r1
 8009b9a:	6831      	ldr	r1, [r6, #0]
 8009b9c:	4605      	mov	r5, r0
 8009b9e:	b911      	cbnz	r1, 8009ba6 <sbrk_aligned+0x12>
 8009ba0:	f000 fcaa 	bl	800a4f8 <_sbrk_r>
 8009ba4:	6030      	str	r0, [r6, #0]
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f000 fca5 	bl	800a4f8 <_sbrk_r>
 8009bae:	1c43      	adds	r3, r0, #1
 8009bb0:	d00a      	beq.n	8009bc8 <sbrk_aligned+0x34>
 8009bb2:	1cc4      	adds	r4, r0, #3
 8009bb4:	f024 0403 	bic.w	r4, r4, #3
 8009bb8:	42a0      	cmp	r0, r4
 8009bba:	d007      	beq.n	8009bcc <sbrk_aligned+0x38>
 8009bbc:	1a21      	subs	r1, r4, r0
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f000 fc9a 	bl	800a4f8 <_sbrk_r>
 8009bc4:	3001      	adds	r0, #1
 8009bc6:	d101      	bne.n	8009bcc <sbrk_aligned+0x38>
 8009bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bcc:	4620      	mov	r0, r4
 8009bce:	bd70      	pop	{r4, r5, r6, pc}
 8009bd0:	240006f8 	.word	0x240006f8

08009bd4 <_malloc_r>:
 8009bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	1ccd      	adds	r5, r1, #3
 8009bda:	f025 0503 	bic.w	r5, r5, #3
 8009bde:	3508      	adds	r5, #8
 8009be0:	2d0c      	cmp	r5, #12
 8009be2:	bf38      	it	cc
 8009be4:	250c      	movcc	r5, #12
 8009be6:	2d00      	cmp	r5, #0
 8009be8:	4607      	mov	r7, r0
 8009bea:	db01      	blt.n	8009bf0 <_malloc_r+0x1c>
 8009bec:	42a9      	cmp	r1, r5
 8009bee:	d905      	bls.n	8009bfc <_malloc_r+0x28>
 8009bf0:	230c      	movs	r3, #12
 8009bf2:	603b      	str	r3, [r7, #0]
 8009bf4:	2600      	movs	r6, #0
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cd0 <_malloc_r+0xfc>
 8009c00:	f000 f868 	bl	8009cd4 <__malloc_lock>
 8009c04:	f8d8 3000 	ldr.w	r3, [r8]
 8009c08:	461c      	mov	r4, r3
 8009c0a:	bb5c      	cbnz	r4, 8009c64 <_malloc_r+0x90>
 8009c0c:	4629      	mov	r1, r5
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f7ff ffc0 	bl	8009b94 <sbrk_aligned>
 8009c14:	1c43      	adds	r3, r0, #1
 8009c16:	4604      	mov	r4, r0
 8009c18:	d155      	bne.n	8009cc6 <_malloc_r+0xf2>
 8009c1a:	f8d8 4000 	ldr.w	r4, [r8]
 8009c1e:	4626      	mov	r6, r4
 8009c20:	2e00      	cmp	r6, #0
 8009c22:	d145      	bne.n	8009cb0 <_malloc_r+0xdc>
 8009c24:	2c00      	cmp	r4, #0
 8009c26:	d048      	beq.n	8009cba <_malloc_r+0xe6>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4638      	mov	r0, r7
 8009c2e:	eb04 0903 	add.w	r9, r4, r3
 8009c32:	f000 fc61 	bl	800a4f8 <_sbrk_r>
 8009c36:	4581      	cmp	r9, r0
 8009c38:	d13f      	bne.n	8009cba <_malloc_r+0xe6>
 8009c3a:	6821      	ldr	r1, [r4, #0]
 8009c3c:	1a6d      	subs	r5, r5, r1
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4638      	mov	r0, r7
 8009c42:	f7ff ffa7 	bl	8009b94 <sbrk_aligned>
 8009c46:	3001      	adds	r0, #1
 8009c48:	d037      	beq.n	8009cba <_malloc_r+0xe6>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	442b      	add	r3, r5
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	f8d8 3000 	ldr.w	r3, [r8]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d038      	beq.n	8009cca <_malloc_r+0xf6>
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	42a2      	cmp	r2, r4
 8009c5c:	d12b      	bne.n	8009cb6 <_malloc_r+0xe2>
 8009c5e:	2200      	movs	r2, #0
 8009c60:	605a      	str	r2, [r3, #4]
 8009c62:	e00f      	b.n	8009c84 <_malloc_r+0xb0>
 8009c64:	6822      	ldr	r2, [r4, #0]
 8009c66:	1b52      	subs	r2, r2, r5
 8009c68:	d41f      	bmi.n	8009caa <_malloc_r+0xd6>
 8009c6a:	2a0b      	cmp	r2, #11
 8009c6c:	d917      	bls.n	8009c9e <_malloc_r+0xca>
 8009c6e:	1961      	adds	r1, r4, r5
 8009c70:	42a3      	cmp	r3, r4
 8009c72:	6025      	str	r5, [r4, #0]
 8009c74:	bf18      	it	ne
 8009c76:	6059      	strne	r1, [r3, #4]
 8009c78:	6863      	ldr	r3, [r4, #4]
 8009c7a:	bf08      	it	eq
 8009c7c:	f8c8 1000 	streq.w	r1, [r8]
 8009c80:	5162      	str	r2, [r4, r5]
 8009c82:	604b      	str	r3, [r1, #4]
 8009c84:	4638      	mov	r0, r7
 8009c86:	f104 060b 	add.w	r6, r4, #11
 8009c8a:	f000 f829 	bl	8009ce0 <__malloc_unlock>
 8009c8e:	f026 0607 	bic.w	r6, r6, #7
 8009c92:	1d23      	adds	r3, r4, #4
 8009c94:	1af2      	subs	r2, r6, r3
 8009c96:	d0ae      	beq.n	8009bf6 <_malloc_r+0x22>
 8009c98:	1b9b      	subs	r3, r3, r6
 8009c9a:	50a3      	str	r3, [r4, r2]
 8009c9c:	e7ab      	b.n	8009bf6 <_malloc_r+0x22>
 8009c9e:	42a3      	cmp	r3, r4
 8009ca0:	6862      	ldr	r2, [r4, #4]
 8009ca2:	d1dd      	bne.n	8009c60 <_malloc_r+0x8c>
 8009ca4:	f8c8 2000 	str.w	r2, [r8]
 8009ca8:	e7ec      	b.n	8009c84 <_malloc_r+0xb0>
 8009caa:	4623      	mov	r3, r4
 8009cac:	6864      	ldr	r4, [r4, #4]
 8009cae:	e7ac      	b.n	8009c0a <_malloc_r+0x36>
 8009cb0:	4634      	mov	r4, r6
 8009cb2:	6876      	ldr	r6, [r6, #4]
 8009cb4:	e7b4      	b.n	8009c20 <_malloc_r+0x4c>
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	e7cc      	b.n	8009c54 <_malloc_r+0x80>
 8009cba:	230c      	movs	r3, #12
 8009cbc:	603b      	str	r3, [r7, #0]
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f000 f80e 	bl	8009ce0 <__malloc_unlock>
 8009cc4:	e797      	b.n	8009bf6 <_malloc_r+0x22>
 8009cc6:	6025      	str	r5, [r4, #0]
 8009cc8:	e7dc      	b.n	8009c84 <_malloc_r+0xb0>
 8009cca:	605b      	str	r3, [r3, #4]
 8009ccc:	deff      	udf	#255	; 0xff
 8009cce:	bf00      	nop
 8009cd0:	240006f4 	.word	0x240006f4

08009cd4 <__malloc_lock>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__malloc_lock+0x8>)
 8009cd6:	f7ff bf0e 	b.w	8009af6 <__retarget_lock_acquire_recursive>
 8009cda:	bf00      	nop
 8009cdc:	240006f0 	.word	0x240006f0

08009ce0 <__malloc_unlock>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	; (8009ce8 <__malloc_unlock+0x8>)
 8009ce2:	f7ff bf09 	b.w	8009af8 <__retarget_lock_release_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	240006f0 	.word	0x240006f0

08009cec <__sfputc_r>:
 8009cec:	6893      	ldr	r3, [r2, #8]
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	b410      	push	{r4}
 8009cf4:	6093      	str	r3, [r2, #8]
 8009cf6:	da08      	bge.n	8009d0a <__sfputc_r+0x1e>
 8009cf8:	6994      	ldr	r4, [r2, #24]
 8009cfa:	42a3      	cmp	r3, r4
 8009cfc:	db01      	blt.n	8009d02 <__sfputc_r+0x16>
 8009cfe:	290a      	cmp	r1, #10
 8009d00:	d103      	bne.n	8009d0a <__sfputc_r+0x1e>
 8009d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d06:	f7ff bde8 	b.w	80098da <__swbuf_r>
 8009d0a:	6813      	ldr	r3, [r2, #0]
 8009d0c:	1c58      	adds	r0, r3, #1
 8009d0e:	6010      	str	r0, [r2, #0]
 8009d10:	7019      	strb	r1, [r3, #0]
 8009d12:	4608      	mov	r0, r1
 8009d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <__sfputs_r>:
 8009d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d1c:	4606      	mov	r6, r0
 8009d1e:	460f      	mov	r7, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	18d5      	adds	r5, r2, r3
 8009d24:	42ac      	cmp	r4, r5
 8009d26:	d101      	bne.n	8009d2c <__sfputs_r+0x12>
 8009d28:	2000      	movs	r0, #0
 8009d2a:	e007      	b.n	8009d3c <__sfputs_r+0x22>
 8009d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d30:	463a      	mov	r2, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	f7ff ffda 	bl	8009cec <__sfputc_r>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d1f3      	bne.n	8009d24 <__sfputs_r+0xa>
 8009d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d40 <_vfiprintf_r>:
 8009d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d44:	460d      	mov	r5, r1
 8009d46:	b09d      	sub	sp, #116	; 0x74
 8009d48:	4614      	mov	r4, r2
 8009d4a:	4698      	mov	r8, r3
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	b118      	cbz	r0, 8009d58 <_vfiprintf_r+0x18>
 8009d50:	6a03      	ldr	r3, [r0, #32]
 8009d52:	b90b      	cbnz	r3, 8009d58 <_vfiprintf_r+0x18>
 8009d54:	f7ff fcda 	bl	800970c <__sinit>
 8009d58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d5a:	07d9      	lsls	r1, r3, #31
 8009d5c:	d405      	bmi.n	8009d6a <_vfiprintf_r+0x2a>
 8009d5e:	89ab      	ldrh	r3, [r5, #12]
 8009d60:	059a      	lsls	r2, r3, #22
 8009d62:	d402      	bmi.n	8009d6a <_vfiprintf_r+0x2a>
 8009d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d66:	f7ff fec6 	bl	8009af6 <__retarget_lock_acquire_recursive>
 8009d6a:	89ab      	ldrh	r3, [r5, #12]
 8009d6c:	071b      	lsls	r3, r3, #28
 8009d6e:	d501      	bpl.n	8009d74 <_vfiprintf_r+0x34>
 8009d70:	692b      	ldr	r3, [r5, #16]
 8009d72:	b99b      	cbnz	r3, 8009d9c <_vfiprintf_r+0x5c>
 8009d74:	4629      	mov	r1, r5
 8009d76:	4630      	mov	r0, r6
 8009d78:	f7ff fdec 	bl	8009954 <__swsetup_r>
 8009d7c:	b170      	cbz	r0, 8009d9c <_vfiprintf_r+0x5c>
 8009d7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d80:	07dc      	lsls	r4, r3, #31
 8009d82:	d504      	bpl.n	8009d8e <_vfiprintf_r+0x4e>
 8009d84:	f04f 30ff 	mov.w	r0, #4294967295
 8009d88:	b01d      	add	sp, #116	; 0x74
 8009d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	0598      	lsls	r0, r3, #22
 8009d92:	d4f7      	bmi.n	8009d84 <_vfiprintf_r+0x44>
 8009d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d96:	f7ff feaf 	bl	8009af8 <__retarget_lock_release_recursive>
 8009d9a:	e7f3      	b.n	8009d84 <_vfiprintf_r+0x44>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009da0:	2320      	movs	r3, #32
 8009da2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009da6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009daa:	2330      	movs	r3, #48	; 0x30
 8009dac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f60 <_vfiprintf_r+0x220>
 8009db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db4:	f04f 0901 	mov.w	r9, #1
 8009db8:	4623      	mov	r3, r4
 8009dba:	469a      	mov	sl, r3
 8009dbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dc0:	b10a      	cbz	r2, 8009dc6 <_vfiprintf_r+0x86>
 8009dc2:	2a25      	cmp	r2, #37	; 0x25
 8009dc4:	d1f9      	bne.n	8009dba <_vfiprintf_r+0x7a>
 8009dc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009dca:	d00b      	beq.n	8009de4 <_vfiprintf_r+0xa4>
 8009dcc:	465b      	mov	r3, fp
 8009dce:	4622      	mov	r2, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f7ff ffa1 	bl	8009d1a <__sfputs_r>
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f000 80a9 	beq.w	8009f30 <_vfiprintf_r+0x1f0>
 8009dde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009de0:	445a      	add	r2, fp
 8009de2:	9209      	str	r2, [sp, #36]	; 0x24
 8009de4:	f89a 3000 	ldrb.w	r3, [sl]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 80a1 	beq.w	8009f30 <_vfiprintf_r+0x1f0>
 8009dee:	2300      	movs	r3, #0
 8009df0:	f04f 32ff 	mov.w	r2, #4294967295
 8009df4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009df8:	f10a 0a01 	add.w	sl, sl, #1
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e04:	931a      	str	r3, [sp, #104]	; 0x68
 8009e06:	4654      	mov	r4, sl
 8009e08:	2205      	movs	r2, #5
 8009e0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e0e:	4854      	ldr	r0, [pc, #336]	; (8009f60 <_vfiprintf_r+0x220>)
 8009e10:	f7f6 fa86 	bl	8000320 <memchr>
 8009e14:	9a04      	ldr	r2, [sp, #16]
 8009e16:	b9d8      	cbnz	r0, 8009e50 <_vfiprintf_r+0x110>
 8009e18:	06d1      	lsls	r1, r2, #27
 8009e1a:	bf44      	itt	mi
 8009e1c:	2320      	movmi	r3, #32
 8009e1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e22:	0713      	lsls	r3, r2, #28
 8009e24:	bf44      	itt	mi
 8009e26:	232b      	movmi	r3, #43	; 0x2b
 8009e28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009e30:	2b2a      	cmp	r3, #42	; 0x2a
 8009e32:	d015      	beq.n	8009e60 <_vfiprintf_r+0x120>
 8009e34:	9a07      	ldr	r2, [sp, #28]
 8009e36:	4654      	mov	r4, sl
 8009e38:	2000      	movs	r0, #0
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4621      	mov	r1, r4
 8009e40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e44:	3b30      	subs	r3, #48	; 0x30
 8009e46:	2b09      	cmp	r3, #9
 8009e48:	d94d      	bls.n	8009ee6 <_vfiprintf_r+0x1a6>
 8009e4a:	b1b0      	cbz	r0, 8009e7a <_vfiprintf_r+0x13a>
 8009e4c:	9207      	str	r2, [sp, #28]
 8009e4e:	e014      	b.n	8009e7a <_vfiprintf_r+0x13a>
 8009e50:	eba0 0308 	sub.w	r3, r0, r8
 8009e54:	fa09 f303 	lsl.w	r3, r9, r3
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	9304      	str	r3, [sp, #16]
 8009e5c:	46a2      	mov	sl, r4
 8009e5e:	e7d2      	b.n	8009e06 <_vfiprintf_r+0xc6>
 8009e60:	9b03      	ldr	r3, [sp, #12]
 8009e62:	1d19      	adds	r1, r3, #4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	bfbb      	ittet	lt
 8009e6c:	425b      	neglt	r3, r3
 8009e6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e72:	9307      	strge	r3, [sp, #28]
 8009e74:	9307      	strlt	r3, [sp, #28]
 8009e76:	bfb8      	it	lt
 8009e78:	9204      	strlt	r2, [sp, #16]
 8009e7a:	7823      	ldrb	r3, [r4, #0]
 8009e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e7e:	d10c      	bne.n	8009e9a <_vfiprintf_r+0x15a>
 8009e80:	7863      	ldrb	r3, [r4, #1]
 8009e82:	2b2a      	cmp	r3, #42	; 0x2a
 8009e84:	d134      	bne.n	8009ef0 <_vfiprintf_r+0x1b0>
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	1d1a      	adds	r2, r3, #4
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	9203      	str	r2, [sp, #12]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bfb8      	it	lt
 8009e92:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e96:	3402      	adds	r4, #2
 8009e98:	9305      	str	r3, [sp, #20]
 8009e9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f70 <_vfiprintf_r+0x230>
 8009e9e:	7821      	ldrb	r1, [r4, #0]
 8009ea0:	2203      	movs	r2, #3
 8009ea2:	4650      	mov	r0, sl
 8009ea4:	f7f6 fa3c 	bl	8000320 <memchr>
 8009ea8:	b138      	cbz	r0, 8009eba <_vfiprintf_r+0x17a>
 8009eaa:	9b04      	ldr	r3, [sp, #16]
 8009eac:	eba0 000a 	sub.w	r0, r0, sl
 8009eb0:	2240      	movs	r2, #64	; 0x40
 8009eb2:	4082      	lsls	r2, r0
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	3401      	adds	r4, #1
 8009eb8:	9304      	str	r3, [sp, #16]
 8009eba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebe:	4829      	ldr	r0, [pc, #164]	; (8009f64 <_vfiprintf_r+0x224>)
 8009ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ec4:	2206      	movs	r2, #6
 8009ec6:	f7f6 fa2b 	bl	8000320 <memchr>
 8009eca:	2800      	cmp	r0, #0
 8009ecc:	d03f      	beq.n	8009f4e <_vfiprintf_r+0x20e>
 8009ece:	4b26      	ldr	r3, [pc, #152]	; (8009f68 <_vfiprintf_r+0x228>)
 8009ed0:	bb1b      	cbnz	r3, 8009f1a <_vfiprintf_r+0x1da>
 8009ed2:	9b03      	ldr	r3, [sp, #12]
 8009ed4:	3307      	adds	r3, #7
 8009ed6:	f023 0307 	bic.w	r3, r3, #7
 8009eda:	3308      	adds	r3, #8
 8009edc:	9303      	str	r3, [sp, #12]
 8009ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ee0:	443b      	add	r3, r7
 8009ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee4:	e768      	b.n	8009db8 <_vfiprintf_r+0x78>
 8009ee6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009eea:	460c      	mov	r4, r1
 8009eec:	2001      	movs	r0, #1
 8009eee:	e7a6      	b.n	8009e3e <_vfiprintf_r+0xfe>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	3401      	adds	r4, #1
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	f04f 0c0a 	mov.w	ip, #10
 8009efc:	4620      	mov	r0, r4
 8009efe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f02:	3a30      	subs	r2, #48	; 0x30
 8009f04:	2a09      	cmp	r2, #9
 8009f06:	d903      	bls.n	8009f10 <_vfiprintf_r+0x1d0>
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d0c6      	beq.n	8009e9a <_vfiprintf_r+0x15a>
 8009f0c:	9105      	str	r1, [sp, #20]
 8009f0e:	e7c4      	b.n	8009e9a <_vfiprintf_r+0x15a>
 8009f10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f14:	4604      	mov	r4, r0
 8009f16:	2301      	movs	r3, #1
 8009f18:	e7f0      	b.n	8009efc <_vfiprintf_r+0x1bc>
 8009f1a:	ab03      	add	r3, sp, #12
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	462a      	mov	r2, r5
 8009f20:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <_vfiprintf_r+0x22c>)
 8009f22:	a904      	add	r1, sp, #16
 8009f24:	4630      	mov	r0, r6
 8009f26:	f3af 8000 	nop.w
 8009f2a:	4607      	mov	r7, r0
 8009f2c:	1c78      	adds	r0, r7, #1
 8009f2e:	d1d6      	bne.n	8009ede <_vfiprintf_r+0x19e>
 8009f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f32:	07d9      	lsls	r1, r3, #31
 8009f34:	d405      	bmi.n	8009f42 <_vfiprintf_r+0x202>
 8009f36:	89ab      	ldrh	r3, [r5, #12]
 8009f38:	059a      	lsls	r2, r3, #22
 8009f3a:	d402      	bmi.n	8009f42 <_vfiprintf_r+0x202>
 8009f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f3e:	f7ff fddb 	bl	8009af8 <__retarget_lock_release_recursive>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af1d 	bmi.w	8009d84 <_vfiprintf_r+0x44>
 8009f4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f4c:	e71c      	b.n	8009d88 <_vfiprintf_r+0x48>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <_vfiprintf_r+0x22c>)
 8009f56:	a904      	add	r1, sp, #16
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f879 	bl	800a050 <_printf_i>
 8009f5e:	e7e4      	b.n	8009f2a <_vfiprintf_r+0x1ea>
 8009f60:	0800a6c8 	.word	0x0800a6c8
 8009f64:	0800a6d2 	.word	0x0800a6d2
 8009f68:	00000000 	.word	0x00000000
 8009f6c:	08009d1b 	.word	0x08009d1b
 8009f70:	0800a6ce 	.word	0x0800a6ce

08009f74 <_printf_common>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	4616      	mov	r6, r2
 8009f7a:	4699      	mov	r9, r3
 8009f7c:	688a      	ldr	r2, [r1, #8]
 8009f7e:	690b      	ldr	r3, [r1, #16]
 8009f80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	bfb8      	it	lt
 8009f88:	4613      	movlt	r3, r2
 8009f8a:	6033      	str	r3, [r6, #0]
 8009f8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f90:	4607      	mov	r7, r0
 8009f92:	460c      	mov	r4, r1
 8009f94:	b10a      	cbz	r2, 8009f9a <_printf_common+0x26>
 8009f96:	3301      	adds	r3, #1
 8009f98:	6033      	str	r3, [r6, #0]
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	0699      	lsls	r1, r3, #26
 8009f9e:	bf42      	ittt	mi
 8009fa0:	6833      	ldrmi	r3, [r6, #0]
 8009fa2:	3302      	addmi	r3, #2
 8009fa4:	6033      	strmi	r3, [r6, #0]
 8009fa6:	6825      	ldr	r5, [r4, #0]
 8009fa8:	f015 0506 	ands.w	r5, r5, #6
 8009fac:	d106      	bne.n	8009fbc <_printf_common+0x48>
 8009fae:	f104 0a19 	add.w	sl, r4, #25
 8009fb2:	68e3      	ldr	r3, [r4, #12]
 8009fb4:	6832      	ldr	r2, [r6, #0]
 8009fb6:	1a9b      	subs	r3, r3, r2
 8009fb8:	42ab      	cmp	r3, r5
 8009fba:	dc26      	bgt.n	800a00a <_printf_common+0x96>
 8009fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fc0:	1e13      	subs	r3, r2, #0
 8009fc2:	6822      	ldr	r2, [r4, #0]
 8009fc4:	bf18      	it	ne
 8009fc6:	2301      	movne	r3, #1
 8009fc8:	0692      	lsls	r2, r2, #26
 8009fca:	d42b      	bmi.n	800a024 <_printf_common+0xb0>
 8009fcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fd0:	4649      	mov	r1, r9
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	47c0      	blx	r8
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d01e      	beq.n	800a018 <_printf_common+0xa4>
 8009fda:	6823      	ldr	r3, [r4, #0]
 8009fdc:	6922      	ldr	r2, [r4, #16]
 8009fde:	f003 0306 	and.w	r3, r3, #6
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	bf02      	ittt	eq
 8009fe6:	68e5      	ldreq	r5, [r4, #12]
 8009fe8:	6833      	ldreq	r3, [r6, #0]
 8009fea:	1aed      	subeq	r5, r5, r3
 8009fec:	68a3      	ldr	r3, [r4, #8]
 8009fee:	bf0c      	ite	eq
 8009ff0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff4:	2500      	movne	r5, #0
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	bfc4      	itt	gt
 8009ffa:	1a9b      	subgt	r3, r3, r2
 8009ffc:	18ed      	addgt	r5, r5, r3
 8009ffe:	2600      	movs	r6, #0
 800a000:	341a      	adds	r4, #26
 800a002:	42b5      	cmp	r5, r6
 800a004:	d11a      	bne.n	800a03c <_printf_common+0xc8>
 800a006:	2000      	movs	r0, #0
 800a008:	e008      	b.n	800a01c <_printf_common+0xa8>
 800a00a:	2301      	movs	r3, #1
 800a00c:	4652      	mov	r2, sl
 800a00e:	4649      	mov	r1, r9
 800a010:	4638      	mov	r0, r7
 800a012:	47c0      	blx	r8
 800a014:	3001      	adds	r0, #1
 800a016:	d103      	bne.n	800a020 <_printf_common+0xac>
 800a018:	f04f 30ff 	mov.w	r0, #4294967295
 800a01c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a020:	3501      	adds	r5, #1
 800a022:	e7c6      	b.n	8009fb2 <_printf_common+0x3e>
 800a024:	18e1      	adds	r1, r4, r3
 800a026:	1c5a      	adds	r2, r3, #1
 800a028:	2030      	movs	r0, #48	; 0x30
 800a02a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a02e:	4422      	add	r2, r4
 800a030:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a034:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a038:	3302      	adds	r3, #2
 800a03a:	e7c7      	b.n	8009fcc <_printf_common+0x58>
 800a03c:	2301      	movs	r3, #1
 800a03e:	4622      	mov	r2, r4
 800a040:	4649      	mov	r1, r9
 800a042:	4638      	mov	r0, r7
 800a044:	47c0      	blx	r8
 800a046:	3001      	adds	r0, #1
 800a048:	d0e6      	beq.n	800a018 <_printf_common+0xa4>
 800a04a:	3601      	adds	r6, #1
 800a04c:	e7d9      	b.n	800a002 <_printf_common+0x8e>
	...

0800a050 <_printf_i>:
 800a050:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	7e0f      	ldrb	r7, [r1, #24]
 800a056:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a058:	2f78      	cmp	r7, #120	; 0x78
 800a05a:	4691      	mov	r9, r2
 800a05c:	4680      	mov	r8, r0
 800a05e:	460c      	mov	r4, r1
 800a060:	469a      	mov	sl, r3
 800a062:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a066:	d807      	bhi.n	800a078 <_printf_i+0x28>
 800a068:	2f62      	cmp	r7, #98	; 0x62
 800a06a:	d80a      	bhi.n	800a082 <_printf_i+0x32>
 800a06c:	2f00      	cmp	r7, #0
 800a06e:	f000 80d4 	beq.w	800a21a <_printf_i+0x1ca>
 800a072:	2f58      	cmp	r7, #88	; 0x58
 800a074:	f000 80c0 	beq.w	800a1f8 <_printf_i+0x1a8>
 800a078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a07c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a080:	e03a      	b.n	800a0f8 <_printf_i+0xa8>
 800a082:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a086:	2b15      	cmp	r3, #21
 800a088:	d8f6      	bhi.n	800a078 <_printf_i+0x28>
 800a08a:	a101      	add	r1, pc, #4	; (adr r1, 800a090 <_printf_i+0x40>)
 800a08c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a090:	0800a0e9 	.word	0x0800a0e9
 800a094:	0800a0fd 	.word	0x0800a0fd
 800a098:	0800a079 	.word	0x0800a079
 800a09c:	0800a079 	.word	0x0800a079
 800a0a0:	0800a079 	.word	0x0800a079
 800a0a4:	0800a079 	.word	0x0800a079
 800a0a8:	0800a0fd 	.word	0x0800a0fd
 800a0ac:	0800a079 	.word	0x0800a079
 800a0b0:	0800a079 	.word	0x0800a079
 800a0b4:	0800a079 	.word	0x0800a079
 800a0b8:	0800a079 	.word	0x0800a079
 800a0bc:	0800a201 	.word	0x0800a201
 800a0c0:	0800a129 	.word	0x0800a129
 800a0c4:	0800a1bb 	.word	0x0800a1bb
 800a0c8:	0800a079 	.word	0x0800a079
 800a0cc:	0800a079 	.word	0x0800a079
 800a0d0:	0800a223 	.word	0x0800a223
 800a0d4:	0800a079 	.word	0x0800a079
 800a0d8:	0800a129 	.word	0x0800a129
 800a0dc:	0800a079 	.word	0x0800a079
 800a0e0:	0800a079 	.word	0x0800a079
 800a0e4:	0800a1c3 	.word	0x0800a1c3
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	1d1a      	adds	r2, r3, #4
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	602a      	str	r2, [r5, #0]
 800a0f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e09f      	b.n	800a23c <_printf_i+0x1ec>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	0607      	lsls	r7, r0, #24
 800a102:	f103 0104 	add.w	r1, r3, #4
 800a106:	6029      	str	r1, [r5, #0]
 800a108:	d501      	bpl.n	800a10e <_printf_i+0xbe>
 800a10a:	681e      	ldr	r6, [r3, #0]
 800a10c:	e003      	b.n	800a116 <_printf_i+0xc6>
 800a10e:	0646      	lsls	r6, r0, #25
 800a110:	d5fb      	bpl.n	800a10a <_printf_i+0xba>
 800a112:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a116:	2e00      	cmp	r6, #0
 800a118:	da03      	bge.n	800a122 <_printf_i+0xd2>
 800a11a:	232d      	movs	r3, #45	; 0x2d
 800a11c:	4276      	negs	r6, r6
 800a11e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a122:	485a      	ldr	r0, [pc, #360]	; (800a28c <_printf_i+0x23c>)
 800a124:	230a      	movs	r3, #10
 800a126:	e012      	b.n	800a14e <_printf_i+0xfe>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	6820      	ldr	r0, [r4, #0]
 800a12c:	1d19      	adds	r1, r3, #4
 800a12e:	6029      	str	r1, [r5, #0]
 800a130:	0605      	lsls	r5, r0, #24
 800a132:	d501      	bpl.n	800a138 <_printf_i+0xe8>
 800a134:	681e      	ldr	r6, [r3, #0]
 800a136:	e002      	b.n	800a13e <_printf_i+0xee>
 800a138:	0641      	lsls	r1, r0, #25
 800a13a:	d5fb      	bpl.n	800a134 <_printf_i+0xe4>
 800a13c:	881e      	ldrh	r6, [r3, #0]
 800a13e:	4853      	ldr	r0, [pc, #332]	; (800a28c <_printf_i+0x23c>)
 800a140:	2f6f      	cmp	r7, #111	; 0x6f
 800a142:	bf0c      	ite	eq
 800a144:	2308      	moveq	r3, #8
 800a146:	230a      	movne	r3, #10
 800a148:	2100      	movs	r1, #0
 800a14a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a14e:	6865      	ldr	r5, [r4, #4]
 800a150:	60a5      	str	r5, [r4, #8]
 800a152:	2d00      	cmp	r5, #0
 800a154:	bfa2      	ittt	ge
 800a156:	6821      	ldrge	r1, [r4, #0]
 800a158:	f021 0104 	bicge.w	r1, r1, #4
 800a15c:	6021      	strge	r1, [r4, #0]
 800a15e:	b90e      	cbnz	r6, 800a164 <_printf_i+0x114>
 800a160:	2d00      	cmp	r5, #0
 800a162:	d04b      	beq.n	800a1fc <_printf_i+0x1ac>
 800a164:	4615      	mov	r5, r2
 800a166:	fbb6 f1f3 	udiv	r1, r6, r3
 800a16a:	fb03 6711 	mls	r7, r3, r1, r6
 800a16e:	5dc7      	ldrb	r7, [r0, r7]
 800a170:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a174:	4637      	mov	r7, r6
 800a176:	42bb      	cmp	r3, r7
 800a178:	460e      	mov	r6, r1
 800a17a:	d9f4      	bls.n	800a166 <_printf_i+0x116>
 800a17c:	2b08      	cmp	r3, #8
 800a17e:	d10b      	bne.n	800a198 <_printf_i+0x148>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	07de      	lsls	r6, r3, #31
 800a184:	d508      	bpl.n	800a198 <_printf_i+0x148>
 800a186:	6923      	ldr	r3, [r4, #16]
 800a188:	6861      	ldr	r1, [r4, #4]
 800a18a:	4299      	cmp	r1, r3
 800a18c:	bfde      	ittt	le
 800a18e:	2330      	movle	r3, #48	; 0x30
 800a190:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a194:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a198:	1b52      	subs	r2, r2, r5
 800a19a:	6122      	str	r2, [r4, #16]
 800a19c:	f8cd a000 	str.w	sl, [sp]
 800a1a0:	464b      	mov	r3, r9
 800a1a2:	aa03      	add	r2, sp, #12
 800a1a4:	4621      	mov	r1, r4
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f7ff fee4 	bl	8009f74 <_printf_common>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d14a      	bne.n	800a246 <_printf_i+0x1f6>
 800a1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b4:	b004      	add	sp, #16
 800a1b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	f043 0320 	orr.w	r3, r3, #32
 800a1c0:	6023      	str	r3, [r4, #0]
 800a1c2:	4833      	ldr	r0, [pc, #204]	; (800a290 <_printf_i+0x240>)
 800a1c4:	2778      	movs	r7, #120	; 0x78
 800a1c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	6829      	ldr	r1, [r5, #0]
 800a1ce:	061f      	lsls	r7, r3, #24
 800a1d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1d4:	d402      	bmi.n	800a1dc <_printf_i+0x18c>
 800a1d6:	065f      	lsls	r7, r3, #25
 800a1d8:	bf48      	it	mi
 800a1da:	b2b6      	uxthmi	r6, r6
 800a1dc:	07df      	lsls	r7, r3, #31
 800a1de:	bf48      	it	mi
 800a1e0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1e4:	6029      	str	r1, [r5, #0]
 800a1e6:	bf48      	it	mi
 800a1e8:	6023      	strmi	r3, [r4, #0]
 800a1ea:	b91e      	cbnz	r6, 800a1f4 <_printf_i+0x1a4>
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	f023 0320 	bic.w	r3, r3, #32
 800a1f2:	6023      	str	r3, [r4, #0]
 800a1f4:	2310      	movs	r3, #16
 800a1f6:	e7a7      	b.n	800a148 <_printf_i+0xf8>
 800a1f8:	4824      	ldr	r0, [pc, #144]	; (800a28c <_printf_i+0x23c>)
 800a1fa:	e7e4      	b.n	800a1c6 <_printf_i+0x176>
 800a1fc:	4615      	mov	r5, r2
 800a1fe:	e7bd      	b.n	800a17c <_printf_i+0x12c>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	6826      	ldr	r6, [r4, #0]
 800a204:	6961      	ldr	r1, [r4, #20]
 800a206:	1d18      	adds	r0, r3, #4
 800a208:	6028      	str	r0, [r5, #0]
 800a20a:	0635      	lsls	r5, r6, #24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0x1c4>
 800a210:	6019      	str	r1, [r3, #0]
 800a212:	e002      	b.n	800a21a <_printf_i+0x1ca>
 800a214:	0670      	lsls	r0, r6, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0x1c0>
 800a218:	8019      	strh	r1, [r3, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	4615      	mov	r5, r2
 800a220:	e7bc      	b.n	800a19c <_printf_i+0x14c>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	602a      	str	r2, [r5, #0]
 800a228:	681d      	ldr	r5, [r3, #0]
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	2100      	movs	r1, #0
 800a22e:	4628      	mov	r0, r5
 800a230:	f7f6 f876 	bl	8000320 <memchr>
 800a234:	b108      	cbz	r0, 800a23a <_printf_i+0x1ea>
 800a236:	1b40      	subs	r0, r0, r5
 800a238:	6060      	str	r0, [r4, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	2300      	movs	r3, #0
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	e7aa      	b.n	800a19c <_printf_i+0x14c>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	462a      	mov	r2, r5
 800a24a:	4649      	mov	r1, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	47d0      	blx	sl
 800a250:	3001      	adds	r0, #1
 800a252:	d0ad      	beq.n	800a1b0 <_printf_i+0x160>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	079b      	lsls	r3, r3, #30
 800a258:	d413      	bmi.n	800a282 <_printf_i+0x232>
 800a25a:	68e0      	ldr	r0, [r4, #12]
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	4298      	cmp	r0, r3
 800a260:	bfb8      	it	lt
 800a262:	4618      	movlt	r0, r3
 800a264:	e7a6      	b.n	800a1b4 <_printf_i+0x164>
 800a266:	2301      	movs	r3, #1
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	47d0      	blx	sl
 800a270:	3001      	adds	r0, #1
 800a272:	d09d      	beq.n	800a1b0 <_printf_i+0x160>
 800a274:	3501      	adds	r5, #1
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	9903      	ldr	r1, [sp, #12]
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dcf2      	bgt.n	800a266 <_printf_i+0x216>
 800a280:	e7eb      	b.n	800a25a <_printf_i+0x20a>
 800a282:	2500      	movs	r5, #0
 800a284:	f104 0619 	add.w	r6, r4, #25
 800a288:	e7f5      	b.n	800a276 <_printf_i+0x226>
 800a28a:	bf00      	nop
 800a28c:	0800a6d9 	.word	0x0800a6d9
 800a290:	0800a6ea 	.word	0x0800a6ea

0800a294 <__sflush_r>:
 800a294:	898a      	ldrh	r2, [r1, #12]
 800a296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a29a:	4605      	mov	r5, r0
 800a29c:	0710      	lsls	r0, r2, #28
 800a29e:	460c      	mov	r4, r1
 800a2a0:	d458      	bmi.n	800a354 <__sflush_r+0xc0>
 800a2a2:	684b      	ldr	r3, [r1, #4]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	dc05      	bgt.n	800a2b4 <__sflush_r+0x20>
 800a2a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	dc02      	bgt.n	800a2b4 <__sflush_r+0x20>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	d0f9      	beq.n	800a2ae <__sflush_r+0x1a>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a2c0:	682f      	ldr	r7, [r5, #0]
 800a2c2:	6a21      	ldr	r1, [r4, #32]
 800a2c4:	602b      	str	r3, [r5, #0]
 800a2c6:	d032      	beq.n	800a32e <__sflush_r+0x9a>
 800a2c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	075a      	lsls	r2, r3, #29
 800a2ce:	d505      	bpl.n	800a2dc <__sflush_r+0x48>
 800a2d0:	6863      	ldr	r3, [r4, #4]
 800a2d2:	1ac0      	subs	r0, r0, r3
 800a2d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a2d6:	b10b      	cbz	r3, 800a2dc <__sflush_r+0x48>
 800a2d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a2da:	1ac0      	subs	r0, r0, r3
 800a2dc:	2300      	movs	r3, #0
 800a2de:	4602      	mov	r2, r0
 800a2e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a2e2:	6a21      	ldr	r1, [r4, #32]
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	47b0      	blx	r6
 800a2e8:	1c43      	adds	r3, r0, #1
 800a2ea:	89a3      	ldrh	r3, [r4, #12]
 800a2ec:	d106      	bne.n	800a2fc <__sflush_r+0x68>
 800a2ee:	6829      	ldr	r1, [r5, #0]
 800a2f0:	291d      	cmp	r1, #29
 800a2f2:	d82b      	bhi.n	800a34c <__sflush_r+0xb8>
 800a2f4:	4a29      	ldr	r2, [pc, #164]	; (800a39c <__sflush_r+0x108>)
 800a2f6:	410a      	asrs	r2, r1
 800a2f8:	07d6      	lsls	r6, r2, #31
 800a2fa:	d427      	bmi.n	800a34c <__sflush_r+0xb8>
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	6062      	str	r2, [r4, #4]
 800a300:	04d9      	lsls	r1, r3, #19
 800a302:	6922      	ldr	r2, [r4, #16]
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	d504      	bpl.n	800a312 <__sflush_r+0x7e>
 800a308:	1c42      	adds	r2, r0, #1
 800a30a:	d101      	bne.n	800a310 <__sflush_r+0x7c>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b903      	cbnz	r3, 800a312 <__sflush_r+0x7e>
 800a310:	6560      	str	r0, [r4, #84]	; 0x54
 800a312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a314:	602f      	str	r7, [r5, #0]
 800a316:	2900      	cmp	r1, #0
 800a318:	d0c9      	beq.n	800a2ae <__sflush_r+0x1a>
 800a31a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a31e:	4299      	cmp	r1, r3
 800a320:	d002      	beq.n	800a328 <__sflush_r+0x94>
 800a322:	4628      	mov	r0, r5
 800a324:	f7ff fbea 	bl	8009afc <_free_r>
 800a328:	2000      	movs	r0, #0
 800a32a:	6360      	str	r0, [r4, #52]	; 0x34
 800a32c:	e7c0      	b.n	800a2b0 <__sflush_r+0x1c>
 800a32e:	2301      	movs	r3, #1
 800a330:	4628      	mov	r0, r5
 800a332:	47b0      	blx	r6
 800a334:	1c41      	adds	r1, r0, #1
 800a336:	d1c8      	bne.n	800a2ca <__sflush_r+0x36>
 800a338:	682b      	ldr	r3, [r5, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d0c5      	beq.n	800a2ca <__sflush_r+0x36>
 800a33e:	2b1d      	cmp	r3, #29
 800a340:	d001      	beq.n	800a346 <__sflush_r+0xb2>
 800a342:	2b16      	cmp	r3, #22
 800a344:	d101      	bne.n	800a34a <__sflush_r+0xb6>
 800a346:	602f      	str	r7, [r5, #0]
 800a348:	e7b1      	b.n	800a2ae <__sflush_r+0x1a>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a350:	81a3      	strh	r3, [r4, #12]
 800a352:	e7ad      	b.n	800a2b0 <__sflush_r+0x1c>
 800a354:	690f      	ldr	r7, [r1, #16]
 800a356:	2f00      	cmp	r7, #0
 800a358:	d0a9      	beq.n	800a2ae <__sflush_r+0x1a>
 800a35a:	0793      	lsls	r3, r2, #30
 800a35c:	680e      	ldr	r6, [r1, #0]
 800a35e:	bf08      	it	eq
 800a360:	694b      	ldreq	r3, [r1, #20]
 800a362:	600f      	str	r7, [r1, #0]
 800a364:	bf18      	it	ne
 800a366:	2300      	movne	r3, #0
 800a368:	eba6 0807 	sub.w	r8, r6, r7
 800a36c:	608b      	str	r3, [r1, #8]
 800a36e:	f1b8 0f00 	cmp.w	r8, #0
 800a372:	dd9c      	ble.n	800a2ae <__sflush_r+0x1a>
 800a374:	6a21      	ldr	r1, [r4, #32]
 800a376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a378:	4643      	mov	r3, r8
 800a37a:	463a      	mov	r2, r7
 800a37c:	4628      	mov	r0, r5
 800a37e:	47b0      	blx	r6
 800a380:	2800      	cmp	r0, #0
 800a382:	dc06      	bgt.n	800a392 <__sflush_r+0xfe>
 800a384:	89a3      	ldrh	r3, [r4, #12]
 800a386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a38a:	81a3      	strh	r3, [r4, #12]
 800a38c:	f04f 30ff 	mov.w	r0, #4294967295
 800a390:	e78e      	b.n	800a2b0 <__sflush_r+0x1c>
 800a392:	4407      	add	r7, r0
 800a394:	eba8 0800 	sub.w	r8, r8, r0
 800a398:	e7e9      	b.n	800a36e <__sflush_r+0xda>
 800a39a:	bf00      	nop
 800a39c:	dfbffffe 	.word	0xdfbffffe

0800a3a0 <_fflush_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	690b      	ldr	r3, [r1, #16]
 800a3a4:	4605      	mov	r5, r0
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	b913      	cbnz	r3, 800a3b0 <_fflush_r+0x10>
 800a3aa:	2500      	movs	r5, #0
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	bd38      	pop	{r3, r4, r5, pc}
 800a3b0:	b118      	cbz	r0, 800a3ba <_fflush_r+0x1a>
 800a3b2:	6a03      	ldr	r3, [r0, #32]
 800a3b4:	b90b      	cbnz	r3, 800a3ba <_fflush_r+0x1a>
 800a3b6:	f7ff f9a9 	bl	800970c <__sinit>
 800a3ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f3      	beq.n	800a3aa <_fflush_r+0xa>
 800a3c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a3c4:	07d0      	lsls	r0, r2, #31
 800a3c6:	d404      	bmi.n	800a3d2 <_fflush_r+0x32>
 800a3c8:	0599      	lsls	r1, r3, #22
 800a3ca:	d402      	bmi.n	800a3d2 <_fflush_r+0x32>
 800a3cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ce:	f7ff fb92 	bl	8009af6 <__retarget_lock_acquire_recursive>
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	f7ff ff5d 	bl	800a294 <__sflush_r>
 800a3da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3dc:	07da      	lsls	r2, r3, #31
 800a3de:	4605      	mov	r5, r0
 800a3e0:	d4e4      	bmi.n	800a3ac <_fflush_r+0xc>
 800a3e2:	89a3      	ldrh	r3, [r4, #12]
 800a3e4:	059b      	lsls	r3, r3, #22
 800a3e6:	d4e1      	bmi.n	800a3ac <_fflush_r+0xc>
 800a3e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3ea:	f7ff fb85 	bl	8009af8 <__retarget_lock_release_recursive>
 800a3ee:	e7dd      	b.n	800a3ac <_fflush_r+0xc>

0800a3f0 <__swhatbuf_r>:
 800a3f0:	b570      	push	{r4, r5, r6, lr}
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f8:	2900      	cmp	r1, #0
 800a3fa:	b096      	sub	sp, #88	; 0x58
 800a3fc:	4615      	mov	r5, r2
 800a3fe:	461e      	mov	r6, r3
 800a400:	da0d      	bge.n	800a41e <__swhatbuf_r+0x2e>
 800a402:	89a3      	ldrh	r3, [r4, #12]
 800a404:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a408:	f04f 0100 	mov.w	r1, #0
 800a40c:	bf0c      	ite	eq
 800a40e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a412:	2340      	movne	r3, #64	; 0x40
 800a414:	2000      	movs	r0, #0
 800a416:	6031      	str	r1, [r6, #0]
 800a418:	602b      	str	r3, [r5, #0]
 800a41a:	b016      	add	sp, #88	; 0x58
 800a41c:	bd70      	pop	{r4, r5, r6, pc}
 800a41e:	466a      	mov	r2, sp
 800a420:	f000 f848 	bl	800a4b4 <_fstat_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	dbec      	blt.n	800a402 <__swhatbuf_r+0x12>
 800a428:	9901      	ldr	r1, [sp, #4]
 800a42a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a42e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a432:	4259      	negs	r1, r3
 800a434:	4159      	adcs	r1, r3
 800a436:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43a:	e7eb      	b.n	800a414 <__swhatbuf_r+0x24>

0800a43c <__smakebuf_r>:
 800a43c:	898b      	ldrh	r3, [r1, #12]
 800a43e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a440:	079d      	lsls	r5, r3, #30
 800a442:	4606      	mov	r6, r0
 800a444:	460c      	mov	r4, r1
 800a446:	d507      	bpl.n	800a458 <__smakebuf_r+0x1c>
 800a448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a44c:	6023      	str	r3, [r4, #0]
 800a44e:	6123      	str	r3, [r4, #16]
 800a450:	2301      	movs	r3, #1
 800a452:	6163      	str	r3, [r4, #20]
 800a454:	b002      	add	sp, #8
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	ab01      	add	r3, sp, #4
 800a45a:	466a      	mov	r2, sp
 800a45c:	f7ff ffc8 	bl	800a3f0 <__swhatbuf_r>
 800a460:	9900      	ldr	r1, [sp, #0]
 800a462:	4605      	mov	r5, r0
 800a464:	4630      	mov	r0, r6
 800a466:	f7ff fbb5 	bl	8009bd4 <_malloc_r>
 800a46a:	b948      	cbnz	r0, 800a480 <__smakebuf_r+0x44>
 800a46c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a470:	059a      	lsls	r2, r3, #22
 800a472:	d4ef      	bmi.n	800a454 <__smakebuf_r+0x18>
 800a474:	f023 0303 	bic.w	r3, r3, #3
 800a478:	f043 0302 	orr.w	r3, r3, #2
 800a47c:	81a3      	strh	r3, [r4, #12]
 800a47e:	e7e3      	b.n	800a448 <__smakebuf_r+0xc>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	6020      	str	r0, [r4, #0]
 800a484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a488:	81a3      	strh	r3, [r4, #12]
 800a48a:	9b00      	ldr	r3, [sp, #0]
 800a48c:	6163      	str	r3, [r4, #20]
 800a48e:	9b01      	ldr	r3, [sp, #4]
 800a490:	6120      	str	r0, [r4, #16]
 800a492:	b15b      	cbz	r3, 800a4ac <__smakebuf_r+0x70>
 800a494:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a498:	4630      	mov	r0, r6
 800a49a:	f000 f81d 	bl	800a4d8 <_isatty_r>
 800a49e:	b128      	cbz	r0, 800a4ac <__smakebuf_r+0x70>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f023 0303 	bic.w	r3, r3, #3
 800a4a6:	f043 0301 	orr.w	r3, r3, #1
 800a4aa:	81a3      	strh	r3, [r4, #12]
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	431d      	orrs	r5, r3
 800a4b0:	81a5      	strh	r5, [r4, #12]
 800a4b2:	e7cf      	b.n	800a454 <__smakebuf_r+0x18>

0800a4b4 <_fstat_r>:
 800a4b4:	b538      	push	{r3, r4, r5, lr}
 800a4b6:	4d07      	ldr	r5, [pc, #28]	; (800a4d4 <_fstat_r+0x20>)
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	4608      	mov	r0, r1
 800a4be:	4611      	mov	r1, r2
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	f7f6 fa56 	bl	8000972 <_fstat>
 800a4c6:	1c43      	adds	r3, r0, #1
 800a4c8:	d102      	bne.n	800a4d0 <_fstat_r+0x1c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	b103      	cbz	r3, 800a4d0 <_fstat_r+0x1c>
 800a4ce:	6023      	str	r3, [r4, #0]
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	240006ec 	.word	0x240006ec

0800a4d8 <_isatty_r>:
 800a4d8:	b538      	push	{r3, r4, r5, lr}
 800a4da:	4d06      	ldr	r5, [pc, #24]	; (800a4f4 <_isatty_r+0x1c>)
 800a4dc:	2300      	movs	r3, #0
 800a4de:	4604      	mov	r4, r0
 800a4e0:	4608      	mov	r0, r1
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	f7f6 fa55 	bl	8000992 <_isatty>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d102      	bne.n	800a4f2 <_isatty_r+0x1a>
 800a4ec:	682b      	ldr	r3, [r5, #0]
 800a4ee:	b103      	cbz	r3, 800a4f2 <_isatty_r+0x1a>
 800a4f0:	6023      	str	r3, [r4, #0]
 800a4f2:	bd38      	pop	{r3, r4, r5, pc}
 800a4f4:	240006ec 	.word	0x240006ec

0800a4f8 <_sbrk_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	4d06      	ldr	r5, [pc, #24]	; (800a514 <_sbrk_r+0x1c>)
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	4604      	mov	r4, r0
 800a500:	4608      	mov	r0, r1
 800a502:	602b      	str	r3, [r5, #0]
 800a504:	f7f6 fa5e 	bl	80009c4 <_sbrk>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_sbrk_r+0x1a>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_sbrk_r+0x1a>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	240006ec 	.word	0x240006ec

0800a518 <_init>:
 800a518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a51a:	bf00      	nop
 800a51c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a51e:	bc08      	pop	{r3}
 800a520:	469e      	mov	lr, r3
 800a522:	4770      	bx	lr

0800a524 <_fini>:
 800a524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a526:	bf00      	nop
 800a528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a52a:	bc08      	pop	{r3}
 800a52c:	469e      	mov	lr, r3
 800a52e:	4770      	bx	lr
