
SD_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a8  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08009374  08009374  00019374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009470  08009470  00019470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  24000000  08009474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000540  24000020  08009494  00020020  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  24000560  08009494  00020560  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002004e  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fef7  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000283d  00000000  00000000  0002ff88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e18  00000000  00000000  000327c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000a93  00000000  00000000  000335e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000334b6  00000000  00000000  00034073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001397d  00000000  00000000  00067529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013f72d  00000000  00000000  0007aea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000387c  00000000  00000000  001ba5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000062  00000000  00000000  001bde50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000020 	.word	0x24000020
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800935c 	.word	0x0800935c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000024 	.word	0x24000024
 8000308:	0800935c 	.word	0x0800935c

0800030c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000312:	f000 fab7 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000316:	f000 f833 	bl	8000380 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800031a:	f000 f8bd 	bl	8000498 <MX_GPIO_Init>
  MX_SDMMC1_SD_Init();
 800031e:	f000 f89d 	bl	800045c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000322:	f006 fbf3 	bl	8006b0c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  /* STM32CubeIDE initialization code */
  FRESULT sd_status;
  sd_status = f_mount(&SDFatFS, "", 1);
 8000326:	2201      	movs	r2, #1
 8000328:	4910      	ldr	r1, [pc, #64]	; (800036c <main+0x60>)
 800032a:	4811      	ldr	r0, [pc, #68]	; (8000370 <main+0x64>)
 800032c:	f008 fb6c 	bl	8008a08 <f_mount>
 8000330:	4603      	mov	r3, r0
 8000332:	71fb      	strb	r3, [r7, #7]


   /* Initialize the file system */
   if (sd_status != FR_OK)
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <main+0x32>
   {
     /* Error handling */
     Error_Handler();
 800033a:	f000 f909 	bl	8000550 <Error_Handler>
   /* Open or create a file for writing */

   //HAL_StatusTypeDef status;
   //status = HAL_SD_Init(&hsd1);

	   sd_status = f_open(&SDFile, "testing.txt", FA_CREATE_ALWAYS | FA_WRITE);
 800033e:	220a      	movs	r2, #10
 8000340:	490c      	ldr	r1, [pc, #48]	; (8000374 <main+0x68>)
 8000342:	480d      	ldr	r0, [pc, #52]	; (8000378 <main+0x6c>)
 8000344:	f008 fba6 	bl	8008a94 <f_open>
 8000348:	4603      	mov	r3, r0
 800034a:	71fb      	strb	r3, [r7, #7]
	   if (sd_status == FR_OK)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d109      	bne.n	8000366 <main+0x5a>
	   {
	     /* Write data to the file */
		 //for (int i = 0; i < 10; i++){
			 UINT bytesWritten;
			 f_write(&SDFile, dataBuffer, sizeof(dataBuffer), &bytesWritten);
 8000352:	463b      	mov	r3, r7
 8000354:	220e      	movs	r2, #14
 8000356:	4909      	ldr	r1, [pc, #36]	; (800037c <main+0x70>)
 8000358:	4807      	ldr	r0, [pc, #28]	; (8000378 <main+0x6c>)
 800035a:	f008 fd59 	bl	8008e10 <f_write>
			 }



	     /* Close the file */
	     f_close(&SDFile);
 800035e:	4806      	ldr	r0, [pc, #24]	; (8000378 <main+0x6c>)
 8000360:	f008 ff49 	bl	80091f6 <f_close>
 8000364:	e001      	b.n	800036a <main+0x5e>
	   }
	   else
	   {
	     /* Error handling */
	     Error_Handler();
 8000366:	f000 f8f3 	bl	8000550 <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800036a:	e7fe      	b.n	800036a <main+0x5e>
 800036c:	08009374 	.word	0x08009374
 8000370:	240000c4 	.word	0x240000c4
 8000374:	08009378 	.word	0x08009378
 8000378:	240002f4 	.word	0x240002f4
 800037c:	24000000 	.word	0x24000000

08000380 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b09c      	sub	sp, #112	; 0x70
 8000384:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800038a:	224c      	movs	r2, #76	; 0x4c
 800038c:	2100      	movs	r1, #0
 800038e:	4618      	mov	r0, r3
 8000390:	f008 ffb7 	bl	8009302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000394:	1d3b      	adds	r3, r7, #4
 8000396:	2220      	movs	r2, #32
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f008 ffb1 	bl	8009302 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80003a0:	2002      	movs	r0, #2
 80003a2:	f000 fdf5 	bl	8000f90 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003a6:	2300      	movs	r3, #0
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	4b2b      	ldr	r3, [pc, #172]	; (8000458 <SystemClock_Config+0xd8>)
 80003ac:	699b      	ldr	r3, [r3, #24]
 80003ae:	4a2a      	ldr	r2, [pc, #168]	; (8000458 <SystemClock_Config+0xd8>)
 80003b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003b4:	6193      	str	r3, [r2, #24]
 80003b6:	4b28      	ldr	r3, [pc, #160]	; (8000458 <SystemClock_Config+0xd8>)
 80003b8:	699b      	ldr	r3, [r3, #24]
 80003ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003be:	603b      	str	r3, [r7, #0]
 80003c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003c2:	bf00      	nop
 80003c4:	4b24      	ldr	r3, [pc, #144]	; (8000458 <SystemClock_Config+0xd8>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d0:	d1f8      	bne.n	80003c4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003d2:	2301      	movs	r3, #1
 80003d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003dc:	2302      	movs	r3, #2
 80003de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003e0:	2302      	movs	r3, #2
 80003e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003e4:	2301      	movs	r3, #1
 80003e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 80003e8:	2322      	movs	r3, #34	; 0x22
 80003ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80003ec:	2301      	movs	r3, #1
 80003ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80003f0:	2303      	movs	r3, #3
 80003f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003f4:	2302      	movs	r3, #2
 80003f6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80003f8:	230c      	movs	r3, #12
 80003fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80003fc:	2300      	movs	r3, #0
 80003fe:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fe1b 	bl	8001044 <HAL_RCC_OscConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000414:	f000 f89c 	bl	8000550 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000418:	233f      	movs	r3, #63	; 0x3f
 800041a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800041c:	2303      	movs	r3, #3
 800041e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000420:	2300      	movs	r3, #0
 8000422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000424:	2308      	movs	r3, #8
 8000426:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000428:	2340      	movs	r3, #64	; 0x40
 800042a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800042c:	2340      	movs	r3, #64	; 0x40
 800042e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000430:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000434:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000436:	2340      	movs	r3, #64	; 0x40
 8000438:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800043a:	1d3b      	adds	r3, r7, #4
 800043c:	2103      	movs	r1, #3
 800043e:	4618      	mov	r0, r3
 8000440:	f001 f9da 	bl	80017f8 <HAL_RCC_ClockConfig>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800044a:	f000 f881 	bl	8000550 <Error_Handler>
  }
}
 800044e:	bf00      	nop
 8000450:	3770      	adds	r7, #112	; 0x70
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	58024800 	.word	0x58024800

0800045c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <MX_SDMMC1_SD_Init+0x34>)
 8000462:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <MX_SDMMC1_SD_Init+0x38>)
 8000464:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000466:	4b0a      	ldr	r3, [pc, #40]	; (8000490 <MX_SDMMC1_SD_Init+0x34>)
 8000468:	2200      	movs	r2, #0
 800046a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <MX_SDMMC1_SD_Init+0x34>)
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000472:	4b07      	ldr	r3, [pc, #28]	; (8000490 <MX_SDMMC1_SD_Init+0x34>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <MX_SDMMC1_SD_Init+0x34>)
 800047a:	2200      	movs	r2, #0
 800047c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 1023;
 800047e:	4b04      	ldr	r3, [pc, #16]	; (8000490 <MX_SDMMC1_SD_Init+0x34>)
 8000480:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000484:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	2400003c 	.word	0x2400003c
 8000494:	52007000 	.word	0x52007000

08000498 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b08a      	sub	sp, #40	; 0x28
 800049c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800049e:	f107 0314 	add.w	r3, r7, #20
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ae:	4b26      	ldr	r3, [pc, #152]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b4:	4a24      	ldr	r2, [pc, #144]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004b6:	f043 0310 	orr.w	r3, r3, #16
 80004ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004be:	4b22      	ldr	r3, [pc, #136]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	f003 0310 	and.w	r3, r3, #16
 80004c8:	613b      	str	r3, [r7, #16]
 80004ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d2:	4a1d      	ldr	r2, [pc, #116]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f0:	4a15      	ldr	r2, [pc, #84]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <MX_GPIO_Init+0xb0>)
 80004fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	60bb      	str	r3, [r7, #8]
 8000506:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_GPIO_Init+0xb0>)
 800050a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <MX_GPIO_Init+0xb0>)
 8000510:	f043 0308 	orr.w	r3, r3, #8
 8000514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <MX_GPIO_Init+0xb0>)
 800051a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051e:	f003 0308 	and.w	r3, r3, #8
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : SD_Card_Pin */
  GPIO_InitStruct.Pin = SD_Card_Pin;
 8000526:	2304      	movs	r3, #4
 8000528:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	2300      	movs	r3, #0
 800052c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800052e:	2302      	movs	r3, #2
 8000530:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_Card_GPIO_Port, &GPIO_InitStruct);
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	4619      	mov	r1, r3
 8000538:	4804      	ldr	r0, [pc, #16]	; (800054c <MX_GPIO_Init+0xb4>)
 800053a:	f000 fb69 	bl	8000c10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800053e:	bf00      	nop
 8000540:	3728      	adds	r7, #40	; 0x28
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	58024400 	.word	0x58024400
 800054c:	58021000 	.word	0x58021000

08000550 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000554:	b672      	cpsid	i
}
 8000556:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000558:	e7fe      	b.n	8000558 <Error_Handler+0x8>
	...

0800055c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <HAL_MspInit+0x3c>)
 8000564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <HAL_MspInit+0x3c>)
 800056a:	f043 0302 	orr.w	r3, r3, #2
 800056e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000572:	4b09      	ldr	r3, [pc, #36]	; (8000598 <HAL_MspInit+0x3c>)
 8000574:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000580:	2200      	movs	r2, #0
 8000582:	2100      	movs	r1, #0
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fb0e 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800058a:	2005      	movs	r0, #5
 800058c:	f000 fb25 	bl	8000bda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	58024400 	.word	0x58024400

0800059c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b0ba      	sub	sp, #232	; 0xe8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	22b8      	movs	r2, #184	; 0xb8
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f008 fea0 	bl	8009302 <memset>
  if(hsd->Instance==SDMMC1)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a3c      	ldr	r2, [pc, #240]	; (80006b8 <HAL_SD_MspInit+0x11c>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d171      	bne.n	80006b0 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 80005cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005d0:	f04f 0300 	mov.w	r3, #0
 80005d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 80005d8:	2300      	movs	r3, #0
 80005da:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005dc:	f107 0318 	add.w	r3, r7, #24
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fc7f 	bl	8001ee4 <HAL_RCCEx_PeriphCLKConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80005ec:	f7ff ffb0 	bl	8000550 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80005f0:	4b32      	ldr	r3, [pc, #200]	; (80006bc <HAL_SD_MspInit+0x120>)
 80005f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <HAL_SD_MspInit+0x120>)
 80005f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fc:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000600:	4b2e      	ldr	r3, [pc, #184]	; (80006bc <HAL_SD_MspInit+0x120>)
 8000602:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800060a:	617b      	str	r3, [r7, #20]
 800060c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <HAL_SD_MspInit+0x120>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	4a29      	ldr	r2, [pc, #164]	; (80006bc <HAL_SD_MspInit+0x120>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061e:	4b27      	ldr	r3, [pc, #156]	; (80006bc <HAL_SD_MspInit+0x120>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	613b      	str	r3, [r7, #16]
 800062a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800062c:	4b23      	ldr	r3, [pc, #140]	; (80006bc <HAL_SD_MspInit+0x120>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000632:	4a22      	ldr	r2, [pc, #136]	; (80006bc <HAL_SD_MspInit+0x120>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <HAL_SD_MspInit+0x120>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800064a:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800064e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000664:	230c      	movs	r3, #12
 8000666:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800066e:	4619      	mov	r1, r3
 8000670:	4813      	ldr	r0, [pc, #76]	; (80006c0 <HAL_SD_MspInit+0x124>)
 8000672:	f000 facd 	bl	8000c10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000676:	2304      	movs	r3, #4
 8000678:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800068e:	230c      	movs	r3, #12
 8000690:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000694:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000698:	4619      	mov	r1, r3
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <HAL_SD_MspInit+0x128>)
 800069c:	f000 fab8 	bl	8000c10 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2031      	movs	r0, #49	; 0x31
 80006a6:	f000 fa7e 	bl	8000ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80006aa:	2031      	movs	r0, #49	; 0x31
 80006ac:	f000 fa95 	bl	8000bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80006b0:	bf00      	nop
 80006b2:	37e8      	adds	r7, #232	; 0xe8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	52007000 	.word	0x52007000
 80006bc:	58024400 	.word	0x58024400
 80006c0:	58020800 	.word	0x58020800
 80006c4:	58020c00 	.word	0x58020c00

080006c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006cc:	e7fe      	b.n	80006cc <NMI_Handler+0x4>

080006ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d2:	e7fe      	b.n	80006d2 <HardFault_Handler+0x4>

080006d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006d8:	e7fe      	b.n	80006d8 <MemManage_Handler+0x4>

080006da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006da:	b480      	push	{r7}
 80006dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <BusFault_Handler+0x4>

080006e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler+0x4>

080006e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr

08000710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000714:	f000 f928 	bl	8000968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}

0800071c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
	...

0800072c <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8000730:	4802      	ldr	r0, [pc, #8]	; (800073c <SDMMC1_IRQHandler+0x10>)
 8000732:	f004 fa2d 	bl	8004b90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2400003c 	.word	0x2400003c

08000740 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000744:	4b32      	ldr	r3, [pc, #200]	; (8000810 <SystemInit+0xd0>)
 8000746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800074a:	4a31      	ldr	r2, [pc, #196]	; (8000810 <SystemInit+0xd0>)
 800074c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <SystemInit+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f003 030f 	and.w	r3, r3, #15
 800075c:	2b06      	cmp	r3, #6
 800075e:	d807      	bhi.n	8000770 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000760:	4b2c      	ldr	r3, [pc, #176]	; (8000814 <SystemInit+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f023 030f 	bic.w	r3, r3, #15
 8000768:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SystemInit+0xd4>)
 800076a:	f043 0307 	orr.w	r3, r3, #7
 800076e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000770:	4b29      	ldr	r3, [pc, #164]	; (8000818 <SystemInit+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a28      	ldr	r2, [pc, #160]	; (8000818 <SystemInit+0xd8>)
 8000776:	f043 0301 	orr.w	r3, r3, #1
 800077a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800077c:	4b26      	ldr	r3, [pc, #152]	; (8000818 <SystemInit+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000782:	4b25      	ldr	r3, [pc, #148]	; (8000818 <SystemInit+0xd8>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4924      	ldr	r1, [pc, #144]	; (8000818 <SystemInit+0xd8>)
 8000788:	4b24      	ldr	r3, [pc, #144]	; (800081c <SystemInit+0xdc>)
 800078a:	4013      	ands	r3, r2
 800078c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <SystemInit+0xd4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	2b00      	cmp	r3, #0
 8000798:	d007      	beq.n	80007aa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <SystemInit+0xd4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f023 030f 	bic.w	r3, r3, #15
 80007a2:	4a1c      	ldr	r2, [pc, #112]	; (8000814 <SystemInit+0xd4>)
 80007a4:	f043 0307 	orr.w	r3, r3, #7
 80007a8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <SystemInit+0xd8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <SystemInit+0xd8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <SystemInit+0xd8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <SystemInit+0xd8>)
 80007be:	4a18      	ldr	r2, [pc, #96]	; (8000820 <SystemInit+0xe0>)
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <SystemInit+0xd8>)
 80007c4:	4a17      	ldr	r2, [pc, #92]	; (8000824 <SystemInit+0xe4>)
 80007c6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <SystemInit+0xd8>)
 80007ca:	4a17      	ldr	r2, [pc, #92]	; (8000828 <SystemInit+0xe8>)
 80007cc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007ce:	4b12      	ldr	r3, [pc, #72]	; (8000818 <SystemInit+0xd8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <SystemInit+0xd8>)
 80007d6:	4a14      	ldr	r2, [pc, #80]	; (8000828 <SystemInit+0xe8>)
 80007d8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007da:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <SystemInit+0xd8>)
 80007dc:	2200      	movs	r2, #0
 80007de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007e0:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <SystemInit+0xd8>)
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <SystemInit+0xe8>)
 80007e4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <SystemInit+0xd8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007ec:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <SystemInit+0xd8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <SystemInit+0xd8>)
 80007f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <SystemInit+0xd8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <SystemInit+0xec>)
 8000800:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000804:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000806:	bf00      	nop
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00
 8000814:	52002000 	.word	0x52002000
 8000818:	58024400 	.word	0x58024400
 800081c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000820:	02020200 	.word	0x02020200
 8000824:	01ff0000 	.word	0x01ff0000
 8000828:	01010280 	.word	0x01010280
 800082c:	52004000 	.word	0x52004000

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000868 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000834:	f7ff ff84 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800083a:	490d      	ldr	r1, [pc, #52]	; (8000870 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800083e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000840:	e002      	b.n	8000848 <LoopCopyDataInit>

08000842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000846:	3304      	adds	r3, #4

08000848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800084a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800084c:	d3f9      	bcc.n	8000842 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084e:	4a0a      	ldr	r2, [pc, #40]	; (8000878 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000850:	4c0a      	ldr	r4, [pc, #40]	; (800087c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000854:	e001      	b.n	800085a <LoopFillZerobss>

08000856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000858:	3204      	adds	r2, #4

0800085a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800085a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800085c:	d3fb      	bcc.n	8000856 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085e:	f008 fd59 	bl	8009314 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fd53 	bl	800030c <main>
  bx  lr
 8000866:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000868:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800086c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000870:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 8000874:	08009474 	.word	0x08009474
  ldr r2, =_sbss
 8000878:	24000020 	.word	0x24000020
  ldr r4, =_ebss
 800087c:	24000560 	.word	0x24000560

08000880 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC3_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088a:	2003      	movs	r0, #3
 800088c:	f000 f980 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000890:	f001 f968 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8000894:	4602      	mov	r2, r0
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_Init+0x68>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	0a1b      	lsrs	r3, r3, #8
 800089c:	f003 030f 	and.w	r3, r3, #15
 80008a0:	4913      	ldr	r1, [pc, #76]	; (80008f0 <HAL_Init+0x6c>)
 80008a2:	5ccb      	ldrb	r3, [r1, r3]
 80008a4:	f003 031f 	and.w	r3, r3, #31
 80008a8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ac:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80008ae:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <HAL_Init+0x68>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 030f 	and.w	r3, r3, #15
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_Init+0x6c>)
 80008b8:	5cd3      	ldrb	r3, [r2, r3]
 80008ba:	f003 031f 	and.w	r3, r3, #31
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	fa22 f303 	lsr.w	r3, r2, r3
 80008c4:	4a0b      	ldr	r2, [pc, #44]	; (80008f4 <HAL_Init+0x70>)
 80008c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008c8:	4a0b      	ldr	r2, [pc, #44]	; (80008f8 <HAL_Init+0x74>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ce:	200f      	movs	r0, #15
 80008d0:	f000 f814 	bl	80008fc <HAL_InitTick>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e002      	b.n	80008e4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008de:	f7ff fe3d 	bl	800055c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e2:	2300      	movs	r3, #0
}
 80008e4:	4618      	mov	r0, r3
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	58024400 	.word	0x58024400
 80008f0:	080093c8 	.word	0x080093c8
 80008f4:	24000014 	.word	0x24000014
 80008f8:	24000010 	.word	0x24000010

080008fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d101      	bne.n	8000910 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800090c:	2301      	movs	r3, #1
 800090e:	e021      	b.n	8000954 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <HAL_InitTick+0x64>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <HAL_InitTick+0x60>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	4619      	mov	r1, r3
 800091a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800091e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000922:	fbb2 f3f3 	udiv	r3, r2, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f965 	bl	8000bf6 <HAL_SYSTICK_Config>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e00e      	b.n	8000954 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d80a      	bhi.n	8000952 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800093c:	2200      	movs	r2, #0
 800093e:	6879      	ldr	r1, [r7, #4]
 8000940:	f04f 30ff 	mov.w	r0, #4294967295
 8000944:	f000 f92f 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000948:	4a06      	ldr	r2, [pc, #24]	; (8000964 <HAL_InitTick+0x68>)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
 8000950:	e000      	b.n	8000954 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000952:	2301      	movs	r3, #1
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2400001c 	.word	0x2400001c
 8000960:	24000010 	.word	0x24000010
 8000964:	24000018 	.word	0x24000018

08000968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_IncTick+0x20>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	461a      	mov	r2, r3
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_IncTick+0x24>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4413      	add	r3, r2
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <HAL_IncTick+0x24>)
 800097a:	6013      	str	r3, [r2, #0]
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2400001c 	.word	0x2400001c
 800098c:	240000b8 	.word	0x240000b8

08000990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <HAL_GetTick+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	240000b8 	.word	0x240000b8

080009a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b084      	sub	sp, #16
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009b0:	f7ff ffee 	bl	8000990 <HAL_GetTick>
 80009b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009c0:	d005      	beq.n	80009ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009c2:	4b0a      	ldr	r3, [pc, #40]	; (80009ec <HAL_Delay+0x44>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	4413      	add	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ce:	bf00      	nop
 80009d0:	f7ff ffde 	bl	8000990 <HAL_GetTick>
 80009d4:	4602      	mov	r2, r0
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	1ad3      	subs	r3, r2, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d8f7      	bhi.n	80009d0 <HAL_Delay+0x28>
  {
  }
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2400001c 	.word	0x2400001c

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <__NVIC_SetPriorityGrouping+0x40>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	; (8000a30 <__NVIC_SetPriorityGrouping+0x40>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	05fa0000 	.word	0x05fa0000

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	88fb      	ldrh	r3, [r7, #6]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb4:	f7ff ff40 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68b9      	ldr	r1, [r7, #8]
 8000bbe:	6978      	ldr	r0, [r7, #20]
 8000bc0:	f7ff ff90 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc4:	4602      	mov	r2, r0
 8000bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bca:	4611      	mov	r1, r2
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff ff5f 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd2:	bf00      	nop
 8000bd4:	3718      	adds	r7, #24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b082      	sub	sp, #8
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff ff33 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b082      	sub	sp, #8
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff ffa4 	bl	8000b4c <SysTick_Config>
 8000c04:	4603      	mov	r3, r0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c1e:	4b86      	ldr	r3, [pc, #536]	; (8000e38 <HAL_GPIO_Init+0x228>)
 8000c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c22:	e18c      	b.n	8000f3e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 817e 	beq.w	8000f38 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d005      	beq.n	8000c54 <HAL_GPIO_Init+0x44>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d130      	bne.n	8000cb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4013      	ands	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	f003 0201 	and.w	r2, r3, #1
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d017      	beq.n	8000cf2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d123      	bne.n	8000d46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	69b9      	ldr	r1, [r7, #24]
 8000d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0203 	and.w	r2, r3, #3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80d8 	beq.w	8000f38 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <HAL_GPIO_Init+0x22c>)
 8000d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8e:	4a2b      	ldr	r2, [pc, #172]	; (8000e3c <HAL_GPIO_Init+0x22c>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d98:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <HAL_GPIO_Init+0x22c>)
 8000d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000da6:	4a26      	ldr	r2, [pc, #152]	; (8000e40 <HAL_GPIO_Init+0x230>)
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_GPIO_Init+0x234>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d04a      	beq.n	8000e68 <HAL_GPIO_Init+0x258>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_GPIO_Init+0x238>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d02b      	beq.n	8000e32 <HAL_GPIO_Init+0x222>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_GPIO_Init+0x23c>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d025      	beq.n	8000e2e <HAL_GPIO_Init+0x21e>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_GPIO_Init+0x240>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d01f      	beq.n	8000e2a <HAL_GPIO_Init+0x21a>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a19      	ldr	r2, [pc, #100]	; (8000e54 <HAL_GPIO_Init+0x244>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d019      	beq.n	8000e26 <HAL_GPIO_Init+0x216>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <HAL_GPIO_Init+0x248>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d013      	beq.n	8000e22 <HAL_GPIO_Init+0x212>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <HAL_GPIO_Init+0x24c>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d00d      	beq.n	8000e1e <HAL_GPIO_Init+0x20e>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <HAL_GPIO_Init+0x250>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d007      	beq.n	8000e1a <HAL_GPIO_Init+0x20a>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a15      	ldr	r2, [pc, #84]	; (8000e64 <HAL_GPIO_Init+0x254>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d101      	bne.n	8000e16 <HAL_GPIO_Init+0x206>
 8000e12:	2309      	movs	r3, #9
 8000e14:	e029      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e16:	230a      	movs	r3, #10
 8000e18:	e027      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e025      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e023      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e021      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e01f      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e01d      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e01b      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e019      	b.n	8000e6a <HAL_GPIO_Init+0x25a>
 8000e36:	bf00      	nop
 8000e38:	58000080 	.word	0x58000080
 8000e3c:	58024400 	.word	0x58024400
 8000e40:	58000400 	.word	0x58000400
 8000e44:	58020000 	.word	0x58020000
 8000e48:	58020400 	.word	0x58020400
 8000e4c:	58020800 	.word	0x58020800
 8000e50:	58020c00 	.word	0x58020c00
 8000e54:	58021000 	.word	0x58021000
 8000e58:	58021400 	.word	0x58021400
 8000e5c:	58021800 	.word	0x58021800
 8000e60:	58021c00 	.word	0x58021c00
 8000e64:	58022400 	.word	0x58022400
 8000e68:	2300      	movs	r3, #0
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	f002 0203 	and.w	r2, r2, #3
 8000e70:	0092      	lsls	r2, r2, #2
 8000e72:	4093      	lsls	r3, r2
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e7a:	4938      	ldr	r1, [pc, #224]	; (8000f5c <HAL_GPIO_Init+0x34c>)
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	3302      	adds	r3, #2
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000eae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d003      	beq.n	8000edc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000edc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	fa22 f303 	lsr.w	r3, r2, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f47f ae6b 	bne.w	8000c24 <HAL_GPIO_Init+0x14>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3724      	adds	r7, #36	; 0x24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	58000400 	.word	0x58000400

08000f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	691a      	ldr	r2, [r3, #16]
 8000f70:	887b      	ldrh	r3, [r7, #2]
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e001      	b.n	8000f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000f98:	4b29      	ldr	r3, [pc, #164]	; (8001040 <HAL_PWREx_ConfigSupply+0xb0>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	2b06      	cmp	r3, #6
 8000fa2:	d00a      	beq.n	8000fba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fa4:	4b26      	ldr	r3, [pc, #152]	; (8001040 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d001      	beq.n	8000fb6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e03f      	b.n	8001036 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	e03d      	b.n	8001036 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000fba:	4b21      	ldr	r3, [pc, #132]	; (8001040 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000fc2:	491f      	ldr	r1, [pc, #124]	; (8001040 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000fca:	f7ff fce1 	bl	8000990 <HAL_GetTick>
 8000fce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fd0:	e009      	b.n	8000fe6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000fd2:	f7ff fcdd 	bl	8000990 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fe0:	d901      	bls.n	8000fe6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e027      	b.n	8001036 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff2:	d1ee      	bne.n	8000fd2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b1e      	cmp	r3, #30
 8000ff8:	d008      	beq.n	800100c <HAL_PWREx_ConfigSupply+0x7c>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8000ffe:	d005      	beq.n	800100c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b1d      	cmp	r3, #29
 8001004:	d002      	beq.n	800100c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2b2d      	cmp	r3, #45	; 0x2d
 800100a:	d113      	bne.n	8001034 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800100c:	f7ff fcc0 	bl	8000990 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001012:	e009      	b.n	8001028 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001014:	f7ff fcbc 	bl	8000990 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001022:	d901      	bls.n	8001028 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e006      	b.n	8001036 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001028:	4b05      	ldr	r3, [pc, #20]	; (8001040 <HAL_PWREx_ConfigSupply+0xb0>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f003 0311 	and.w	r3, r3, #17
 8001030:	2b11      	cmp	r3, #17
 8001032:	d1ef      	bne.n	8001014 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	58024800 	.word	0x58024800

08001044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e3c8      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8087 	beq.w	8001172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001064:	4b88      	ldr	r3, [pc, #544]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800106c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800106e:	4b86      	ldr	r3, [pc, #536]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001076:	2b10      	cmp	r3, #16
 8001078:	d007      	beq.n	800108a <HAL_RCC_OscConfig+0x46>
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	2b18      	cmp	r3, #24
 800107e:	d110      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
 8001080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d10b      	bne.n	80010a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108a:	4b7f      	ldr	r3, [pc, #508]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d06c      	beq.n	8001170 <HAL_RCC_OscConfig+0x12c>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d168      	bne.n	8001170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e3a2      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010aa:	d106      	bne.n	80010ba <HAL_RCC_OscConfig+0x76>
 80010ac:	4b76      	ldr	r3, [pc, #472]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a75      	ldr	r2, [pc, #468]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e02e      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d10c      	bne.n	80010dc <HAL_RCC_OscConfig+0x98>
 80010c2:	4b71      	ldr	r3, [pc, #452]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a70      	ldr	r2, [pc, #448]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	4b6e      	ldr	r3, [pc, #440]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a6d      	ldr	r2, [pc, #436]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e01d      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e4:	d10c      	bne.n	8001100 <HAL_RCC_OscConfig+0xbc>
 80010e6:	4b68      	ldr	r3, [pc, #416]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a67      	ldr	r2, [pc, #412]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	4b65      	ldr	r3, [pc, #404]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a64      	ldr	r2, [pc, #400]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e00b      	b.n	8001118 <HAL_RCC_OscConfig+0xd4>
 8001100:	4b61      	ldr	r3, [pc, #388]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a60      	ldr	r2, [pc, #384]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110a:	6013      	str	r3, [r2, #0]
 800110c:	4b5e      	ldr	r3, [pc, #376]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a5d      	ldr	r2, [pc, #372]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d013      	beq.n	8001148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fc36 	bl	8000990 <HAL_GetTick>
 8001124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fc32 	bl	8000990 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e356      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800113a:	4b53      	ldr	r3, [pc, #332]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0xe4>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc22 	bl	8000990 <HAL_GetTick>
 800114c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fc1e 	bl	8000990 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e342      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001162:	4b49      	ldr	r3, [pc, #292]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x10c>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 808c 	beq.w	8001298 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001180:	4b41      	ldr	r3, [pc, #260]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001188:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 800118c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800118e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_RCC_OscConfig+0x162>
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	2b18      	cmp	r3, #24
 800119a:	d137      	bne.n	800120c <HAL_RCC_OscConfig+0x1c8>
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d132      	bne.n	800120c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x17a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e314      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80011be:	4b32      	ldr	r3, [pc, #200]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 0219 	bic.w	r2, r3, #25
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	492f      	ldr	r1, [pc, #188]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbde 	bl	8000990 <HAL_GetTick>
 80011d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fbda 	bl	8000990 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e2fe      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011ea:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0f0      	beq.n	80011d8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	061b      	lsls	r3, r3, #24
 8001204:	4920      	ldr	r1, [pc, #128]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800120a:	e045      	b.n	8001298 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d026      	beq.n	8001262 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f023 0219 	bic.w	r2, r3, #25
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4919      	ldr	r1, [pc, #100]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001226:	f7ff fbb3 	bl	8000990 <HAL_GetTick>
 800122a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122e:	f7ff fbaf 	bl	8000990 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e2d3      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001240:	4b11      	ldr	r3, [pc, #68]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f0      	beq.n	800122e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	490b      	ldr	r1, [pc, #44]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 800125c:	4313      	orrs	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
 8001260:	e01a      	b.n	8001298 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a08      	ldr	r2, [pc, #32]	; (8001288 <HAL_RCC_OscConfig+0x244>)
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126e:	f7ff fb8f 	bl	8000990 <HAL_GetTick>
 8001272:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001276:	f7ff fb8b 	bl	8000990 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d903      	bls.n	800128c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001284:	2303      	movs	r3, #3
 8001286:	e2af      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
 8001288:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800128c:	4b96      	ldr	r3, [pc, #600]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0304 	and.w	r3, r3, #4
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1ee      	bne.n	8001276 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0310 	and.w	r3, r3, #16
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d06a      	beq.n	800137a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a4:	4b90      	ldr	r3, [pc, #576]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012ae:	4b8e      	ldr	r3, [pc, #568]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80012b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d007      	beq.n	80012ca <HAL_RCC_OscConfig+0x286>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b18      	cmp	r3, #24
 80012be:	d11b      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2b4>
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f003 0303 	and.w	r3, r3, #3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d116      	bne.n	80012f8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012ca:	4b87      	ldr	r3, [pc, #540]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_RCC_OscConfig+0x29e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	2b80      	cmp	r3, #128	; 0x80
 80012dc:	d001      	beq.n	80012e2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e282      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80012e2:	4b81      	ldr	r3, [pc, #516]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	061b      	lsls	r3, r3, #24
 80012f0:	497d      	ldr	r1, [pc, #500]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80012f6:	e040      	b.n	800137a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d023      	beq.n	8001348 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001300:	4b79      	ldr	r3, [pc, #484]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a78      	ldr	r2, [pc, #480]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800130c:	f7ff fb40 	bl	8000990 <HAL_GetTick>
 8001310:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001314:	f7ff fb3c 	bl	8000990 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e260      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001326:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800132e:	2b00      	cmp	r3, #0
 8001330:	d0f0      	beq.n	8001314 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001332:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	061b      	lsls	r3, r3, #24
 8001340:	4969      	ldr	r1, [pc, #420]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60cb      	str	r3, [r1, #12]
 8001346:	e018      	b.n	800137a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001348:	4b67      	ldr	r3, [pc, #412]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a66      	ldr	r2, [pc, #408]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 800134e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fb1c 	bl	8000990 <HAL_GetTick>
 8001358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800135c:	f7ff fb18 	bl	8000990 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e23c      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800136e:	4b5e      	ldr	r3, [pc, #376]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d036      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d019      	beq.n	80013c2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001392:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139a:	f7ff faf9 	bl	8000990 <HAL_GetTick>
 800139e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a2:	f7ff faf5 	bl	8000990 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e219      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013b4:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80013b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x35e>
 80013c0:	e018      	b.n	80013f4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c2:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80013c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c6:	4a48      	ldr	r2, [pc, #288]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80013c8:	f023 0301 	bic.w	r3, r3, #1
 80013cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ce:	f7ff fadf 	bl	8000990 <HAL_GetTick>
 80013d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013d4:	e008      	b.n	80013e8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d6:	f7ff fadb 	bl	8000990 <HAL_GetTick>
 80013da:	4602      	mov	r2, r0
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	2b02      	cmp	r3, #2
 80013e2:	d901      	bls.n	80013e8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e1ff      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80013e8:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80013ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f0      	bne.n	80013d6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d036      	beq.n	800146e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d019      	beq.n	800143c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001408:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a36      	ldr	r2, [pc, #216]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 800140e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001412:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001414:	f7ff fabc 	bl	8000990 <HAL_GetTick>
 8001418:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800141c:	f7ff fab8 	bl	8000990 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1dc      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800142e:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x3d8>
 800143a:	e018      	b.n	800146e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a29      	ldr	r2, [pc, #164]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001442:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001446:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001448:	f7ff faa2 	bl	8000990 <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff fa9e 	bl	8000990 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1c2      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 8086 	beq.w	8001588 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800147c:	4b1b      	ldr	r3, [pc, #108]	; (80014ec <HAL_RCC_OscConfig+0x4a8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <HAL_RCC_OscConfig+0x4a8>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001486:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001488:	f7ff fa82 	bl	8000990 <HAL_GetTick>
 800148c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001490:	f7ff fa7e 	bl	8000990 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1a2      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80014a2:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_RCC_OscConfig+0x4a8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d106      	bne.n	80014c4 <HAL_RCC_OscConfig+0x480>
 80014b6:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80014b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ba:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6713      	str	r3, [r2, #112]	; 0x70
 80014c2:	e032      	b.n	800152a <HAL_RCC_OscConfig+0x4e6>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d111      	bne.n	80014f0 <HAL_RCC_OscConfig+0x4ac>
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80014ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80014d2:	f023 0301 	bic.w	r3, r3, #1
 80014d6:	6713      	str	r3, [r2, #112]	; 0x70
 80014d8:	4b03      	ldr	r3, [pc, #12]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a02      	ldr	r2, [pc, #8]	; (80014e8 <HAL_RCC_OscConfig+0x4a4>)
 80014de:	f023 0304 	bic.w	r3, r3, #4
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e021      	b.n	800152a <HAL_RCC_OscConfig+0x4e6>
 80014e6:	bf00      	nop
 80014e8:	58024400 	.word	0x58024400
 80014ec:	58024800 	.word	0x58024800
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x4ce>
 80014f8:	4b83      	ldr	r3, [pc, #524]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a82      	ldr	r2, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	4b80      	ldr	r3, [pc, #512]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a7f      	ldr	r2, [pc, #508]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x4e6>
 8001512:	4b7d      	ldr	r3, [pc, #500]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a7c      	ldr	r2, [pc, #496]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	4b7a      	ldr	r3, [pc, #488]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a79      	ldr	r2, [pc, #484]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fa2d 	bl	8000990 <HAL_GetTick>
 8001536:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fa29 	bl	8000990 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e14b      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001550:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ee      	beq.n	800153a <HAL_RCC_OscConfig+0x4f6>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155e:	f7ff fa17 	bl	8000990 <HAL_GetTick>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fa13 	bl	8000990 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e135      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800157c:	4b62      	ldr	r3, [pc, #392]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 812a 	beq.w	80017e6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001592:	4b5d      	ldr	r3, [pc, #372]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800159a:	2b18      	cmp	r3, #24
 800159c:	f000 80ba 	beq.w	8001714 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	f040 8095 	bne.w	80016d4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015aa:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a56      	ldr	r2, [pc, #344]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80015b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff f9eb 	bl	8000990 <HAL_GetTick>
 80015ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015be:	f7ff f9e7 	bl	8000990 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e10b      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015dc:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80015de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_RCC_OscConfig+0x6c8>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80015ec:	0112      	lsls	r2, r2, #4
 80015ee:	430a      	orrs	r2, r1
 80015f0:	4945      	ldr	r1, [pc, #276]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	628b      	str	r3, [r1, #40]	; 0x28
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001604:	3b01      	subs	r3, #1
 8001606:	025b      	lsls	r3, r3, #9
 8001608:	b29b      	uxth	r3, r3
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001610:	3b01      	subs	r3, #1
 8001612:	041b      	lsls	r3, r3, #16
 8001614:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001618:	431a      	orrs	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161e:	3b01      	subs	r3, #1
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001626:	4938      	ldr	r1, [pc, #224]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001628:	4313      	orrs	r3, r2
 800162a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800162c:	4b36      	ldr	r3, [pc, #216]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800162e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001630:	4a35      	ldr	r2, [pc, #212]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001638:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800163a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163c:	4b34      	ldr	r3, [pc, #208]	; (8001710 <HAL_RCC_OscConfig+0x6cc>)
 800163e:	4013      	ands	r3, r2
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001644:	00d2      	lsls	r2, r2, #3
 8001646:	4930      	ldr	r1, [pc, #192]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f023 020c 	bic.w	r2, r3, #12
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	492b      	ldr	r1, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800165a:	4313      	orrs	r3, r2
 800165c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800165e:	4b2a      	ldr	r3, [pc, #168]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001662:	f023 0202 	bic.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	4927      	ldr	r1, [pc, #156]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800166c:	4313      	orrs	r3, r2
 800166e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	4a24      	ldr	r2, [pc, #144]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	4a21      	ldr	r2, [pc, #132]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001688:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800168e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001692:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001694:	4b1c      	ldr	r3, [pc, #112]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a0:	4b19      	ldr	r3, [pc, #100]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a18      	ldr	r2, [pc, #96]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80016a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ac:	f7ff f970 	bl	8000990 <HAL_GetTick>
 80016b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff f96c 	bl	8000990 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e090      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0x670>
 80016d2:	e088      	b.n	80017e6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0b      	ldr	r2, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80016da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff f956 	bl	8000990 <HAL_GetTick>
 80016e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e8:	f7ff f952 	bl	8000990 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e076      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016fa:	4b03      	ldr	r3, [pc, #12]	; (8001708 <HAL_RCC_OscConfig+0x6c4>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x6a4>
 8001706:	e06e      	b.n	80017e6 <HAL_RCC_OscConfig+0x7a2>
 8001708:	58024400 	.word	0x58024400
 800170c:	fffffc0c 	.word	0xfffffc0c
 8001710:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001714:	4b36      	ldr	r3, [pc, #216]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800171a:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	2b01      	cmp	r3, #1
 8001726:	d031      	beq.n	800178c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f003 0203 	and.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d12a      	bne.n	800178c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d122      	bne.n	800178c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d11a      	bne.n	800178c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	0a5b      	lsrs	r3, r3, #9
 800175a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d111      	bne.n	800178c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	0c1b      	lsrs	r3, r3, #16
 800176c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001776:	429a      	cmp	r2, r3
 8001778:	d108      	bne.n	800178c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	0e1b      	lsrs	r3, r3, #24
 800177e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001786:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e02b      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 8001792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001794:	08db      	lsrs	r3, r3, #3
 8001796:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800179a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d01f      	beq.n	80017e6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80017a6:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 80017a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017aa:	4a11      	ldr	r2, [pc, #68]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 80017ac:	f023 0301 	bic.w	r3, r3, #1
 80017b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017b2:	f7ff f8ed 	bl	8000990 <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80017b8:	bf00      	nop
 80017ba:	f7ff f8e9 	bl	8000990 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d0f9      	beq.n	80017ba <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 80017c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_RCC_OscConfig+0x7b0>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017d2:	00d2      	lsls	r2, r2, #3
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_RCC_OscConfig+0x7ac>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3730      	adds	r7, #48	; 0x30
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	58024400 	.word	0x58024400
 80017f4:	ffff0007 	.word	0xffff0007

080017f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e19c      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b8a      	ldr	r3, [pc, #552]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 030f 	and.w	r3, r3, #15
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b87      	ldr	r3, [pc, #540]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 020f 	bic.w	r2, r3, #15
 8001822:	4985      	ldr	r1, [pc, #532]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b83      	ldr	r3, [pc, #524]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e184      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d010      	beq.n	800186a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	4b7b      	ldr	r3, [pc, #492]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001854:	429a      	cmp	r2, r3
 8001856:	d908      	bls.n	800186a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4975      	ldr	r1, [pc, #468]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001866:	4313      	orrs	r3, r2
 8001868:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d010      	beq.n	8001898 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001882:	429a      	cmp	r2, r3
 8001884:	d908      	bls.n	8001898 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001886:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	496a      	ldr	r1, [pc, #424]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001894:	4313      	orrs	r3, r2
 8001896:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d010      	beq.n	80018c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	4b64      	ldr	r3, [pc, #400]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d908      	bls.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80018b4:	4b61      	ldr	r3, [pc, #388]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	495e      	ldr	r1, [pc, #376]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d010      	beq.n	80018f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69da      	ldr	r2, [r3, #28]
 80018d6:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80018de:	429a      	cmp	r2, r3
 80018e0:	d908      	bls.n	80018f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80018e2:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4953      	ldr	r1, [pc, #332]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d010      	beq.n	8001922 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	429a      	cmp	r2, r3
 800190e:	d908      	bls.n	8001922 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001910:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f023 020f 	bic.w	r2, r3, #15
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	4947      	ldr	r1, [pc, #284]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800191e:	4313      	orrs	r3, r2
 8001920:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d055      	beq.n	80019da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800192e:	4b43      	ldr	r3, [pc, #268]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	4940      	ldr	r1, [pc, #256]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800193c:	4313      	orrs	r3, r2
 800193e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d107      	bne.n	8001958 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001948:	4b3c      	ldr	r3, [pc, #240]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d121      	bne.n	8001998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0f6      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d107      	bne.n	8001970 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d115      	bne.n	8001998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0ea      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d107      	bne.n	8001988 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001980:	2b00      	cmp	r3, #0
 8001982:	d109      	bne.n	8001998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0de      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001988:	4b2c      	ldr	r3, [pc, #176]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e0d6      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001998:	4b28      	ldr	r3, [pc, #160]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	f023 0207 	bic.w	r2, r3, #7
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4925      	ldr	r1, [pc, #148]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019aa:	f7fe fff1 	bl	8000990 <HAL_GetTick>
 80019ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b2:	f7fe ffed 	bl	8000990 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0be      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c8:	4b1c      	ldr	r3, [pc, #112]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d1eb      	bne.n	80019b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d010      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	f003 030f 	and.w	r3, r3, #15
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d208      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f023 020f 	bic.w	r2, r3, #15
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	490e      	ldr	r1, [pc, #56]	; (8001a3c <HAL_RCC_ClockConfig+0x244>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d214      	bcs.n	8001a40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 020f 	bic.w	r2, r3, #15
 8001a1e:	4906      	ldr	r1, [pc, #24]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_RCC_ClockConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e086      	b.n	8001b46 <HAL_RCC_ClockConfig+0x34e>
 8001a38:	52002000 	.word	0x52002000
 8001a3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d208      	bcs.n	8001a6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a5c:	4b3c      	ldr	r3, [pc, #240]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	4939      	ldr	r1, [pc, #228]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d010      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001a80:	69db      	ldr	r3, [r3, #28]
 8001a82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d208      	bcs.n	8001a9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a8a:	4b31      	ldr	r3, [pc, #196]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	492e      	ldr	r1, [pc, #184]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0310 	and.w	r3, r3, #16
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d010      	beq.n	8001aca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699a      	ldr	r2, [r3, #24]
 8001aac:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d208      	bcs.n	8001aca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ab8:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	4922      	ldr	r1, [pc, #136]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0320 	and.w	r3, r3, #32
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d010      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69da      	ldr	r2, [r3, #28]
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d208      	bcs.n	8001af8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4917      	ldr	r1, [pc, #92]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af8:	f000 f834 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	4912      	ldr	r1, [pc, #72]	; (8001b54 <HAL_RCC_ClockConfig+0x35c>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
 8001b14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b16:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_RCC_ClockConfig+0x358>)
 8001b18:	699b      	ldr	r3, [r3, #24]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <HAL_RCC_ClockConfig+0x35c>)
 8001b20:	5cd3      	ldrb	r3, [r2, r3]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x360>)
 8001b2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b30:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <HAL_RCC_ClockConfig+0x364>)
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_RCC_ClockConfig+0x368>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fede 	bl	80008fc <HAL_InitTick>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	58024400 	.word	0x58024400
 8001b54:	080093c8 	.word	0x080093c8
 8001b58:	24000014 	.word	0x24000014
 8001b5c:	24000010 	.word	0x24000010
 8001b60:	24000018 	.word	0x24000018

08001b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b6a:	4bb3      	ldr	r3, [pc, #716]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b72:	2b18      	cmp	r3, #24
 8001b74:	f200 8155 	bhi.w	8001e22 <HAL_RCC_GetSysClockFreq+0x2be>
 8001b78:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08001be5 	.word	0x08001be5
 8001b84:	08001e23 	.word	0x08001e23
 8001b88:	08001e23 	.word	0x08001e23
 8001b8c:	08001e23 	.word	0x08001e23
 8001b90:	08001e23 	.word	0x08001e23
 8001b94:	08001e23 	.word	0x08001e23
 8001b98:	08001e23 	.word	0x08001e23
 8001b9c:	08001e23 	.word	0x08001e23
 8001ba0:	08001c0b 	.word	0x08001c0b
 8001ba4:	08001e23 	.word	0x08001e23
 8001ba8:	08001e23 	.word	0x08001e23
 8001bac:	08001e23 	.word	0x08001e23
 8001bb0:	08001e23 	.word	0x08001e23
 8001bb4:	08001e23 	.word	0x08001e23
 8001bb8:	08001e23 	.word	0x08001e23
 8001bbc:	08001e23 	.word	0x08001e23
 8001bc0:	08001c11 	.word	0x08001c11
 8001bc4:	08001e23 	.word	0x08001e23
 8001bc8:	08001e23 	.word	0x08001e23
 8001bcc:	08001e23 	.word	0x08001e23
 8001bd0:	08001e23 	.word	0x08001e23
 8001bd4:	08001e23 	.word	0x08001e23
 8001bd8:	08001e23 	.word	0x08001e23
 8001bdc:	08001e23 	.word	0x08001e23
 8001be0:	08001c17 	.word	0x08001c17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001be4:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d009      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001bf0:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	4a90      	ldr	r2, [pc, #576]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001c02:	e111      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001c04:	4b8d      	ldr	r3, [pc, #564]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c06:	61bb      	str	r3, [r7, #24]
      break;
 8001c08:	e10e      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001c0a:	4b8d      	ldr	r3, [pc, #564]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001c0c:	61bb      	str	r3, [r7, #24]
      break;
 8001c0e:	e10b      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001c10:	4b8c      	ldr	r3, [pc, #560]	; (8001e44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001c12:	61bb      	str	r3, [r7, #24]
      break;
 8001c14:	e108      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001c16:	4b88      	ldr	r3, [pc, #544]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001c20:	4b85      	ldr	r3, [pc, #532]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	091b      	lsrs	r3, r3, #4
 8001c26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001c2c:	4b82      	ldr	r3, [pc, #520]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001c36:	4b80      	ldr	r3, [pc, #512]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	ee07 3a90 	vmov	s15, r3
 8001c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80e1 	beq.w	8001e1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	f000 8083 	beq.w	8001d68 <HAL_RCC_GetSysClockFreq+0x204>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f200 80a1 	bhi.w	8001dac <HAL_RCC_GetSysClockFreq+0x248>
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x114>
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d056      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001c76:	e099      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001c78:	4b6f      	ldr	r3, [pc, #444]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0320 	and.w	r3, r3, #32
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d02d      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001c84:	4b6c      	ldr	r3, [pc, #432]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	08db      	lsrs	r3, r3, #3
 8001c8a:	f003 0303 	and.w	r3, r3, #3
 8001c8e:	4a6b      	ldr	r2, [pc, #428]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cae:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8001cc2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001cde:	e087      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001e4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001cf2:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cfa:	ee07 3a90 	vmov	s15, r3
 8001cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d22:	e065      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	ee07 3a90 	vmov	s15, r3
 8001d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001e50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d36:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001d66:	e043      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	ee07 3a90 	vmov	s15, r3
 8001d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001e54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d7a:	4b2f      	ldr	r3, [pc, #188]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001d8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001daa:	e021      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001db6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8001dd2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001e48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001dee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	0a5b      	lsrs	r3, r3, #9
 8001df6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	ee07 3a90 	vmov	s15, r3
 8001e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e08:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e14:	ee17 3a90 	vmov	r3, s15
 8001e18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	61bb      	str	r3, [r7, #24]
      break;
 8001e20:	e002      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e24:	61bb      	str	r3, [r7, #24]
      break;
 8001e26:	bf00      	nop
  }

  return sysclockfreq;
 8001e28:	69bb      	ldr	r3, [r7, #24]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	03d09000 	.word	0x03d09000
 8001e40:	003d0900 	.word	0x003d0900
 8001e44:	00f42400 	.word	0x00f42400
 8001e48:	46000000 	.word	0x46000000
 8001e4c:	4c742400 	.word	0x4c742400
 8001e50:	4a742400 	.word	0x4a742400
 8001e54:	4b742400 	.word	0x4b742400

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8001e5e:	f7ff fe81 	bl	8001b64 <HAL_RCC_GetSysClockFreq>
 8001e62:	4602      	mov	r2, r0
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	0a1b      	lsrs	r3, r3, #8
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	490f      	ldr	r1, [pc, #60]	; (8001eac <HAL_RCC_GetHCLKFreq+0x54>)
 8001e70:	5ccb      	ldrb	r3, [r1, r3]
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x50>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <HAL_RCC_GetHCLKFreq+0x54>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8001e94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e96:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	080093c8 	.word	0x080093c8
 8001eb0:	24000014 	.word	0x24000014
 8001eb4:	24000010 	.word	0x24000010

08001eb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8001ebc:	f7ff ffcc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	4904      	ldr	r1, [pc, #16]	; (8001ee0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ece:	5ccb      	ldrb	r3, [r1, r3]
 8001ed0:	f003 031f 	and.w	r3, r3, #31
 8001ed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	58024400 	.word	0x58024400
 8001ee0:	080093c8 	.word	0x080093c8

08001ee4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ee8:	b0c6      	sub	sp, #280	; 0x118
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8001f08:	2500      	movs	r5, #0
 8001f0a:	ea54 0305 	orrs.w	r3, r4, r5
 8001f0e:	d049      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8001f10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f1a:	d02f      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8001f1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f20:	d828      	bhi.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001f22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f26:	d01a      	beq.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f2c:	d822      	bhi.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f36:	d007      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f38:	e01c      	b.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f3a:	4bab      	ldr	r3, [pc, #684]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	4aaa      	ldr	r2, [pc, #680]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001f46:	e01a      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8001f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	2102      	movs	r1, #2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fa49 	bl	80043e8 <RCCEx_PLL2_Config>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001f5c:	e00f      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8001f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f62:	3328      	adds	r3, #40	; 0x28
 8001f64:	2102      	movs	r1, #2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f002 faf0 	bl	800454c <RCCEx_PLL3_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8001f72:	e004      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8001f7a:	e000      	b.n	8001f7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8001f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001f7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10a      	bne.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001f86:	4b98      	ldr	r3, [pc, #608]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8001f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f94:	4a94      	ldr	r2, [pc, #592]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001f96:	430b      	orrs	r3, r1
 8001f98:	6513      	str	r3, [r2, #80]	; 0x50
 8001f9a:	e003      	b.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001fa0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001fa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8001fb0:	f04f 0900 	mov.w	r9, #0
 8001fb4:	ea58 0309 	orrs.w	r3, r8, r9
 8001fb8:	d047      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8001fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d82a      	bhi.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8001fc4:	a201      	add	r2, pc, #4	; (adr r2, 8001fcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fca:	bf00      	nop
 8001fcc:	08001fe1 	.word	0x08001fe1
 8001fd0:	08001fef 	.word	0x08001fef
 8001fd4:	08002005 	.word	0x08002005
 8001fd8:	08002023 	.word	0x08002023
 8001fdc:	08002023 	.word	0x08002023
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fe0:	4b81      	ldr	r3, [pc, #516]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe4:	4a80      	ldr	r2, [pc, #512]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8001fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8001fec:	e01a      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8001fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001ff2:	3308      	adds	r3, #8
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 f9f6 	bl	80043e8 <RCCEx_PLL2_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002002:	e00f      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002008:	3328      	adds	r3, #40	; 0x28
 800200a:	2100      	movs	r1, #0
 800200c:	4618      	mov	r0, r3
 800200e:	f002 fa9d 	bl	800454c <RCCEx_PLL3_Config>
 8002012:	4603      	mov	r3, r0
 8002014:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002018:	e004      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002020:	e000      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002022:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10a      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800202c:	4b6e      	ldr	r3, [pc, #440]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800202e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002030:	f023 0107 	bic.w	r1, r3, #7
 8002034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	4a6b      	ldr	r2, [pc, #428]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800203c:	430b      	orrs	r3, r1
 800203e:	6513      	str	r3, [r2, #80]	; 0x50
 8002040:	e003      	b.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002042:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002046:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800204a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8002056:	f04f 0b00 	mov.w	fp, #0
 800205a:	ea5a 030b 	orrs.w	r3, sl, fp
 800205e:	d05b      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002064:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002068:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800206c:	d03b      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800206e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8002072:	d834      	bhi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002074:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002078:	d037      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 800207a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800207e:	d82e      	bhi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002080:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002084:	d033      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002086:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800208a:	d828      	bhi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800208c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002090:	d01a      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002096:	d822      	bhi.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800209c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80020a0:	d007      	beq.n	80020b2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80020a2:	e01c      	b.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a8:	4a4f      	ldr	r2, [pc, #316]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020b0:	e01e      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80020b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80020b6:	3308      	adds	r3, #8
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 f994 	bl	80043e8 <RCCEx_PLL2_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80020c6:	e013      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80020c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80020cc:	3328      	adds	r3, #40	; 0x28
 80020ce:	2100      	movs	r1, #0
 80020d0:	4618      	mov	r0, r3
 80020d2:	f002 fa3b 	bl	800454c <RCCEx_PLL3_Config>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80020dc:	e008      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80020e4:	e004      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80020e6:	bf00      	nop
 80020e8:	e002      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80020ea:	bf00      	nop
 80020ec:	e000      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80020ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80020f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10b      	bne.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80020f8:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002104:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002108:	4a37      	ldr	r2, [pc, #220]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800210a:	430b      	orrs	r3, r1
 800210c:	6593      	str	r3, [r2, #88]	; 0x58
 800210e:	e003      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002110:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002114:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002120:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002124:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800212e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002132:	460b      	mov	r3, r1
 8002134:	4313      	orrs	r3, r2
 8002136:	d05d      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800213c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002140:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8002144:	d03b      	beq.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002146:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800214a:	d834      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800214c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002150:	d037      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8002152:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002156:	d82e      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002158:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800215c:	d033      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800215e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002162:	d828      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002168:	d01a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800216a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800216e:	d822      	bhi.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002178:	d007      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800217a:	e01c      	b.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800217c:	4b1a      	ldr	r3, [pc, #104]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002186:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002188:	e01e      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800218a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800218e:	3308      	adds	r3, #8
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f002 f928 	bl	80043e8 <RCCEx_PLL2_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800219e:	e013      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80021a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021a4:	3328      	adds	r3, #40	; 0x28
 80021a6:	2100      	movs	r1, #0
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 f9cf 	bl	800454c <RCCEx_PLL3_Config>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021b4:	e008      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80021bc:	e004      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80021be:	bf00      	nop
 80021c0:	e002      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80021c2:	bf00      	nop
 80021c4:	e000      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80021c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10d      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80021d0:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80021d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80021d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80021e0:	4a01      	ldr	r2, [pc, #4]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80021e2:	430b      	orrs	r3, r1
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
 80021e6:	e005      	b.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80021e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80021f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80021f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002200:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800220a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800220e:	460b      	mov	r3, r1
 8002210:	4313      	orrs	r3, r2
 8002212:	d03a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8002214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221a:	2b30      	cmp	r3, #48	; 0x30
 800221c:	d01f      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800221e:	2b30      	cmp	r3, #48	; 0x30
 8002220:	d819      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002222:	2b20      	cmp	r3, #32
 8002224:	d00c      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002226:	2b20      	cmp	r3, #32
 8002228:	d815      	bhi.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d019      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800222e:	2b10      	cmp	r3, #16
 8002230:	d111      	bne.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002232:	4baa      	ldr	r3, [pc, #680]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	4aa9      	ldr	r2, [pc, #676]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800223e:	e011      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002244:	3308      	adds	r3, #8
 8002246:	2102      	movs	r1, #2
 8002248:	4618      	mov	r0, r3
 800224a:	f002 f8cd 	bl	80043e8 <RCCEx_PLL2_Config>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8002254:	e006      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800225c:	e002      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800225e:	bf00      	nop
 8002260:	e000      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8002262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002264:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800226c:	4b9b      	ldr	r3, [pc, #620]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227a:	4a98      	ldr	r2, [pc, #608]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800227c:	430b      	orrs	r3, r1
 800227e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002280:	e003      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002282:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002286:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800228a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800228e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002292:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80022a0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80022a4:	460b      	mov	r3, r1
 80022a6:	4313      	orrs	r3, r2
 80022a8:	d051      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80022aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022b4:	d035      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80022b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ba:	d82e      	bhi.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80022bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80022c0:	d031      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80022c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80022c6:	d828      	bhi.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80022c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022cc:	d01a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80022ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022d2:	d822      	bhi.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022dc:	d007      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80022de:	e01c      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022e0:	4b7e      	ldr	r3, [pc, #504]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80022e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e4:	4a7d      	ldr	r2, [pc, #500]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80022e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80022ec:	e01c      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80022f2:	3308      	adds	r3, #8
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f002 f876 	bl	80043e8 <RCCEx_PLL2_Config>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002302:	e011      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002308:	3328      	adds	r3, #40	; 0x28
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f002 f91d 	bl	800454c <RCCEx_PLL3_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002318:	e006      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002320:	e002      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002322:	bf00      	nop
 8002324:	e000      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8002326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800232c:	2b00      	cmp	r3, #0
 800232e:	d10a      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002330:	4b6a      	ldr	r3, [pc, #424]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800233c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800233e:	4a67      	ldr	r2, [pc, #412]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002340:	430b      	orrs	r3, r1
 8002342:	6513      	str	r3, [r2, #80]	; 0x50
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002346:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800234a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800234e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800235a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800235e:	2300      	movs	r3, #0
 8002360:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002364:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002368:	460b      	mov	r3, r1
 800236a:	4313      	orrs	r3, r2
 800236c:	d053      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800236e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002378:	d033      	beq.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800237a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237e:	d82c      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002384:	d02f      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8002386:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800238a:	d826      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800238c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002390:	d02b      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002392:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002396:	d820      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8002398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800239c:	d012      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800239e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023a2:	d81a      	bhi.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d022      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d115      	bne.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80023ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023b2:	3308      	adds	r3, #8
 80023b4:	2101      	movs	r1, #1
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 f816 	bl	80043e8 <RCCEx_PLL2_Config>
 80023bc:	4603      	mov	r3, r0
 80023be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80023c2:	e015      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80023c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023c8:	3328      	adds	r3, #40	; 0x28
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f002 f8bd 	bl	800454c <RCCEx_PLL3_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80023d8:	e00a      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80023e0:	e006      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80023e2:	bf00      	nop
 80023e4:	e004      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80023e6:	bf00      	nop
 80023e8:	e002      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80023ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10a      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80023fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002406:	4a35      	ldr	r2, [pc, #212]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8002408:	430b      	orrs	r3, r1
 800240a:	6513      	str	r3, [r2, #80]	; 0x50
 800240c:	e003      	b.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800240e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002412:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800241a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800241e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002422:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002426:	2300      	movs	r3, #0
 8002428:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800242c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002430:	460b      	mov	r3, r1
 8002432:	4313      	orrs	r3, r2
 8002434:	d058      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800243a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d033      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8002444:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002448:	d82c      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244e:	d02f      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8002450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002454:	d826      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002456:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800245a:	d02b      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800245c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002460:	d820      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8002462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002466:	d012      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800246c:	d81a      	bhi.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800246e:	2b00      	cmp	r3, #0
 8002470:	d022      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002472:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002476:	d115      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800247c:	3308      	adds	r3, #8
 800247e:	2101      	movs	r1, #1
 8002480:	4618      	mov	r0, r3
 8002482:	f001 ffb1 	bl	80043e8 <RCCEx_PLL2_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800248c:	e015      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800248e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002492:	3328      	adds	r3, #40	; 0x28
 8002494:	2101      	movs	r1, #1
 8002496:	4618      	mov	r0, r3
 8002498:	f002 f858 	bl	800454c <RCCEx_PLL3_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80024a2:	e00a      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80024aa:	e006      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80024ac:	bf00      	nop
 80024ae:	e004      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80024b0:	bf00      	nop
 80024b2:	e002      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80024b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10e      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80024ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80024d2:	4a02      	ldr	r2, [pc, #8]	; (80024dc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6593      	str	r3, [r2, #88]	; 0x58
 80024d8:	e006      	b.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80024da:	bf00      	nop
 80024dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80024e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80024f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80024fe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002502:	460b      	mov	r3, r1
 8002504:	4313      	orrs	r3, r2
 8002506:	d037      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800250c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002512:	d00e      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8002514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002518:	d816      	bhi.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800251a:	2b00      	cmp	r3, #0
 800251c:	d018      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800251e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002522:	d111      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002524:	4bc4      	ldr	r3, [pc, #784]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	4ac3      	ldr	r2, [pc, #780]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800252a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002530:	e00f      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002536:	3308      	adds	r3, #8
 8002538:	2101      	movs	r1, #1
 800253a:	4618      	mov	r0, r3
 800253c:	f001 ff54 	bl	80043e8 <RCCEx_PLL2_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002546:	e004      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800254e:	e000      	b.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8002550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002552:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10a      	bne.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800255a:	4bb7      	ldr	r3, [pc, #732]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002568:	4ab3      	ldr	r2, [pc, #716]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800256a:	430b      	orrs	r3, r1
 800256c:	6513      	str	r3, [r2, #80]	; 0x50
 800256e:	e003      	b.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002574:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800257c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002580:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002584:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800258e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002592:	460b      	mov	r3, r1
 8002594:	4313      	orrs	r3, r2
 8002596:	d039      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800259c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d81c      	bhi.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80025a2:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025e5 	.word	0x080025e5
 80025ac:	080025b9 	.word	0x080025b9
 80025b0:	080025c7 	.word	0x080025c7
 80025b4:	080025e5 	.word	0x080025e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b8:	4b9f      	ldr	r3, [pc, #636]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025bc:	4a9e      	ldr	r2, [pc, #632]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80025c4:	e00f      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80025c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025ca:	3308      	adds	r3, #8
 80025cc:	2102      	movs	r1, #2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f001 ff0a 	bl	80043e8 <RCCEx_PLL2_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80025da:	e004      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80025e2:	e000      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80025e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10a      	bne.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80025ee:	4b92      	ldr	r3, [pc, #584]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f2:	f023 0103 	bic.w	r1, r3, #3
 80025f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80025fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fc:	4a8e      	ldr	r2, [pc, #568]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80025fe:	430b      	orrs	r3, r1
 8002600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002602:	e003      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002608:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800260c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002618:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002622:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002626:	460b      	mov	r3, r1
 8002628:	4313      	orrs	r3, r2
 800262a:	f000 8099 	beq.w	8002760 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800262e:	4b83      	ldr	r3, [pc, #524]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a82      	ldr	r2, [pc, #520]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800263a:	f7fe f9a9 	bl	8000990 <HAL_GetTick>
 800263e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002642:	e00b      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe f9a4 	bl	8000990 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b64      	cmp	r3, #100	; 0x64
 8002652:	d903      	bls.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265c:	4b77      	ldr	r3, [pc, #476]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ed      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8002668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800266c:	2b00      	cmp	r3, #0
 800266e:	d173      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002670:	4b71      	ldr	r3, [pc, #452]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002672:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002678:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800267c:	4053      	eors	r3, r2
 800267e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002686:	4b6c      	ldr	r3, [pc, #432]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800268e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	4b69      	ldr	r3, [pc, #420]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002696:	4a68      	ldr	r2, [pc, #416]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800269e:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	4a65      	ldr	r2, [pc, #404]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80026a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80026aa:	4a63      	ldr	r2, [pc, #396]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80026ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80026b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80026b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80026ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026be:	d118      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe f966 	bl	8000990 <HAL_GetTick>
 80026c4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026c8:	e00d      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ca:	f7fe f961 	bl	8000990 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026d4:	1ad2      	subs	r2, r2, r3
 80026d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80026da:	429a      	cmp	r2, r3
 80026dc:	d903      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80026e4:	e005      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026e6:	4b54      	ldr	r3, [pc, #336]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0eb      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80026f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d129      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80026fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800270a:	d10e      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800270c:	4b4a      	ldr	r3, [pc, #296]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800270e:	691b      	ldr	r3, [r3, #16]
 8002710:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002714:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002718:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800271c:	091a      	lsrs	r2, r3, #4
 800271e:	4b48      	ldr	r3, [pc, #288]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002720:	4013      	ands	r3, r2
 8002722:	4a45      	ldr	r2, [pc, #276]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002724:	430b      	orrs	r3, r1
 8002726:	6113      	str	r3, [r2, #16]
 8002728:	e005      	b.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800272a:	4b43      	ldr	r3, [pc, #268]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	4a42      	ldr	r2, [pc, #264]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002730:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002734:	6113      	str	r3, [r2, #16]
 8002736:	4b40      	ldr	r3, [pc, #256]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002738:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800273a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800273e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002746:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8002748:	430b      	orrs	r3, r1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800274e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002752:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8002756:	e003      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002758:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800275c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f002 0301 	and.w	r3, r2, #1
 800276c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002776:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800277a:	460b      	mov	r3, r1
 800277c:	4313      	orrs	r3, r2
 800277e:	f000 808f 	beq.w	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002786:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002788:	2b28      	cmp	r3, #40	; 0x28
 800278a:	d871      	bhi.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800278c:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800278e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002792:	bf00      	nop
 8002794:	08002879 	.word	0x08002879
 8002798:	08002871 	.word	0x08002871
 800279c:	08002871 	.word	0x08002871
 80027a0:	08002871 	.word	0x08002871
 80027a4:	08002871 	.word	0x08002871
 80027a8:	08002871 	.word	0x08002871
 80027ac:	08002871 	.word	0x08002871
 80027b0:	08002871 	.word	0x08002871
 80027b4:	08002845 	.word	0x08002845
 80027b8:	08002871 	.word	0x08002871
 80027bc:	08002871 	.word	0x08002871
 80027c0:	08002871 	.word	0x08002871
 80027c4:	08002871 	.word	0x08002871
 80027c8:	08002871 	.word	0x08002871
 80027cc:	08002871 	.word	0x08002871
 80027d0:	08002871 	.word	0x08002871
 80027d4:	0800285b 	.word	0x0800285b
 80027d8:	08002871 	.word	0x08002871
 80027dc:	08002871 	.word	0x08002871
 80027e0:	08002871 	.word	0x08002871
 80027e4:	08002871 	.word	0x08002871
 80027e8:	08002871 	.word	0x08002871
 80027ec:	08002871 	.word	0x08002871
 80027f0:	08002871 	.word	0x08002871
 80027f4:	08002879 	.word	0x08002879
 80027f8:	08002871 	.word	0x08002871
 80027fc:	08002871 	.word	0x08002871
 8002800:	08002871 	.word	0x08002871
 8002804:	08002871 	.word	0x08002871
 8002808:	08002871 	.word	0x08002871
 800280c:	08002871 	.word	0x08002871
 8002810:	08002871 	.word	0x08002871
 8002814:	08002879 	.word	0x08002879
 8002818:	08002871 	.word	0x08002871
 800281c:	08002871 	.word	0x08002871
 8002820:	08002871 	.word	0x08002871
 8002824:	08002871 	.word	0x08002871
 8002828:	08002871 	.word	0x08002871
 800282c:	08002871 	.word	0x08002871
 8002830:	08002871 	.word	0x08002871
 8002834:	08002879 	.word	0x08002879
 8002838:	58024400 	.word	0x58024400
 800283c:	58024800 	.word	0x58024800
 8002840:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002848:	3308      	adds	r3, #8
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fdcb 	bl	80043e8 <RCCEx_PLL2_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002858:	e00f      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800285a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800285e:	3328      	adds	r3, #40	; 0x28
 8002860:	2101      	movs	r1, #1
 8002862:	4618      	mov	r0, r3
 8002864:	f001 fe72 	bl	800454c <RCCEx_PLL3_Config>
 8002868:	4603      	mov	r3, r0
 800286a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800286e:	e004      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002876:	e000      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8002878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800287a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10a      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002882:	4bbf      	ldr	r3, [pc, #764]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002886:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800288a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800288e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002890:	4abb      	ldr	r2, [pc, #748]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002892:	430b      	orrs	r3, r1
 8002894:	6553      	str	r3, [r2, #84]	; 0x54
 8002896:	e003      	b.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800289c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80028a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a8:	f002 0302 	and.w	r3, r2, #2
 80028ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028b0:	2300      	movs	r3, #0
 80028b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4313      	orrs	r3, r2
 80028be:	d041      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80028c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d824      	bhi.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80028ca:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80028cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d0:	0800291d 	.word	0x0800291d
 80028d4:	080028e9 	.word	0x080028e9
 80028d8:	080028ff 	.word	0x080028ff
 80028dc:	0800291d 	.word	0x0800291d
 80028e0:	0800291d 	.word	0x0800291d
 80028e4:	0800291d 	.word	0x0800291d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80028e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80028ec:	3308      	adds	r3, #8
 80028ee:	2101      	movs	r1, #1
 80028f0:	4618      	mov	r0, r3
 80028f2:	f001 fd79 	bl	80043e8 <RCCEx_PLL2_Config>
 80028f6:	4603      	mov	r3, r0
 80028f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80028fc:	e00f      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80028fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002902:	3328      	adds	r3, #40	; 0x28
 8002904:	2101      	movs	r1, #1
 8002906:	4618      	mov	r0, r3
 8002908:	f001 fe20 	bl	800454c <RCCEx_PLL3_Config>
 800290c:	4603      	mov	r3, r0
 800290e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002912:	e004      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800291a:	e000      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800291c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002926:	4b96      	ldr	r3, [pc, #600]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f023 0107 	bic.w	r1, r3, #7
 800292e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002934:	4a92      	ldr	r2, [pc, #584]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002936:	430b      	orrs	r3, r1
 8002938:	6553      	str	r3, [r2, #84]	; 0x54
 800293a:	e003      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f002 0304 	and.w	r3, r2, #4
 8002950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002954:	2300      	movs	r3, #0
 8002956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800295a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800295e:	460b      	mov	r3, r1
 8002960:	4313      	orrs	r3, r2
 8002962:	d044      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	2b05      	cmp	r3, #5
 800296e:	d825      	bhi.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8002970:	a201      	add	r2, pc, #4	; (adr r2, 8002978 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8002972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002976:	bf00      	nop
 8002978:	080029c5 	.word	0x080029c5
 800297c:	08002991 	.word	0x08002991
 8002980:	080029a7 	.word	0x080029a7
 8002984:	080029c5 	.word	0x080029c5
 8002988:	080029c5 	.word	0x080029c5
 800298c:	080029c5 	.word	0x080029c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002994:	3308      	adds	r3, #8
 8002996:	2101      	movs	r1, #1
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fd25 	bl	80043e8 <RCCEx_PLL2_Config>
 800299e:	4603      	mov	r3, r0
 80029a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80029a4:	e00f      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029aa:	3328      	adds	r3, #40	; 0x28
 80029ac:	2101      	movs	r1, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fdcc 	bl	800454c <RCCEx_PLL3_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80029ba:	e004      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80029c2:	e000      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80029c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10b      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029ce:	4b6c      	ldr	r3, [pc, #432]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80029d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d2:	f023 0107 	bic.w	r1, r3, #7
 80029d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029de:	4a68      	ldr	r2, [pc, #416]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80029e0:	430b      	orrs	r3, r1
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
 80029e4:	e003      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80029ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80029ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80029f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f6:	f002 0320 	and.w	r3, r2, #32
 80029fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002a04:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	d055      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a1a:	d033      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8002a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a20:	d82c      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d02f      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8002a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2c:	d826      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002a2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a32:	d02b      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8002a34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a38:	d820      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3e:	d012      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8002a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a44:	d81a      	bhi.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d022      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8002a4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a4e:	d115      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a54:	3308      	adds	r3, #8
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f001 fcc5 	bl	80043e8 <RCCEx_PLL2_Config>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002a64:	e015      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002a6a:	3328      	adds	r3, #40	; 0x28
 8002a6c:	2102      	movs	r1, #2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 fd6c 	bl	800454c <RCCEx_PLL3_Config>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002a82:	e006      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002a84:	bf00      	nop
 8002a86:	e004      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002a88:	bf00      	nop
 8002a8a:	e002      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002a8c:	bf00      	nop
 8002a8e:	e000      	b.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8002a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10b      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aaa:	4a35      	ldr	r2, [pc, #212]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6553      	str	r3, [r2, #84]	; 0x54
 8002ab0:	e003      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ab2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ab6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002ac6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002aca:	2300      	movs	r3, #0
 8002acc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ad0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	d058      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002ada:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ade:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ae2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002ae6:	d033      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8002ae8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002aec:	d82c      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af2:	d02f      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8002af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af8:	d826      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002afa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002afe:	d02b      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8002b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b04:	d820      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002b06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b0a:	d012      	beq.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8002b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b10:	d81a      	bhi.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d022      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d115      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b20:	3308      	adds	r3, #8
 8002b22:	2100      	movs	r1, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fc5f 	bl	80043e8 <RCCEx_PLL2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002b30:	e015      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b36:	3328      	adds	r3, #40	; 0x28
 8002b38:	2102      	movs	r1, #2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 fd06 	bl	800454c <RCCEx_PLL3_Config>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002b46:	e00a      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002b4e:	e006      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002b50:	bf00      	nop
 8002b52:	e004      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002b54:	bf00      	nop
 8002b56:	e002      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8002b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b6a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8002b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b76:	4a02      	ldr	r2, [pc, #8]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8002b78:	430b      	orrs	r3, r1
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b7c:	e006      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8002b7e:	bf00      	nop
 8002b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002b88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b94:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002b98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ba2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	d055      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bb4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002bb8:	d033      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8002bba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002bbe:	d82c      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002bc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc4:	d02f      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8002bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bca:	d826      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002bcc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002bd0:	d02b      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8002bd2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002bd6:	d820      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bdc:	d012      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8002bde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002be2:	d81a      	bhi.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d022      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d115      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002bf2:	3308      	adds	r3, #8
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f001 fbf6 	bl	80043e8 <RCCEx_PLL2_Config>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002c02:	e015      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c08:	3328      	adds	r3, #40	; 0x28
 8002c0a:	2102      	movs	r1, #2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f001 fc9d 	bl	800454c <RCCEx_PLL3_Config>
 8002c12:	4603      	mov	r3, r0
 8002c14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002c18:	e00a      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002c20:	e006      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002c22:	bf00      	nop
 8002c24:	e004      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002c26:	bf00      	nop
 8002c28:	e002      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002c2a:	bf00      	nop
 8002c2c:	e000      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8002c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002c38:	4ba0      	ldr	r3, [pc, #640]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8002c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c48:	4a9c      	ldr	r2, [pc, #624]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002c4a:	430b      	orrs	r3, r1
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c4e:	e003      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002c54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8002c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c60:	f002 0308 	and.w	r3, r2, #8
 8002c64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002c72:	460b      	mov	r3, r1
 8002c74:	4313      	orrs	r3, r2
 8002c76:	d01e      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8002c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002c8a:	3328      	adds	r3, #40	; 0x28
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f001 fc5c 	bl	800454c <RCCEx_PLL3_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8002ca0:	4b86      	ldr	r3, [pc, #536]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cb0:	4a82      	ldr	r2, [pc, #520]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002cb2:	430b      	orrs	r3, r1
 8002cb4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	f002 0310 	and.w	r3, r2, #16
 8002cc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ccc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	d01e      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002cda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce2:	d10c      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ce8:	3328      	adds	r3, #40	; 0x28
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fc2d 	bl	800454c <RCCEx_PLL3_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002cfe:	4b6f      	ldr	r3, [pc, #444]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d0e:	4a6b      	ldr	r2, [pc, #428]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002d20:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d22:	2300      	movs	r3, #0
 8002d24:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d26:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	d03e      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3c:	d022      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8002d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d42:	d81b      	bhi.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8002d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8002d4e:	e015      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d54:	3308      	adds	r3, #8
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f001 fb45 	bl	80043e8 <RCCEx_PLL2_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002d64:	e00f      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d6a:	3328      	adds	r3, #40	; 0x28
 8002d6c:	2102      	movs	r1, #2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f001 fbec 	bl	800454c <RCCEx_PLL3_Config>
 8002d74:	4603      	mov	r3, r0
 8002d76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8002d7a:	e004      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002d82:	e000      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8002d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002d9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002d9e:	4a47      	ldr	r2, [pc, #284]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002da0:	430b      	orrs	r3, r1
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	e003      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002daa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002dba:	673b      	str	r3, [r7, #112]	; 0x70
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	677b      	str	r3, [r7, #116]	; 0x74
 8002dc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	d03b      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8002dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002dd6:	d01f      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8002dd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002ddc:	d818      	bhi.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8002dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002de2:	d003      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8002de4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002de8:	d007      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8002dea:	e011      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dec:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8002df8:	e00f      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002dfe:	3328      	adds	r3, #40	; 0x28
 8002e00:	2101      	movs	r1, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fba2 	bl	800454c <RCCEx_PLL3_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8002e0e:	e004      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e16:	e000      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8002e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d10b      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e22:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e32:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6553      	str	r3, [r2, #84]	; 0x54
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002e3e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8002e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e50:	2300      	movs	r3, #0
 8002e52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002e58:	460b      	mov	r3, r1
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	d034      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8002e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8002e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e6c:	d007      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8002e6e:	e011      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002e7c:	e00e      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e82:	3308      	adds	r3, #8
 8002e84:	2102      	movs	r1, #2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f001 faae 	bl	80043e8 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10d      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb2:	4a02      	ldr	r2, [pc, #8]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eb8:	e006      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8002eba:	bf00      	nop
 8002ebc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002ec4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8002ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	667b      	str	r3, [r7, #100]	; 0x64
 8002eda:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	d00c      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002ee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ee8:	3328      	adds	r3, #40	; 0x28
 8002eea:	2102      	movs	r1, #2
 8002eec:	4618      	mov	r0, r3
 8002eee:	f001 fb2d 	bl	800454c <RCCEx_PLL3_Config>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002efe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f06:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002f0a:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f10:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002f14:	460b      	mov	r3, r1
 8002f16:	4313      	orrs	r3, r2
 8002f18:	d036      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8002f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f24:	d018      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8002f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2a:	d811      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8002f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f30:	d014      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8002f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f36:	d80b      	bhi.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d011      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8002f3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f40:	d106      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f42:	4bb7      	ldr	r3, [pc, #732]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	4ab6      	ldr	r2, [pc, #728]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8002f4e:	e008      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8002f56:	e004      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8002f58:	bf00      	nop
 8002f5a:	e002      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8002f60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f6a:	4bad      	ldr	r3, [pc, #692]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f78:	4aa9      	ldr	r2, [pc, #676]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002f7a:	430b      	orrs	r3, r1
 8002f7c:	6553      	str	r3, [r2, #84]	; 0x54
 8002f7e:	e003      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002f84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8002f94:	653b      	str	r3, [r7, #80]	; 0x50
 8002f96:	2300      	movs	r3, #0
 8002f98:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	d009      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002fa4:	4b9e      	ldr	r3, [pc, #632]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fa8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a9b      	ldr	r2, [pc, #620]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002fc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	d009      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fd4:	4b92      	ldr	r3, [pc, #584]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8002fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe2:	4a8f      	ldr	r2, [pc, #572]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8002ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8002ffa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002ffe:	460b      	mov	r3, r1
 8003000:	4313      	orrs	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003004:	4b86      	ldr	r3, [pc, #536]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	4a85      	ldr	r2, [pc, #532]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800300a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800300e:	6113      	str	r3, [r2, #16]
 8003010:	4b83      	ldr	r3, [pc, #524]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003012:	6919      	ldr	r1, [r3, #16]
 8003014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003018:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800301c:	4a80      	ldr	r2, [pc, #512]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800301e:	430b      	orrs	r3, r1
 8003020:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003030:	2300      	movs	r3, #0
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003038:	460b      	mov	r3, r1
 800303a:	4313      	orrs	r3, r2
 800303c:	d009      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800303e:	4b78      	ldr	r3, [pc, #480]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003042:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	4a74      	ldr	r2, [pc, #464]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800304e:	430b      	orrs	r3, r1
 8003050:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800305a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800305e:	633b      	str	r3, [r7, #48]	; 0x30
 8003060:	2300      	movs	r3, #0
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
 8003064:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003068:	460b      	mov	r3, r1
 800306a:	4313      	orrs	r3, r2
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800306e:	4b6c      	ldr	r3, [pc, #432]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800307e:	4a68      	ldr	r2, [pc, #416]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003080:	430b      	orrs	r3, r1
 8003082:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308c:	2100      	movs	r1, #0
 800308e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800309a:	460b      	mov	r3, r1
 800309c:	4313      	orrs	r3, r2
 800309e:	d011      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030a4:	3308      	adds	r3, #8
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f001 f99d 	bl	80043e8 <RCCEx_PLL2_Config>
 80030ae:	4603      	mov	r3, r0
 80030b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80030b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80030c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	2100      	movs	r1, #0
 80030ce:	6239      	str	r1, [r7, #32]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
 80030d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80030da:	460b      	mov	r3, r1
 80030dc:	4313      	orrs	r3, r2
 80030de:	d011      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030e4:	3308      	adds	r3, #8
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 f97d 	bl	80043e8 <RCCEx_PLL2_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80030f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003100:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	2100      	movs	r1, #0
 800310e:	61b9      	str	r1, [r7, #24]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	61fb      	str	r3, [r7, #28]
 8003116:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800311a:	460b      	mov	r3, r1
 800311c:	4313      	orrs	r3, r2
 800311e:	d011      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003124:	3308      	adds	r3, #8
 8003126:	2102      	movs	r1, #2
 8003128:	4618      	mov	r0, r3
 800312a:	f001 f95d 	bl	80043e8 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8003134:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003138:	2b00      	cmp	r3, #0
 800313a:	d003      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800313c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003140:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314c:	2100      	movs	r1, #0
 800314e:	6139      	str	r1, [r7, #16]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800315a:	460b      	mov	r3, r1
 800315c:	4313      	orrs	r3, r2
 800315e:	d011      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003164:	3328      	adds	r3, #40	; 0x28
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f001 f9ef 	bl	800454c <RCCEx_PLL3_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8003174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003180:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318c:	2100      	movs	r1, #0
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	f003 0310 	and.w	r3, r3, #16
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d011      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031a4:	3328      	adds	r3, #40	; 0x28
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 f9cf 	bl	800454c <RCCEx_PLL3_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80031b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80031c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	2100      	movs	r1, #0
 80031ce:	6039      	str	r1, [r7, #0]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	607b      	str	r3, [r7, #4]
 80031d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80031da:	460b      	mov	r3, r1
 80031dc:	4313      	orrs	r3, r2
 80031de:	d011      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e4:	3328      	adds	r3, #40	; 0x28
 80031e6:	2102      	movs	r1, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 f9af 	bl	800454c <RCCEx_PLL3_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80031f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003200:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8003204:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
}
 8003212:	4618      	mov	r0, r3
 8003214:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8003218:	46bd      	mov	sp, r7
 800321a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800321e:	bf00      	nop
 8003220:	58024400 	.word	0x58024400

08003224 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b090      	sub	sp, #64	; 0x40
 8003228:	af00      	add	r7, sp, #0
 800322a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800322e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003232:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8003236:	430b      	orrs	r3, r1
 8003238:	f040 8094 	bne.w	8003364 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800323c:	4b9b      	ldr	r3, [pc, #620]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800323e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	2b04      	cmp	r3, #4
 800324a:	f200 8087 	bhi.w	800335c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800324e:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8003250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003254:	08003269 	.word	0x08003269
 8003258:	08003291 	.word	0x08003291
 800325c:	080032b9 	.word	0x080032b9
 8003260:	08003355 	.word	0x08003355
 8003264:	080032e1 	.word	0x080032e1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003268:	4b90      	ldr	r3, [pc, #576]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003274:	d108      	bne.n	8003288 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327a:	4618      	mov	r0, r3
 800327c:	f000 ff62 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003284:	f000 bc93 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003288:	2300      	movs	r3, #0
 800328a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800328c:	f000 bc8f 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003290:	4b86      	ldr	r3, [pc, #536]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003298:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800329c:	d108      	bne.n	80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800329e:	f107 0318 	add.w	r3, r7, #24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fca6 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80032ac:	f000 bc7f 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80032b4:	f000 bc7b 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80032b8:	4b7c      	ldr	r3, [pc, #496]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032c4:	d108      	bne.n	80032d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80032c6:	f107 030c 	add.w	r3, r7, #12
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fde6 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80032d4:	f000 bc6b 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80032dc:	f000 bc67 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80032e0:	4b72      	ldr	r3, [pc, #456]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80032e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80032ea:	4b70      	ldr	r3, [pc, #448]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d10c      	bne.n	8003310 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d109      	bne.n	8003310 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032fc:	4b6b      	ldr	r3, [pc, #428]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	08db      	lsrs	r3, r3, #3
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	4a6a      	ldr	r2, [pc, #424]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800330e:	e01f      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003310:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003318:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800331c:	d106      	bne.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003324:	d102      	bne.n	800332c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003326:	4b63      	ldr	r3, [pc, #396]	; (80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
 800332a:	e011      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800332c:	4b5f      	ldr	r3, [pc, #380]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003338:	d106      	bne.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800333c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003340:	d102      	bne.n	8003348 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003342:	4b5d      	ldr	r3, [pc, #372]	; (80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003346:	e003      	b.n	8003350 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800334c:	f000 bc2f 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003350:	f000 bc2d 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003354:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003358:	f000 bc29 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003360:	f000 bc25 	b.w	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8003364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003368:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800336c:	430b      	orrs	r3, r1
 800336e:	f040 80a7 	bne.w	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800337a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003382:	d054      	beq.n	800342e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338a:	f200 808b 	bhi.w	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003394:	f000 8083 	beq.w	800349e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8003398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800339e:	f200 8081 	bhi.w	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80033a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a8:	d02f      	beq.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033b0:	d878      	bhi.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80033b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033be:	d012      	beq.n	80033e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80033c0:	e070      	b.n	80034a4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80033c2:	4b3a      	ldr	r3, [pc, #232]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ce:	d107      	bne.n	80033e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 feb5 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80033da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80033de:	e3e6      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80033e4:	e3e3      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80033e6:	4b31      	ldr	r3, [pc, #196]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f2:	d107      	bne.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80033f4:	f107 0318 	add.w	r3, r7, #24
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fbfb 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003402:	e3d4      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003408:	e3d1      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800340a:	4b28      	ldr	r3, [pc, #160]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003412:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003416:	d107      	bne.n	8003428 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	4618      	mov	r0, r3
 800341e:	f000 fd3d 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003426:	e3c2      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800342c:	e3bf      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800342e:	4b1f      	ldr	r3, [pc, #124]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003432:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003436:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003438:	4b1c      	ldr	r3, [pc, #112]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d10c      	bne.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8003444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003446:	2b00      	cmp	r3, #0
 8003448:	d109      	bne.n	800345e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8003456:	fa22 f303 	lsr.w	r3, r2, r3
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800345c:	e01e      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003466:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346a:	d106      	bne.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003472:	d102      	bne.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	e010      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800347a:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003486:	d106      	bne.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8003488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800348e:	d102      	bne.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003494:	e002      	b.n	800349c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800349a:	e388      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800349c:	e387      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80034a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80034a2:	e384      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80034a8:	e381      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80034aa:	bf00      	nop
 80034ac:	58024400 	.word	0x58024400
 80034b0:	03d09000 	.word	0x03d09000
 80034b4:	003d0900 	.word	0x003d0900
 80034b8:	00f42400 	.word	0x00f42400
 80034bc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80034c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80034c8:	430b      	orrs	r3, r1
 80034ca:	f040 809c 	bne.w	8003606 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80034ce:	4b9e      	ldr	r3, [pc, #632]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034de:	d054      	beq.n	800358a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 80034e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034e6:	f200 808b 	bhi.w	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034f0:	f000 8083 	beq.w	80035fa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 80034f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034fa:	f200 8081 	bhi.w	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80034fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003504:	d02f      	beq.n	8003566 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8003506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350c:	d878      	bhi.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351a:	d012      	beq.n	8003542 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800351c:	e070      	b.n	8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800351e:	4b8a      	ldr	r3, [pc, #552]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800352a:	d107      	bne.n	800353c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800352c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fe07 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800353a:	e338      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003540:	e335      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003542:	4b81      	ldr	r3, [pc, #516]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800354e:	d107      	bne.n	8003560 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003550:	f107 0318 	add.w	r3, r7, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f000 fb4d 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800355e:	e326      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003564:	e323      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003566:	4b78      	ldr	r3, [pc, #480]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003572:	d107      	bne.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003574:	f107 030c 	add.w	r3, r7, #12
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fc8f 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003582:	e314      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003584:	2300      	movs	r3, #0
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003588:	e311      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800358a:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003592:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003594:	4b6c      	ldr	r3, [pc, #432]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d10c      	bne.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80035a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80035a6:	4b68      	ldr	r3, [pc, #416]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	08db      	lsrs	r3, r3, #3
 80035ac:	f003 0303 	and.w	r3, r3, #3
 80035b0:	4a66      	ldr	r2, [pc, #408]	; (800374c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b8:	e01e      	b.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c6:	d106      	bne.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80035c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035ce:	d102      	bne.n	80035d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80035d0:	4b5f      	ldr	r3, [pc, #380]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80035d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035d4:	e010      	b.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80035d6:	4b5c      	ldr	r3, [pc, #368]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035e2:	d106      	bne.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 80035e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ea:	d102      	bne.n	80035f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80035ec:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80035ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80035f6:	e2da      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80035f8:	e2d9      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80035fa:	4b57      	ldr	r3, [pc, #348]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80035fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80035fe:	e2d6      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003604:	e2d3      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8003606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800360a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800360e:	430b      	orrs	r3, r1
 8003610:	f040 80a7 	bne.w	8003762 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8003614:	4b4c      	ldr	r3, [pc, #304]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003618:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800361c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800361e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003620:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003624:	d055      	beq.n	80036d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800362c:	f200 8096 	bhi.w	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8003630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003636:	f000 8084 	beq.w	8003742 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800363a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003640:	f200 808c 	bhi.w	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8003644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364a:	d030      	beq.n	80036ae <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800364c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003652:	f200 8083 	bhi.w	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d004      	beq.n	8003666 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800365c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003662:	d012      	beq.n	800368a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8003664:	e07a      	b.n	800375c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003672:	d107      	bne.n	8003684 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fd63 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003682:	e294      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003684:	2300      	movs	r3, #0
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003688:	e291      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800368a:	4b2f      	ldr	r3, [pc, #188]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003696:	d107      	bne.n	80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003698:	f107 0318 	add.w	r3, r7, #24
 800369c:	4618      	mov	r0, r3
 800369e:	f000 faa9 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80036a6:	e282      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80036ac:	e27f      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80036ae:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036ba:	d107      	bne.n	80036cc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80036bc:	f107 030c 	add.w	r3, r7, #12
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fbeb 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80036ca:	e270      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80036d0:	e26d      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80036d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80036dc:	4b1a      	ldr	r3, [pc, #104]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d10c      	bne.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 80036e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d109      	bne.n	8003702 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036ee:	4b16      	ldr	r3, [pc, #88]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	08db      	lsrs	r3, r3, #3
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	4a14      	ldr	r2, [pc, #80]	; (800374c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80036fa:	fa22 f303 	lsr.w	r3, r2, r3
 80036fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003700:	e01e      	b.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370e:	d106      	bne.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003716:	d102      	bne.n	800371e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371c:	e010      	b.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800372a:	d106      	bne.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800372c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003732:	d102      	bne.n	800373a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8003736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003738:	e002      	b.n	8003740 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800373e:	e236      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003740:	e235      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8003744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003746:	e232      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003748:	58024400 	.word	0x58024400
 800374c:	03d09000 	.word	0x03d09000
 8003750:	003d0900 	.word	0x003d0900
 8003754:	00f42400 	.word	0x00f42400
 8003758:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800375c:	2300      	movs	r3, #0
 800375e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003760:	e225      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8003762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003766:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800376a:	430b      	orrs	r3, r1
 800376c:	f040 8085 	bne.w	800387a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8003770:	4b9c      	ldr	r3, [pc, #624]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003774:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8003778:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800377a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d06b      	beq.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8003782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003788:	d874      	bhi.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800378a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800378c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003790:	d056      	beq.n	8003840 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8003792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003794:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003798:	d86c      	bhi.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037a0:	d03b      	beq.n	800381a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80037a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037a8:	d864      	bhi.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80037aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b0:	d021      	beq.n	80037f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b8:	d85c      	bhi.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80037ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 80037c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c6:	d004      	beq.n	80037d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 80037c8:	e054      	b.n	8003874 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80037ca:	f7fe fb75 	bl	8001eb8 <HAL_RCC_GetPCLK1Freq>
 80037ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80037d0:	e1ed      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80037d2:	4b84      	ldr	r3, [pc, #528]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037de:	d107      	bne.n	80037f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80037e0:	f107 0318 	add.w	r3, r7, #24
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 fa05 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80037ee:	e1de      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80037f4:	e1db      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80037f6:	4b7b      	ldr	r3, [pc, #492]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003802:	d107      	bne.n	8003814 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003804:	f107 030c 	add.w	r3, r7, #12
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fb47 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003812:	e1cc      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003814:	2300      	movs	r3, #0
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003818:	e1c9      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800381a:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d109      	bne.n	800383a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003826:	4b6f      	ldr	r3, [pc, #444]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	08db      	lsrs	r3, r3, #3
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	4a6d      	ldr	r2, [pc, #436]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003838:	e1b9      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800383e:	e1b6      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003840:	4b68      	ldr	r3, [pc, #416]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384c:	d102      	bne.n	8003854 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800384e:	4b67      	ldr	r3, [pc, #412]	; (80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003852:	e1ac      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003858:	e1a9      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800385a:	4b62      	ldr	r3, [pc, #392]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003862:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003866:	d102      	bne.n	800386e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8003868:	4b61      	ldr	r3, [pc, #388]	; (80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800386a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800386c:	e19f      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003872:	e19c      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8003874:	2300      	movs	r3, #0
 8003876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003878:	e199      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800387a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800387e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8003882:	430b      	orrs	r3, r1
 8003884:	d173      	bne.n	800396e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8003886:	4b57      	ldr	r3, [pc, #348]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003896:	d02f      	beq.n	80038f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8003898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800389e:	d863      	bhi.n	8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80038a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d004      	beq.n	80038b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80038a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ac:	d012      	beq.n	80038d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80038ae:	e05b      	b.n	8003968 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038bc:	d107      	bne.n	80038ce <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038be:	f107 0318 	add.w	r3, r7, #24
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f996 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80038cc:	e16f      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80038d2:	e16c      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80038d4:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d107      	bne.n	80038f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fad8 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80038f0:	e15d      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80038f6:	e15a      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80038f8:	4b3a      	ldr	r3, [pc, #232]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80038fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003900:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	2b04      	cmp	r3, #4
 800390c:	d10c      	bne.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800390e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003910:	2b00      	cmp	r3, #0
 8003912:	d109      	bne.n	8003928 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003914:	4b33      	ldr	r3, [pc, #204]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	f003 0303 	and.w	r3, r3, #3
 800391e:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003926:	e01e      	b.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8003928:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003934:	d106      	bne.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8003936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003938:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800393c:	d102      	bne.n	8003944 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800393e:	4b2b      	ldr	r3, [pc, #172]	; (80039ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8003940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003942:	e010      	b.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8003944:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003950:	d106      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8003952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003958:	d102      	bne.n	8003960 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800395a:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800395c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800395e:	e002      	b.n	8003966 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8003960:	2300      	movs	r3, #0
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8003964:	e123      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8003966:	e122      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8003968:	2300      	movs	r3, #0
 800396a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800396c:	e11f      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800396e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003972:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8003976:	430b      	orrs	r3, r1
 8003978:	d13c      	bne.n	80039f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800397a:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003982:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800398a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d012      	beq.n	80039b8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8003992:	e023      	b.n	80039dc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003994:	4b13      	ldr	r3, [pc, #76]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039a0:	d107      	bne.n	80039b2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80039a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fbcc 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80039b0:	e0fd      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80039b2:	2300      	movs	r3, #0
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80039b6:	e0fa      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80039b8:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039c4:	d107      	bne.n	80039d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039c6:	f107 0318 	add.w	r3, r7, #24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 f912 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80039d4:	e0eb      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80039da:	e0e8      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80039dc:	2300      	movs	r3, #0
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80039e0:	e0e5      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80039e2:	bf00      	nop
 80039e4:	58024400 	.word	0x58024400
 80039e8:	03d09000 	.word	0x03d09000
 80039ec:	003d0900 	.word	0x003d0900
 80039f0:	00f42400 	.word	0x00f42400
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80039f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039f8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80039fc:	430b      	orrs	r3, r1
 80039fe:	f040 8085 	bne.w	8003b0c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a12:	d06b      	beq.n	8003aec <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8003a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a1a:	d874      	bhi.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a22:	d056      	beq.n	8003ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8003a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a2a:	d86c      	bhi.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a32:	d03b      	beq.n	8003aac <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8003a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a36:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a3a:	d864      	bhi.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a42:	d021      	beq.n	8003a88 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8003a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a4a:	d85c      	bhi.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8003a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8003a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a58:	d004      	beq.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8003a5a:	e054      	b.n	8003b06 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8003a5c:	f000 f8b4 	bl	8003bc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8003a60:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8003a62:	e0a4      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003a64:	4b54      	ldr	r3, [pc, #336]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a70:	d107      	bne.n	8003a82 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003a72:	f107 0318 	add.w	r3, r7, #24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 f8bc 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003a80:	e095      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003a86:	e092      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8003a88:	4b4b      	ldr	r3, [pc, #300]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 f9fe 	bl	8003e9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003aa4:	e083      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003aaa:	e080      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003aac:	4b42      	ldr	r3, [pc, #264]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0304 	and.w	r3, r3, #4
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d109      	bne.n	8003acc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ab8:	4b3f      	ldr	r3, [pc, #252]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	08db      	lsrs	r3, r3, #3
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	4a3e      	ldr	r2, [pc, #248]	; (8003bbc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003aca:	e070      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ad0:	e06d      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ade:	d102      	bne.n	8003ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8003ae0:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003ae4:	e063      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003aea:	e060      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003aec:	4b32      	ldr	r3, [pc, #200]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003af8:	d102      	bne.n	8003b00 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8003afa:	4b32      	ldr	r3, [pc, #200]	; (8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003afe:	e056      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b04:	e053      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b0a:	e050      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8003b0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b10:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8003b14:	430b      	orrs	r3, r1
 8003b16:	d148      	bne.n	8003baa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b20:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8003b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b28:	d02a      	beq.n	8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b30:	d838      	bhi.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8003b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d004      	beq.n	8003b42 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8003b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b3e:	d00d      	beq.n	8003b5c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8003b40:	e030      	b.n	8003ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b42:	4b1d      	ldr	r3, [pc, #116]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b4e:	d102      	bne.n	8003b56 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8003b50:	4b1c      	ldr	r3, [pc, #112]	; (8003bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8003b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b54:	e02b      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b56:	2300      	movs	r3, #0
 8003b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b5a:	e028      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8003b5c:	4b16      	ldr	r3, [pc, #88]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b68:	d107      	bne.n	8003b7a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f000 fae8 	bl	8004144 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b78:	e019      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003b7e:	e016      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8003b80:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b8e:	f107 0318 	add.w	r3, r7, #24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f82e 	bl	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8003b9c:	e007      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ba2:	e004      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8003ba8:	e001      	b.n	8003bae <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 8003baa:	2300      	movs	r3, #0
 8003bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8003bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3740      	adds	r7, #64	; 0x40
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	58024400 	.word	0x58024400
 8003bbc:	03d09000 	.word	0x03d09000
 8003bc0:	003d0900 	.word	0x003d0900
 8003bc4:	00f42400 	.word	0x00f42400

08003bc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003bcc:	f7fe f944 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0307 	and.w	r3, r3, #7
 8003bdc:	4904      	ldr	r1, [pc, #16]	; (8003bf0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003bde:	5ccb      	ldrb	r3, [r1, r3]
 8003be0:	f003 031f 	and.w	r3, r3, #31
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	080093c8 	.word	0x080093c8

08003bf4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b089      	sub	sp, #36	; 0x24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bfc:	4ba1      	ldr	r3, [pc, #644]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c00:	f003 0303 	and.w	r3, r3, #3
 8003c04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003c06:	4b9f      	ldr	r3, [pc, #636]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	0b1b      	lsrs	r3, r3, #12
 8003c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c12:	4b9c      	ldr	r3, [pc, #624]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003c1e:	4b99      	ldr	r3, [pc, #612]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	08db      	lsrs	r3, r3, #3
 8003c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	ee07 3a90 	vmov	s15, r3
 8003c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8111 	beq.w	8003e64 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	f000 8083 	beq.w	8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	f200 80a1 	bhi.w	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d056      	beq.n	8003d0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c5e:	e099      	b.n	8003d94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c60:	4b88      	ldr	r3, [pc, #544]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0320 	and.w	r3, r3, #32
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02d      	beq.n	8003cc8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c6c:	4b85      	ldr	r3, [pc, #532]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	08db      	lsrs	r3, r3, #3
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	4a84      	ldr	r2, [pc, #528]	; (8003e88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c96:	4b7b      	ldr	r3, [pc, #492]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003caa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003cc6:	e087      	b.n	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e90 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cda:	4b6a      	ldr	r3, [pc, #424]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cea:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cee:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d0a:	e065      	b.n	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	ee07 3a90 	vmov	s15, r3
 8003d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d16:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1e:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d32:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d4e:	e043      	b.n	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d62:	4b48      	ldr	r3, [pc, #288]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d72:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d76:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d92:	e021      	b.n	8003dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da6:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dba:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e8c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003dd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003dd8:	4b2a      	ldr	r3, [pc, #168]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	0a5b      	lsrs	r3, r3, #9
 8003dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003df2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfe:	ee17 2a90 	vmov	r2, s15
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003e06:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0a:	0c1b      	lsrs	r3, r3, #16
 8003e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e20:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2c:	ee17 2a90 	vmov	r2, s15
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e38:	0e1b      	lsrs	r3, r3, #24
 8003e3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e5a:	ee17 2a90 	vmov	r2, s15
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e62:	e008      	b.n	8003e76 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
}
 8003e76:	bf00      	nop
 8003e78:	3724      	adds	r7, #36	; 0x24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	58024400 	.word	0x58024400
 8003e88:	03d09000 	.word	0x03d09000
 8003e8c:	46000000 	.word	0x46000000
 8003e90:	4c742400 	.word	0x4c742400
 8003e94:	4a742400 	.word	0x4a742400
 8003e98:	4b742400 	.word	0x4b742400

08003e9c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b089      	sub	sp, #36	; 0x24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ea4:	4ba1      	ldr	r3, [pc, #644]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	f003 0303 	and.w	r3, r3, #3
 8003eac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003eae:	4b9f      	ldr	r3, [pc, #636]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb2:	0d1b      	lsrs	r3, r3, #20
 8003eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003eb8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003eba:	4b9c      	ldr	r3, [pc, #624]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003ec6:	4b99      	ldr	r3, [pc, #612]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eca:	08db      	lsrs	r3, r3, #3
 8003ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	fb02 f303 	mul.w	r3, r2, r3
 8003ed6:	ee07 3a90 	vmov	s15, r3
 8003eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ede:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8111 	beq.w	800410c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	f000 8083 	beq.w	8003ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	f200 80a1 	bhi.w	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d056      	beq.n	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003f06:	e099      	b.n	800403c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f08:	4b88      	ldr	r3, [pc, #544]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d02d      	beq.n	8003f70 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f14:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	08db      	lsrs	r3, r3, #3
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	4a84      	ldr	r2, [pc, #528]	; (8004130 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003f20:	fa22 f303 	lsr.w	r3, r2, r3
 8003f24:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f52:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f6e:	e087      	b.n	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004138 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f82:	4b6a      	ldr	r3, [pc, #424]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f96:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fb2:	e065      	b.n	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fbe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800413c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc6:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fda:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ff6:	e043      	b.n	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004140 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004006:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400a:	4b48      	ldr	r3, [pc, #288]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401a:	ed97 6a03 	vldr	s12, [r7, #12]
 800401e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004022:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004026:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800403a:	e021      	b.n	8004080 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800413c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800404a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004062:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004134 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004066:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800406a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004072:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800407e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004080:	4b2a      	ldr	r3, [pc, #168]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004084:	0a5b      	lsrs	r3, r3, #9
 8004086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004096:	ee37 7a87 	vadd.f32	s14, s15, s14
 800409a:	edd7 6a07 	vldr	s13, [r7, #28]
 800409e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040a6:	ee17 2a90 	vmov	r2, s15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80040ae:	4b1f      	ldr	r3, [pc, #124]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	0c1b      	lsrs	r3, r3, #16
 80040b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040b8:	ee07 3a90 	vmov	s15, r3
 80040bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d4:	ee17 2a90 	vmov	r2, s15
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80040dc:	4b13      	ldr	r3, [pc, #76]	; (800412c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80040fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004102:	ee17 2a90 	vmov	r2, s15
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800410a:	e008      	b.n	800411e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	609a      	str	r2, [r3, #8]
}
 800411e:	bf00      	nop
 8004120:	3724      	adds	r7, #36	; 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
 8004130:	03d09000 	.word	0x03d09000
 8004134:	46000000 	.word	0x46000000
 8004138:	4c742400 	.word	0x4c742400
 800413c:	4a742400 	.word	0x4a742400
 8004140:	4b742400 	.word	0x4b742400

08004144 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	; 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800414c:	4ba0      	ldr	r3, [pc, #640]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8004156:	4b9e      	ldr	r3, [pc, #632]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	091b      	lsrs	r3, r3, #4
 800415c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004160:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8004162:	4b9b      	ldr	r3, [pc, #620]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800416c:	4b98      	ldr	r3, [pc, #608]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800416e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004170:	08db      	lsrs	r3, r3, #3
 8004172:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	ee07 3a90 	vmov	s15, r3
 8004180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004184:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8111 	beq.w	80043b2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	2b02      	cmp	r3, #2
 8004194:	f000 8083 	beq.w	800429e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	2b02      	cmp	r3, #2
 800419c:	f200 80a1 	bhi.w	80042e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d056      	beq.n	800425a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80041ac:	e099      	b.n	80042e2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041ae:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02d      	beq.n	8004216 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041ba:	4b85      	ldr	r3, [pc, #532]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	08db      	lsrs	r3, r3, #3
 80041c0:	f003 0303 	and.w	r3, r3, #3
 80041c4:	4a83      	ldr	r2, [pc, #524]	; (80043d4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	ee07 3a90 	vmov	s15, r3
 80041d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041e4:	4b7a      	ldr	r3, [pc, #488]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f4:	ed97 6a03 	vldr	s12, [r7, #12]
 80041f8:	eddf 5a77 	vldr	s11, [pc, #476]	; 80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80041fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004200:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004204:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004208:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800420c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004210:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004214:	e087      	b.n	8004326 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	ee07 3a90 	vmov	s15, r3
 800421c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004220:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80043dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8004224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004228:	4b69      	ldr	r3, [pc, #420]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004238:	ed97 6a03 	vldr	s12, [r7, #12]
 800423c:	eddf 5a66 	vldr	s11, [pc, #408]	; 80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004240:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004244:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004248:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800424c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004254:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004258:	e065      	b.n	8004326 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	ee07 3a90 	vmov	s15, r3
 8004260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004264:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80043e0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8004268:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800426c:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800426e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004274:	ee07 3a90 	vmov	s15, r3
 8004278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800427c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004280:	eddf 5a55 	vldr	s11, [pc, #340]	; 80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8004284:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004288:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800428c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004290:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004294:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004298:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800429c:	e043      	b.n	8004326 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	ee07 3a90 	vmov	s15, r3
 80042a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042a8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80043e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80042ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042b0:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b8:	ee07 3a90 	vmov	s15, r3
 80042bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80042c4:	eddf 5a44 	vldr	s11, [pc, #272]	; 80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80042c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042e0:	e021      	b.n	8004326 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ec:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80043dc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80042f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042f4:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fc:	ee07 3a90 	vmov	s15, r3
 8004300:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004304:	ed97 6a03 	vldr	s12, [r7, #12]
 8004308:	eddf 5a33 	vldr	s11, [pc, #204]	; 80043d8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800430c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004310:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004314:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004318:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800431c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004320:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004324:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8004326:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	0a5b      	lsrs	r3, r3, #9
 800432c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004330:	ee07 3a90 	vmov	s15, r3
 8004334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004338:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800433c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004340:	edd7 6a07 	vldr	s13, [r7, #28]
 8004344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004348:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800434c:	ee17 2a90 	vmov	r2, s15
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8004354:	4b1e      	ldr	r3, [pc, #120]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800435e:	ee07 3a90 	vmov	s15, r3
 8004362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004366:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800436a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800436e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004376:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800437a:	ee17 2a90 	vmov	r2, s15
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8004382:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	0e1b      	lsrs	r3, r3, #24
 8004388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800438c:	ee07 3a90 	vmov	s15, r3
 8004390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004394:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004398:	ee37 7a87 	vadd.f32	s14, s15, s14
 800439c:	edd7 6a07 	vldr	s13, [r7, #28]
 80043a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043a8:	ee17 2a90 	vmov	r2, s15
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80043b0:	e008      	b.n	80043c4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	3724      	adds	r7, #36	; 0x24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	58024400 	.word	0x58024400
 80043d4:	03d09000 	.word	0x03d09000
 80043d8:	46000000 	.word	0x46000000
 80043dc:	4c742400 	.word	0x4c742400
 80043e0:	4a742400 	.word	0x4a742400
 80043e4:	4b742400 	.word	0x4b742400

080043e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043f6:	4b53      	ldr	r3, [pc, #332]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d101      	bne.n	8004406 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e099      	b.n	800453a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004406:	4b4f      	ldr	r3, [pc, #316]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800440c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004410:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004412:	f7fc fabd 	bl	8000990 <HAL_GetTick>
 8004416:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004418:	e008      	b.n	800442c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800441a:	f7fc fab9 	bl	8000990 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e086      	b.n	800453a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1f0      	bne.n	800441a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	031b      	lsls	r3, r3, #12
 8004446:	493f      	ldr	r1, [pc, #252]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	628b      	str	r3, [r1, #40]	; 0x28
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	3b01      	subs	r3, #1
 8004452:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	3b01      	subs	r3, #1
 800445c:	025b      	lsls	r3, r3, #9
 800445e:	b29b      	uxth	r3, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	3b01      	subs	r3, #1
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	3b01      	subs	r3, #1
 8004476:	061b      	lsls	r3, r3, #24
 8004478:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800447c:	4931      	ldr	r1, [pc, #196]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800447e:	4313      	orrs	r3, r2
 8004480:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004482:	4b30      	ldr	r3, [pc, #192]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	492d      	ldr	r1, [pc, #180]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004494:	4b2b      	ldr	r3, [pc, #172]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	f023 0220 	bic.w	r2, r3, #32
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	4928      	ldr	r1, [pc, #160]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044a6:	4b27      	ldr	r3, [pc, #156]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	4a26      	ldr	r2, [pc, #152]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044ac:	f023 0310 	bic.w	r3, r3, #16
 80044b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <RCCEx_PLL2_Config+0x160>)
 80044b8:	4013      	ands	r3, r2
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69d2      	ldr	r2, [r2, #28]
 80044be:	00d2      	lsls	r2, r2, #3
 80044c0:	4920      	ldr	r1, [pc, #128]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044c6:	4b1f      	ldr	r3, [pc, #124]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	f043 0310 	orr.w	r3, r3, #16
 80044d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044dc:	4a19      	ldr	r2, [pc, #100]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044e4:	e00f      	b.n	8004506 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d106      	bne.n	80044fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80044ec:	4b15      	ldr	r3, [pc, #84]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	4a14      	ldr	r2, [pc, #80]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f8:	e005      	b.n	8004506 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80044fa:	4b12      	ldr	r3, [pc, #72]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	4a11      	ldr	r2, [pc, #68]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004500:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004504:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800450c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004512:	f7fc fa3d 	bl	8000990 <HAL_GetTick>
 8004516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004518:	e008      	b.n	800452c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800451a:	f7fc fa39 	bl	8000990 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e006      	b.n	800453a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800452c:	4b05      	ldr	r3, [pc, #20]	; (8004544 <RCCEx_PLL2_Config+0x15c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004538:	7bfb      	ldrb	r3, [r7, #15]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	58024400 	.word	0x58024400
 8004548:	ffff0007 	.word	0xffff0007

0800454c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800455a:	4b53      	ldr	r3, [pc, #332]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b03      	cmp	r3, #3
 8004564:	d101      	bne.n	800456a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e099      	b.n	800469e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800456a:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a4e      	ldr	r2, [pc, #312]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004574:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004576:	f7fc fa0b 	bl	8000990 <HAL_GetTick>
 800457a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800457c:	e008      	b.n	8004590 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800457e:	f7fc fa07 	bl	8000990 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e086      	b.n	800469e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004590:	4b45      	ldr	r3, [pc, #276]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1f0      	bne.n	800457e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800459c:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	051b      	lsls	r3, r3, #20
 80045aa:	493f      	ldr	r1, [pc, #252]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	628b      	str	r3, [r1, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	3b01      	subs	r3, #1
 80045c0:	025b      	lsls	r3, r3, #9
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	3b01      	subs	r3, #1
 80045da:	061b      	lsls	r3, r3, #24
 80045dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045e0:	4931      	ldr	r1, [pc, #196]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80045e6:	4b30      	ldr	r3, [pc, #192]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	492d      	ldr	r1, [pc, #180]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	4928      	ldr	r1, [pc, #160]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800460a:	4b27      	ldr	r3, [pc, #156]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004614:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004616:	4b24      	ldr	r3, [pc, #144]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800461a:	4b24      	ldr	r3, [pc, #144]	; (80046ac <RCCEx_PLL3_Config+0x160>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	69d2      	ldr	r2, [r2, #28]
 8004622:	00d2      	lsls	r2, r2, #3
 8004624:	4920      	ldr	r1, [pc, #128]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004626:	4313      	orrs	r3, r2
 8004628:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d106      	bne.n	800464a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800463c:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004642:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004648:	e00f      	b.n	800466a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004650:	4b15      	ldr	r3, [pc, #84]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	4a14      	ldr	r2, [pc, #80]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004656:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800465a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800465c:	e005      	b.n	800466a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800465e:	4b12      	ldr	r3, [pc, #72]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	4a11      	ldr	r2, [pc, #68]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004664:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004668:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fc f98b 	bl	8000990 <HAL_GetTick>
 800467a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800467c:	e008      	b.n	8004690 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800467e:	f7fc f987 	bl	8000990 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e006      	b.n	800469e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <RCCEx_PLL3_Config+0x15c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800469c:	7bfb      	ldrb	r3, [r7, #15]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	58024400 	.word	0x58024400
 80046ac:	ffff0007 	.word	0xffff0007

080046b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08a      	sub	sp, #40	; 0x28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e075      	b.n	80047ae <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d105      	bne.n	80046da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fb ff61 	bl	800059c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2204      	movs	r2, #4
 80046de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f868 	bl	80047b8 <HAL_SD_InitCard>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e05d      	b.n	80047ae <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fdaf 	bl	800525c <HAL_SD_GetCardStatus>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e052      	b.n	80047ae <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8004708:	7e3b      	ldrb	r3, [r7, #24]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800470e:	7e7b      	ldrb	r3, [r7, #25]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	2b01      	cmp	r3, #1
 800471a:	d10a      	bne.n	8004732 <HAL_SD_Init+0x82>
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	2b00      	cmp	r3, #0
 8004720:	d102      	bne.n	8004728 <HAL_SD_Init+0x78>
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800472e:	659a      	str	r2, [r3, #88]	; 0x58
 8004730:	e00b      	b.n	800474a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	2b01      	cmp	r3, #1
 8004738:	d104      	bne.n	8004744 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004740:	659a      	str	r2, [r3, #88]	; 0x58
 8004742:	e002      	b.n	800474a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	4619      	mov	r1, r3
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fe6d 	bl	8005430 <HAL_SD_ConfigWideBusOperation>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d001      	beq.n	8004760 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e026      	b.n	80047ae <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8004760:	f7fc f916 	bl	8000990 <HAL_GetTick>
 8004764:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8004766:	e011      	b.n	800478c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004768:	f7fc f912 	bl	8000990 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d109      	bne.n	800478c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e010      	b.n	80047ae <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 ff61 	bl	8005654 <HAL_SD_GetCardState>
 8004792:	4603      	mov	r3, r0
 8004794:	2b04      	cmp	r3, #4
 8004796:	d1e7      	bne.n	8004768 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3728      	adds	r7, #40	; 0x28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047b8:	b590      	push	{r4, r7, lr}
 80047ba:	b08d      	sub	sp, #52	; 0x34
 80047bc:	af02      	add	r7, sp, #8
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80047c0:	2300      	movs	r3, #0
 80047c2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80047d0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f7fe fd24 	bl	8003224 <HAL_RCCEx_GetPeriphCLKFreq>
 80047dc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047f2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e070      	b.n	80048da <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	4a39      	ldr	r2, [pc, #228]	; (80048e4 <HAL_SD_InitCard+0x12c>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681c      	ldr	r4, [r3, #0]
 800480a:	466a      	mov	r2, sp
 800480c:	f107 0318 	add.w	r3, r7, #24
 8004810:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004814:	e882 0003 	stmia.w	r2, {r0, r1}
 8004818:	f107 030c 	add.w	r3, r7, #12
 800481c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800481e:	4620      	mov	r0, r4
 8004820:	f001 fbaa 	bl	8005f78 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f001 fbed 	bl	8006008 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483a:	fbb2 f3f3 	udiv	r3, r2, r3
 800483e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8004846:	4a28      	ldr	r2, [pc, #160]	; (80048e8 <HAL_SD_InitCard+0x130>)
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	3301      	adds	r3, #1
 8004850:	4618      	mov	r0, r3
 8004852:	f7fc f8a9 	bl	80009a8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 ffea 	bl	8005830 <SD_PowerON>
 800485c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800485e:	6a3b      	ldr	r3, [r7, #32]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e02e      	b.n	80048da <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 ff09 	bl	8005694 <SD_InitCard>
 8004882:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e01b      	b.n	80048da <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048aa:	4618      	mov	r0, r3
 80048ac:	f001 fc42 	bl	8006134 <SDMMC_CmdBlockLength>
 80048b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00f      	beq.n	80048d8 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <HAL_SD_InitCard+0x134>)
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	372c      	adds	r7, #44	; 0x2c
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd90      	pop	{r4, r7, pc}
 80048e2:	bf00      	nop
 80048e4:	014f8b59 	.word	0x014f8b59
 80048e8:	00012110 	.word	0x00012110
 80048ec:	1fe00fff 	.word	0x1fe00fff

080048f0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b08c      	sub	sp, #48	; 0x30
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
 80048fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d107      	bne.n	8004918 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e08d      	b.n	8004a34 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b01      	cmp	r3, #1
 8004922:	f040 8086 	bne.w	8004a32 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800492c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	441a      	add	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	429a      	cmp	r2, r3
 8004938:	d907      	bls.n	800494a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e074      	b.n	8004a34 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2203      	movs	r2, #3
 800494e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2200      	movs	r2, #0
 8004958:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	025a      	lsls	r2, r3, #9
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	2b01      	cmp	r3, #1
 800496e:	d002      	beq.n	8004976 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	025b      	lsls	r3, r3, #9
 8004974:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295
 800497a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	025b      	lsls	r3, r3, #9
 8004980:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004982:	2390      	movs	r3, #144	; 0x90
 8004984:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004986:	2302      	movs	r3, #2
 8004988:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800498a:	2300      	movs	r3, #0
 800498c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800498e:	2300      	movs	r3, #0
 8004990:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f107 0210 	add.w	r2, r7, #16
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f001 fb9d 	bl	80060dc <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049b0:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2201      	movs	r2, #1
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d90a      	bls.n	80049de <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2282      	movs	r2, #130	; 0x82
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 fbf3 	bl	80061c0 <SDMMC_CmdReadMultiBlock>
 80049da:	62f8      	str	r0, [r7, #44]	; 0x2c
 80049dc:	e009      	b.n	80049f2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2281      	movs	r2, #129	; 0x81
 80049e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fbc5 	bl	800617a <SDMMC_CmdReadSingleBlock>
 80049f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <HAL_SD_ReadBlocks_DMA+0x14c>)
 80049fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a06:	431a      	orrs	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e00a      	b.n	8004a34 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8004a2c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	e000      	b.n	8004a34 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
  }
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3730      	adds	r7, #48	; 0x30
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	1fe00fff 	.word	0x1fe00fff

08004a40 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08c      	sub	sp, #48	; 0x30
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d107      	bne.n	8004a68 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e08d      	b.n	8004b84 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	f040 8086 	bne.w	8004b82 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	441a      	add	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d907      	bls.n	8004a9a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e074      	b.n	8004b84 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68ba      	ldr	r2, [r7, #8]
 8004aae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	025a      	lsls	r2, r3, #9
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d002      	beq.n	8004ac6 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	025b      	lsls	r3, r3, #9
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aca:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	025b      	lsls	r3, r3, #9
 8004ad0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ad2:	2390      	movs	r3, #144	; 0x90
 8004ad4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f107 0210 	add.w	r2, r7, #16
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 faf5 	bl	80060dc <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b00:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d90a      	bls.n	8004b2e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	22a0      	movs	r2, #160	; 0xa0
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 fb91 	bl	800624c <SDMMC_CmdWriteMultiBlock>
 8004b2a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004b2c:	e009      	b.n	8004b42 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2290      	movs	r2, #144	; 0x90
 8004b32:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 fb63 	bl	8006206 <SDMMC_CmdWriteSingleBlock>
 8004b40:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d012      	beq.n	8004b6e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a0f      	ldr	r2, [pc, #60]	; (8004b8c <HAL_SD_WriteBlocks_DMA+0x14c>)
 8004b4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	431a      	orrs	r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e00a      	b.n	8004b84 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8004b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3730      	adds	r7, #48	; 0x30
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	1fe00fff 	.word	0x1fe00fff

08004b90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d008      	beq.n	8004bbe <HAL_SD_IRQHandler+0x2e>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0308 	and.w	r3, r3, #8
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f001 f926 	bl	8005e08 <SD_Read_IT>
 8004bbc:	e19a      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 80ac 	beq.w	8004d26 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bd6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_SD_IRQHandler+0x1b8>)
 8004be4:	400b      	ands	r3, r1
 8004be6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004bf6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c06:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d038      	beq.n	8004c84 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d104      	bne.n	8004c26 <HAL_SD_IRQHandler+0x96>
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0320 	and.w	r3, r3, #32
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d011      	beq.n	8004c4a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f001 fb32 	bl	8006294 <SDMMC_CmdStopTransfer>
 8004c30:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d008      	beq.n	8004c4a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f95b 	bl	8004f00 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3f      	ldr	r2, [pc, #252]	; (8004d4c <HAL_SD_IRQHandler+0x1bc>)
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <HAL_SD_IRQHandler+0xe4>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f001 ffd7 	bl	8006c28 <HAL_SD_RxCpltCallback>
 8004c7a:	e13b      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 ffc9 	bl	8006c14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c82:	e137      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	f000 8132 	beq.w	8004ef4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2200      	movs	r2, #0
 8004c96:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <HAL_SD_IRQHandler+0x12c>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f003 0320 	and.w	r3, r3, #32
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d011      	beq.n	8004ce0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f001 fae7 	bl	8006294 <SDMMC_CmdStopTransfer>
 8004cc6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f910 	bl	8004f00 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <HAL_SD_IRQHandler+0x172>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f001 ff86 	bl	8006c14 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d105      	bne.n	8004d1e <HAL_SD_IRQHandler+0x18e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80eb 	beq.w	8004ef4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 ff82 	bl	8006c28 <HAL_SD_RxCpltCallback>
}
 8004d24:	e0e6      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00d      	beq.n	8004d50 <HAL_SD_IRQHandler+0x1c0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f001 f8a8 	bl	8005e94 <SD_Write_IT>
 8004d44:	e0d6      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
 8004d46:	bf00      	nop
 8004d48:	ffff3ec5 	.word	0xffff3ec5
 8004d4c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 809d 	beq.w	8004e9a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d005      	beq.n	8004d7a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d72:	f043 0202 	orr.w	r2, r3, #2
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f043 0208 	orr.w	r2, r3, #8
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	f003 0320 	and.w	r3, r3, #32
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	f003 0310 	and.w	r3, r3, #16
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d005      	beq.n	8004dc8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc0:	f043 0210 	orr.w	r2, r3, #16
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a4b      	ldr	r2, [pc, #300]	; (8004efc <HAL_SD_IRQHandler+0x36c>)
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004dde:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dee:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e0e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f001 fa3d 	bl	8006294 <SDMMC_CmdStopTransfer>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68da      	ldr	r2, [r3, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e34:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e3e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f000 f851 	bl	8004f00 <HAL_SD_ErrorCallback>
}
 8004e5e:	e049      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d044      	beq.n	8004ef4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d040      	beq.n	8004ef4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004e80:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f834 	bl	8004f00 <HAL_SD_ErrorCallback>
}
 8004e98:	e02c      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d025      	beq.n	8004ef4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f001 f84a 	bl	8005f64 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8004ed0:	e010      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f001 f832 	bl	8005f3c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8004ed8:	e00c      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f001 f833 	bl	8005f50 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8004eea:	e003      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f001 f81b 	bl	8005f28 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8004ef2:	e7ff      	b.n	8004ef4 <HAL_SD_IRQHandler+0x364>
 8004ef4:	bf00      	nop
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	18000f3a 	.word	0x18000f3a

08004f00 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	0f9b      	lsrs	r3, r3, #30
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	0e9b      	lsrs	r3, r3, #26
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	b2da      	uxtb	r2, r3
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f40:	0e1b      	lsrs	r3, r3, #24
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	f003 0303 	and.w	r3, r3, #3
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	0c1b      	lsrs	r3, r3, #16
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5e:	0a1b      	lsrs	r3, r3, #8
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f74:	0d1b      	lsrs	r3, r3, #20
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f80:	0c1b      	lsrs	r3, r3, #16
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	b2da      	uxtb	r2, r3
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f92:	0bdb      	lsrs	r3, r3, #15
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa4:	0b9b      	lsrs	r3, r3, #14
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb6:	0b5b      	lsrs	r3, r3, #13
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fc8:	0b1b      	lsrs	r3, r3, #12
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d163      	bne.n	80050ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fe8:	009a      	lsls	r2, r3, #2
 8004fea:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004fee:	4013      	ands	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004ff4:	0f92      	lsrs	r2, r2, #30
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005000:	0edb      	lsrs	r3, r3, #27
 8005002:	b2db      	uxtb	r3, r3
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	b2da      	uxtb	r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005012:	0e1b      	lsrs	r3, r3, #24
 8005014:	b2db      	uxtb	r3, r3
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	b2da      	uxtb	r2, r3
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005024:	0d5b      	lsrs	r3, r3, #21
 8005026:	b2db      	uxtb	r3, r3
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	b2da      	uxtb	r2, r3
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005036:	0c9b      	lsrs	r3, r3, #18
 8005038:	b2db      	uxtb	r3, r3
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	b2da      	uxtb	r2, r3
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005048:	0bdb      	lsrs	r3, r3, #15
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	b2da      	uxtb	r2, r3
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	1c5a      	adds	r2, r3, #1
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	7e1b      	ldrb	r3, [r3, #24]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	3302      	adds	r3, #2
 800506c:	2201      	movs	r2, #1
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005076:	fb03 f202 	mul.w	r2, r3, r2
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	7a1b      	ldrb	r3, [r3, #8]
 8005082:	b2db      	uxtb	r3, r3
 8005084:	f003 030f 	and.w	r3, r3, #15
 8005088:	2201      	movs	r2, #1
 800508a:	409a      	lsls	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005098:	0a52      	lsrs	r2, r2, #9
 800509a:	fb03 f202 	mul.w	r2, r3, r2
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a8:	655a      	str	r2, [r3, #84]	; 0x54
 80050aa:	e031      	b.n	8005110 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d11d      	bne.n	80050f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050b8:	041b      	lsls	r3, r3, #16
 80050ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	431a      	orrs	r2, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	3301      	adds	r3, #1
 80050d0:	029a      	lsls	r2, r3, #10
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
 80050ee:	e00f      	b.n	8005110 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a58      	ldr	r2, [pc, #352]	; (8005258 <HAL_SD_GetCardCSD+0x344>)
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e09d      	b.n	800524c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005114:	0b9b      	lsrs	r3, r3, #14
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 0301 	and.w	r3, r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005126:	09db      	lsrs	r3, r3, #7
 8005128:	b2db      	uxtb	r3, r3
 800512a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800512e:	b2da      	uxtb	r2, r3
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005138:	b2db      	uxtb	r3, r3
 800513a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513e:	b2da      	uxtb	r2, r3
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005148:	0fdb      	lsrs	r3, r3, #31
 800514a:	b2da      	uxtb	r2, r3
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005154:	0f5b      	lsrs	r3, r3, #29
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	b2da      	uxtb	r2, r3
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005166:	0e9b      	lsrs	r3, r3, #26
 8005168:	b2db      	uxtb	r3, r3
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	b2da      	uxtb	r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005178:	0d9b      	lsrs	r3, r3, #22
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 030f 	and.w	r3, r3, #15
 8005180:	b2da      	uxtb	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800518a:	0d5b      	lsrs	r3, r3, #21
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	b2da      	uxtb	r2, r3
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051a6:	0c1b      	lsrs	r3, r3, #16
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ba:	0bdb      	lsrs	r3, r3, #15
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ce:	0b9b      	lsrs	r3, r3, #14
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051e2:	0b5b      	lsrs	r3, r3, #13
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	b2da      	uxtb	r2, r3
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051f6:	0b1b      	lsrs	r3, r3, #12
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800520a:	0a9b      	lsrs	r3, r3, #10
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	b2da      	uxtb	r2, r3
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	b2db      	uxtb	r3, r3
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	b2da      	uxtb	r2, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005232:	085b      	lsrs	r3, r3, #1
 8005234:	b2db      	uxtb	r3, r3
 8005236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523a:	b2da      	uxtb	r2, r3
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	1fe00fff 	.word	0x1fe00fff

0800525c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b094      	sub	sp, #80	; 0x50
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b03      	cmp	r3, #3
 8005276:	d101      	bne.n	800527c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e0a7      	b.n	80053cc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800527c:	f107 0308 	add.w	r3, r7, #8
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fb62 	bl	800594c <SD_SendSDStatus>
 8005288:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800528a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800528c:	2b00      	cmp	r3, #0
 800528e:	d011      	beq.n	80052b4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a4f      	ldr	r2, [pc, #316]	; (80053d4 <HAL_SD_GetCardStatus+0x178>)
 8005296:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80052b2:	e070      	b.n	8005396 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	b29b      	uxth	r3, r3
 80052da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	0e1b      	lsrs	r3, r3, #24
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	061a      	lsls	r2, r3, #24
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	021b      	lsls	r3, r3, #8
 80052f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80052fa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	0a1b      	lsrs	r3, r3, #8
 8005300:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005304:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	0e1b      	lsrs	r3, r3, #24
 800530a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	0a1b      	lsrs	r3, r3, #8
 800531c:	b2da      	uxtb	r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	0d1b      	lsrs	r3, r3, #20
 8005326:	b2db      	uxtb	r3, r3
 8005328:	f003 030f 	and.w	r3, r3, #15
 800532c:	b2da      	uxtb	r2, r3
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	0c1b      	lsrs	r3, r3, #16
 8005336:	b29b      	uxth	r3, r3
 8005338:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800533c:	b29a      	uxth	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	b29b      	uxth	r3, r3
 8005342:	b2db      	uxtb	r3, r3
 8005344:	b29b      	uxth	r3, r3
 8005346:	4313      	orrs	r3, r2
 8005348:	b29a      	uxth	r2, r3
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	0a9b      	lsrs	r3, r3, #10
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005358:	b2da      	uxtb	r2, r3
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	0a1b      	lsrs	r3, r3, #8
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	b2da      	uxtb	r2, r3
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	b2db      	uxtb	r3, r3
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	b2da      	uxtb	r2, r3
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	b2da      	uxtb	r2, r3
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	0e1b      	lsrs	r3, r3, #24
 8005390:	b2da      	uxtb	r2, r3
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 fec8 	bl	8006134 <SDMMC_CmdBlockLength>
 80053a4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00d      	beq.n	80053c8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a08      	ldr	r2, [pc, #32]	; (80053d4 <HAL_SD_GetCardStatus+0x178>)
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80053c8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3750      	adds	r7, #80	; 0x50
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	1fe00fff 	.word	0x1fe00fff

080053d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b08d      	sub	sp, #52	; 0x34
 8005434:	af02      	add	r7, sp, #8
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2203      	movs	r2, #3
 8005444:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544c:	2b03      	cmp	r3, #3
 800544e:	d02e      	beq.n	80054ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005456:	d106      	bne.n	8005466 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	635a      	str	r2, [r3, #52]	; 0x34
 8005464:	e029      	b.n	80054ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800546c:	d10a      	bne.n	8005484 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fb64 	bl	8005b3c <SD_WideBus_Enable>
 8005474:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	635a      	str	r2, [r3, #52]	; 0x34
 8005482:	e01a      	b.n	80054ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fba1 	bl	8005bd2 <SD_WideBus_Disable>
 8005490:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	431a      	orrs	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	635a      	str	r2, [r3, #52]	; 0x34
 800549e:	e00c      	b.n	80054ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	635a      	str	r2, [r3, #52]	; 0x34
 80054ac:	e005      	b.n	80054ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d007      	beq.n	80054d2 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a5f      	ldr	r2, [pc, #380]	; (8005644 <HAL_SD_ConfigWideBusOperation+0x214>)
 80054c8:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80054d0:	e096      	b.n	8005600 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80054d2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80054d6:	f04f 0100 	mov.w	r1, #0
 80054da:	f7fd fea3 	bl	8003224 <HAL_RCCEx_GetPeriphCLKFreq>
 80054de:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 8083 	beq.w	80055ee <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695a      	ldr	r2, [r3, #20]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4950      	ldr	r1, [pc, #320]	; (8005648 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005506:	fba1 1303 	umull	r1, r3, r1, r3
 800550a:	0e1b      	lsrs	r3, r3, #24
 800550c:	429a      	cmp	r2, r3
 800550e:	d303      	bcc.n	8005518 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	61bb      	str	r3, [r7, #24]
 8005516:	e05a      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005520:	d103      	bne.n	800552a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	e051      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005532:	d126      	bne.n	8005582 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	695b      	ldr	r3, [r3, #20]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d10e      	bne.n	800555a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	4a43      	ldr	r2, [pc, #268]	; (800564c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d906      	bls.n	8005552 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	4a40      	ldr	r2, [pc, #256]	; (8005648 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005548:	fba2 2303 	umull	r2, r3, r2, r3
 800554c:	0e5b      	lsrs	r3, r3, #25
 800554e:	61bb      	str	r3, [r7, #24]
 8005550:	e03d      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	e039      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	4a39      	ldr	r2, [pc, #228]	; (800564c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d906      	bls.n	800557a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4a36      	ldr	r2, [pc, #216]	; (8005648 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005570:	fba2 2303 	umull	r2, r3, r2, r3
 8005574:	0e5b      	lsrs	r3, r3, #25
 8005576:	61bb      	str	r3, [r7, #24]
 8005578:	e029      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	e025      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10e      	bne.n	80055a8 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	4a30      	ldr	r2, [pc, #192]	; (8005650 <HAL_SD_ConfigWideBusOperation+0x220>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d906      	bls.n	80055a0 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <HAL_SD_ConfigWideBusOperation+0x218>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	0e1b      	lsrs	r3, r3, #24
 800559c:	61bb      	str	r3, [r7, #24]
 800559e:	e016      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	695b      	ldr	r3, [r3, #20]
 80055a4:	61bb      	str	r3, [r7, #24]
 80055a6:	e012      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	005b      	lsls	r3, r3, #1
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	4a26      	ldr	r2, [pc, #152]	; (8005650 <HAL_SD_ConfigWideBusOperation+0x220>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d906      	bls.n	80055c8 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <HAL_SD_ConfigWideBusOperation+0x218>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	0e1b      	lsrs	r3, r3, #24
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	e002      	b.n	80055ce <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681c      	ldr	r4, [r3, #0]
 80055d2:	466a      	mov	r2, sp
 80055d4:	f107 0314 	add.w	r3, r7, #20
 80055d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80055dc:	e882 0003 	stmia.w	r2, {r0, r1}
 80055e0:	f107 0308 	add.w	r3, r7, #8
 80055e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e6:	4620      	mov	r0, r4
 80055e8:	f000 fcc6 	bl	8005f78 <SDMMC_Init>
 80055ec:	e008      	b.n	8005600 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fd93 	bl	8006134 <SDMMC_CmdBlockLength>
 800560e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d00c      	beq.n	8005630 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a0a      	ldr	r2, [pc, #40]	; (8005644 <HAL_SD_ConfigWideBusOperation+0x214>)
 800561c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	431a      	orrs	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800563c:	4618      	mov	r0, r3
 800563e:	372c      	adds	r7, #44	; 0x2c
 8005640:	46bd      	mov	sp, r7
 8005642:	bd90      	pop	{r4, r7, pc}
 8005644:	1fe00fff 	.word	0x1fe00fff
 8005648:	55e63b89 	.word	0x55e63b89
 800564c:	02faf080 	.word	0x02faf080
 8005650:	017d7840 	.word	0x017d7840

08005654 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005660:	f107 030c 	add.w	r3, r7, #12
 8005664:	4619      	mov	r1, r3
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 fa40 	bl	8005aec <SD_SendStatus>
 800566c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	431a      	orrs	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	0a5b      	lsrs	r3, r3, #9
 8005684:	f003 030f 	and.w	r3, r3, #15
 8005688:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800568a:	693b      	ldr	r3, [r7, #16]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b090      	sub	sp, #64	; 0x40
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80056a0:	f7fb f976 	bl	8000990 <HAL_GetTick>
 80056a4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fcbd 	bl	800602a <SDMMC_GetPowerState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d102      	bne.n	80056bc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80056ba:	e0b5      	b.n	8005828 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d02e      	beq.n	8005722 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f000 ff08 	bl	80064de <SDMMC_CmdSendCID>
 80056ce:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80056d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <SD_InitCard+0x46>
    {
      return errorstate;
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d8:	e0a6      	b.n	8005828 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2100      	movs	r1, #0
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fce8 	bl	80060b6 <SDMMC_GetResponse>
 80056e6:	4602      	mov	r2, r0
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2104      	movs	r1, #4
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fcdf 	bl	80060b6 <SDMMC_GetResponse>
 80056f8:	4602      	mov	r2, r0
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2108      	movs	r1, #8
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fcd6 	bl	80060b6 <SDMMC_GetResponse>
 800570a:	4602      	mov	r2, r0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	210c      	movs	r1, #12
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fccd 	bl	80060b6 <SDMMC_GetResponse>
 800571c:	4602      	mov	r2, r0
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005726:	2b03      	cmp	r3, #3
 8005728:	d01d      	beq.n	8005766 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800572a:	e019      	b.n	8005760 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f107 020a 	add.w	r2, r7, #10
 8005734:	4611      	mov	r1, r2
 8005736:	4618      	mov	r0, r3
 8005738:	f000 ff10 	bl	800655c <SDMMC_CmdSetRelAdd>
 800573c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <SD_InitCard+0xb4>
      {
        return errorstate;
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	e06f      	b.n	8005828 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8005748:	f7fb f922 	bl	8000990 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f241 3287 	movw	r2, #4999	; 0x1387
 8005756:	4293      	cmp	r3, r2
 8005758:	d902      	bls.n	8005760 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800575a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800575e:	e063      	b.n	8005828 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8005760:	897b      	ldrh	r3, [r7, #10]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0e2      	beq.n	800572c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576a:	2b03      	cmp	r3, #3
 800576c:	d036      	beq.n	80057dc <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800576e:	897b      	ldrh	r3, [r7, #10]
 8005770:	461a      	mov	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	4619      	mov	r1, r3
 8005782:	4610      	mov	r0, r2
 8005784:	f000 feca 	bl	800651c <SDMMC_CmdSendCSD>
 8005788:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800578a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <SD_InitCard+0x100>
    {
      return errorstate;
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	e049      	b.n	8005828 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2100      	movs	r1, #0
 800579a:	4618      	mov	r0, r3
 800579c:	f000 fc8b 	bl	80060b6 <SDMMC_GetResponse>
 80057a0:	4602      	mov	r2, r0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2104      	movs	r1, #4
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 fc82 	bl	80060b6 <SDMMC_GetResponse>
 80057b2:	4602      	mov	r2, r0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2108      	movs	r1, #8
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fc79 	bl	80060b6 <SDMMC_GetResponse>
 80057c4:	4602      	mov	r2, r0
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	210c      	movs	r1, #12
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fc70 	bl	80060b6 <SDMMC_GetResponse>
 80057d6:	4602      	mov	r2, r0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2104      	movs	r1, #4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fc67 	bl	80060b6 <SDMMC_GetResponse>
 80057e8:	4603      	mov	r3, r0
 80057ea:	0d1a      	lsrs	r2, r3, #20
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7ff fb8c 	bl	8004f14 <HAL_SD_GetCardCSD>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005802:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005806:	e00f      	b.n	8005828 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fd79 	bl	800630c <SDMMC_CmdSelDesel>
 800581a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800581c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <SD_InitCard+0x192>
  {
    return errorstate;
 8005822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005824:	e000      	b.n	8005828 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005826:	2300      	movs	r3, #0
}
 8005828:	4618      	mov	r0, r3
 800582a:	3740      	adds	r7, #64	; 0x40
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800583c:	2300      	movs	r3, #0
 800583e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 fd82 	bl	8006352 <SDMMC_CmdGoIdleState>
 800584e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	e072      	b.n	8005940 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fd95 	bl	800638e <SDMMC_CmdOperCond>
 8005864:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800586c:	d10d      	bne.n	800588a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 fd6a 	bl	8006352 <SDMMC_CmdGoIdleState>
 800587e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <SD_PowerON+0x60>
    {
      return errorstate;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	e05a      	b.n	8005940 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005894:	2b01      	cmp	r3, #1
 8005896:	d137      	bne.n	8005908 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2100      	movs	r1, #0
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fd95 	bl	80063ce <SDMMC_CmdAppCommand>
 80058a4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d02d      	beq.n	8005908 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058b0:	e046      	b.n	8005940 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2100      	movs	r1, #0
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fd88 	bl	80063ce <SDMMC_CmdAppCommand>
 80058be:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d001      	beq.n	80058ca <SD_PowerON+0x9a>
    {
      return errorstate;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	e03a      	b.n	8005940 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	491e      	ldr	r1, [pc, #120]	; (8005948 <SD_PowerON+0x118>)
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fd9f 	bl	8006414 <SDMMC_CmdAppOperCommand>
 80058d6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80058e2:	e02d      	b.n	8005940 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2100      	movs	r1, #0
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fbe3 	bl	80060b6 <SDMMC_GetResponse>
 80058f0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	0fdb      	lsrs	r3, r3, #31
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <SD_PowerON+0xce>
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <SD_PowerON+0xd0>
 80058fe:	2300      	movs	r3, #0
 8005900:	613b      	str	r3, [r7, #16]

    count++;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	3301      	adds	r3, #1
 8005906:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800590e:	4293      	cmp	r3, r2
 8005910:	d802      	bhi.n	8005918 <SD_PowerON+0xe8>
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0cc      	beq.n	80058b2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800591e:	4293      	cmp	r3, r2
 8005920:	d902      	bls.n	8005928 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005926:	e00b      	b.n	8005940 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	c1100000 	.word	0xc1100000

0800594c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08c      	sub	sp, #48	; 0x30
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005956:	f7fb f81b 	bl	8000990 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2100      	movs	r1, #0
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fba5 	bl	80060b6 <SDMMC_GetResponse>
 800596c:	4603      	mov	r3, r0
 800596e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005972:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005976:	d102      	bne.n	800597e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800597c:	e0b0      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2140      	movs	r1, #64	; 0x40
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fbd5 	bl	8006134 <SDMMC_CmdBlockLength>
 800598a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d005      	beq.n	800599e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	e0a0      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f000 fd0f 	bl	80063ce <SDMMC_CmdAppCommand>
 80059b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d005      	beq.n	80059c4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	e08d      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
 80059c8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80059ca:	2340      	movs	r3, #64	; 0x40
 80059cc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80059ce:	2360      	movs	r3, #96	; 0x60
 80059d0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80059d2:	2302      	movs	r3, #2
 80059d4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80059da:	2301      	movs	r3, #1
 80059dc:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f107 0208 	add.w	r2, r7, #8
 80059e6:	4611      	mov	r1, r2
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fb77 	bl	80060dc <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 fdf7 	bl	80065e6 <SDMMC_CmdStatusRegister>
 80059f8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80059fa:	6a3b      	ldr	r3, [r7, #32]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d02b      	beq.n	8005a58 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	e069      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d013      	beq.n	8005a42 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1e:	e00d      	b.n	8005a3c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fad1 	bl	8005fcc <SDMMC_ReadFIFO>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	601a      	str	r2, [r3, #0]
        pData++;
 8005a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a32:	3304      	adds	r3, #4
 8005a34:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8005a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a38:	3301      	adds	r3, #1
 8005a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	2b07      	cmp	r3, #7
 8005a40:	d9ee      	bls.n	8005a20 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a42:	f7fa ffa5 	bl	8000990 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d102      	bne.n	8005a58 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005a52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005a56:	e043      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a5e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d0d2      	beq.n	8005a0c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6c:	f003 0308 	and.w	r3, r3, #8
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005a74:	2308      	movs	r3, #8
 8005a76:	e033      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005a86:	2302      	movs	r3, #2
 8005a88:	e02a      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a90:	f003 0320 	and.w	r3, r3, #32
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d017      	beq.n	8005ac8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8005a98:	2320      	movs	r3, #32
 8005a9a:	e021      	b.n	8005ae0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fa93 	bl	8005fcc <SDMMC_ReadFIFO>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	601a      	str	r2, [r3, #0]
    pData++;
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	3304      	adds	r3, #4
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ab2:	f7fa ff6d 	bl	8000990 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ac6:	e00b      	b.n	8005ae0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e2      	bne.n	8005a9c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a03      	ldr	r2, [pc, #12]	; (8005ae8 <SD_SendSDStatus+0x19c>)
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3730      	adds	r7, #48	; 0x30
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	18000f3a 	.word	0x18000f3a

08005aec <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b00:	e018      	b.n	8005b34 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	041b      	lsls	r3, r3, #16
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	4610      	mov	r0, r2
 8005b10:	f000 fd46 	bl	80065a0 <SDMMC_CmdSendStatus>
 8005b14:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d001      	beq.n	8005b20 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	e009      	b.n	8005b34 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2100      	movs	r1, #0
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fac5 	bl	80060b6 <SDMMC_GetResponse>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b086      	sub	sp, #24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005b44:	2300      	movs	r3, #0
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	2300      	movs	r3, #0
 8005b4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2100      	movs	r1, #0
 8005b52:	4618      	mov	r0, r3
 8005b54:	f000 faaf 	bl	80060b6 <SDMMC_GetResponse>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b62:	d102      	bne.n	8005b6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005b68:	e02f      	b.n	8005bca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005b6a:	f107 030c 	add.w	r3, r7, #12
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f879 	bl	8005c68 <SD_FindSCR>
 8005b76:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d001      	beq.n	8005b82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	e023      	b.n	8005bca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01c      	beq.n	8005bc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f000 fc18 	bl	80063ce <SDMMC_CmdAppCommand>
 8005b9e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d001      	beq.n	8005baa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	e00f      	b.n	8005bca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2102      	movs	r1, #2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 fc4f 	bl	8006454 <SDMMC_CmdBusWidth>
 8005bb6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	e003      	b.n	8005bca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e001      	b.n	8005bca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005bc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fa64 	bl	80060b6 <SDMMC_GetResponse>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bf8:	d102      	bne.n	8005c00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005bfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bfe:	e02f      	b.n	8005c60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	4619      	mov	r1, r3
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f82e 	bl	8005c68 <SD_FindSCR>
 8005c0c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	e023      	b.n	8005c60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01c      	beq.n	8005c5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f000 fbcd 	bl	80063ce <SDMMC_CmdAppCommand>
 8005c34:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d001      	beq.n	8005c40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	e00f      	b.n	8005c60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2100      	movs	r1, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fc04 	bl	8006454 <SDMMC_CmdBusWidth>
 8005c4c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	e003      	b.n	8005c60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	e001      	b.n	8005c60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005c5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3718      	adds	r7, #24
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b08e      	sub	sp, #56	; 0x38
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c72:	f7fa fe8d 	bl	8000990 <HAL_GetTick>
 8005c76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2108      	movs	r1, #8
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa50 	bl	8006134 <SDMMC_CmdBlockLength>
 8005c94:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	e0ad      	b.n	8005dfc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca8:	041b      	lsls	r3, r3, #16
 8005caa:	4619      	mov	r1, r3
 8005cac:	4610      	mov	r0, r2
 8005cae:	f000 fb8e 	bl	80063ce <SDMMC_CmdAppCommand>
 8005cb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <SD_FindSCR+0x56>
  {
    return errorstate;
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	e09e      	b.n	8005dfc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005cc4:	2308      	movs	r3, #8
 8005cc6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8005cc8:	2330      	movs	r3, #48	; 0x30
 8005cca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f107 0210 	add.w	r2, r7, #16
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f9fa 	bl	80060dc <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fbd4 	bl	800649a <SDMMC_CmdSendSCR>
 8005cf2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d027      	beq.n	8005d4a <SD_FindSCR+0xe2>
  {
    return errorstate;
 8005cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfc:	e07e      	b.n	8005dfc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d113      	bne.n	8005d34 <SD_FindSCR+0xcc>
 8005d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d110      	bne.n	8005d34 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f958 	bl	8005fcc <SDMMC_ReadFIFO>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 f951 	bl	8005fcc <SDMMC_ReadFIFO>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	60fb      	str	r3, [r7, #12]
      index++;
 8005d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d30:	3301      	adds	r3, #1
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005d34:	f7fa fe2c 	bl	8000990 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d42:	d102      	bne.n	8005d4a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d48:	e058      	b.n	8005dfc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d50:	f240 532a 	movw	r3, #1322	; 0x52a
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0d1      	beq.n	8005cfe <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2208      	movs	r2, #8
 8005d6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005d70:	2308      	movs	r3, #8
 8005d72:	e043      	b.n	8005dfc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2202      	movs	r2, #2
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e036      	b.n	8005dfc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	f003 0320 	and.w	r3, r3, #32
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2220      	movs	r2, #32
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005da4:	2320      	movs	r3, #32
 8005da6:	e029      	b.n	8005dfc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <SD_FindSCR+0x19c>)
 8005dae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	061a      	lsls	r2, r3, #24
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dbc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005dc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	0e1b      	lsrs	r3, r3, #24
 8005dcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8005dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd0:	601a      	str	r2, [r3, #0]
    scr++;
 8005dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	061a      	lsls	r2, r3, #24
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005de4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005dee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	0e1b      	lsrs	r3, r3, #24
 8005df4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8005df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3738      	adds	r7, #56	; 0x38
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	18000f3a 	.word	0x18000f3a

08005e08 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1a:	2b1f      	cmp	r3, #31
 8005e1c:	d936      	bls.n	8005e8c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
 8005e22:	e027      	b.n	8005e74 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f000 f8cf 	bl	8005fcc <SDMMC_ReadFIFO>
 8005e2e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	0a1b      	lsrs	r3, r3, #8
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	0c1b      	lsrs	r3, r3, #16
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	0e1b      	lsrs	r3, r3, #24
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	3301      	adds	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b07      	cmp	r3, #7
 8005e78:	d9d4      	bls.n	8005e24 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e84:	f1a3 0220 	sub.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	2b1f      	cmp	r3, #31
 8005ea8:	d93a      	bls.n	8005f20 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e02b      	b.n	8005f08 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	021a      	lsls	r2, r3, #8
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	041a      	lsls	r2, r3, #16
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	3301      	adds	r3, #1
 8005ede:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	061a      	lsls	r2, r3, #24
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
      tmp++;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f107 020c 	add.w	r2, r7, #12
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 f872 	bl	8005fe6 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	3301      	adds	r3, #1
 8005f06:	617b      	str	r3, [r7, #20]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b07      	cmp	r3, #7
 8005f0c:	d9d0      	bls.n	8005eb0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f1a3 0220 	sub.w	r2, r3, #32
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]
  }
}
 8005f20:	bf00      	nop
 8005f22:	3718      	adds	r7, #24
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8005f78:	b084      	sub	sp, #16
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	f107 001c 	add.w	r0, r7, #28
 8005f86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8005f8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8005f90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8005f92:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8005f96:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8005f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8005f9a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8005f9e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	4b07      	ldr	r3, [pc, #28]	; (8005fc8 <SDMMC_Init+0x50>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	431a      	orrs	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	b004      	add	sp, #16
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	ffc02c00 	.word	0xffc02c00

08005fcc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b083      	sub	sp, #12
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f043 0203 	orr.w	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0303 	and.w	r3, r3, #3
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
	...

08006048 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006066:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800606c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8006072:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <SDMMC_SendCommand+0x50>)
 8006080:	4013      	ands	r3, r2
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	431a      	orrs	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	fffee0c0 	.word	0xfffee0c0

0800609c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	b2db      	uxtb	r3, r3
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3314      	adds	r3, #20
 80060c4:	461a      	mov	r2, r3
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	4413      	add	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006102:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8006108:	431a      	orrs	r2, r3
                       Data->DPSM);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800610e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006126:	2300      	movs	r3, #0

}
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006142:	2310      	movs	r3, #16
 8006144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800614c:	2300      	movs	r3, #0
 800614e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006156:	f107 0308 	add.w	r3, r7, #8
 800615a:	4619      	mov	r1, r3
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f7ff ff73 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8006162:	f241 3288 	movw	r2, #5000	; 0x1388
 8006166:	2110      	movs	r1, #16
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa5f 	bl	800662c <SDMMC_GetCmdResp1>
 800616e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006170:	69fb      	ldr	r3, [r7, #28]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3720      	adds	r7, #32
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b088      	sub	sp, #32
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006188:	2311      	movs	r3, #17
 800618a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800618c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006196:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800619a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800619c:	f107 0308 	add.w	r3, r7, #8
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7ff ff50 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80061a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ac:	2111      	movs	r1, #17
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 fa3c 	bl	800662c <SDMMC_GetCmdResp1>
 80061b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061b6:	69fb      	ldr	r3, [r7, #28]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b088      	sub	sp, #32
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80061ce:	2312      	movs	r3, #18
 80061d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80061d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80061d8:	2300      	movs	r3, #0
 80061da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80061dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80061e2:	f107 0308 	add.w	r3, r7, #8
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff2d 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80061ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f2:	2112      	movs	r1, #18
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa19 	bl	800662c <SDMMC_GetCmdResp1>
 80061fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061fc:	69fb      	ldr	r3, [r7, #28]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3720      	adds	r7, #32
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
 800620e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006214:	2318      	movs	r3, #24
 8006216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006218:	f44f 7380 	mov.w	r3, #256	; 0x100
 800621c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800621e:	2300      	movs	r3, #0
 8006220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006226:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006228:	f107 0308 	add.w	r3, r7, #8
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff ff0a 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8006234:	f241 3288 	movw	r2, #5000	; 0x1388
 8006238:	2118      	movs	r1, #24
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f9f6 	bl	800662c <SDMMC_GetCmdResp1>
 8006240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800625a:	2319      	movs	r3, #25
 800625c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800625e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006262:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800626c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800626e:	f107 0308 	add.w	r3, r7, #8
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff fee7 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800627a:	f241 3288 	movw	r2, #5000	; 0x1388
 800627e:	2119      	movs	r1, #25
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f9d3 	bl	800662c <SDMMC_GetCmdResp1>
 8006286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006288:	69fb      	ldr	r3, [r7, #28]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
	...

08006294 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b088      	sub	sp, #32
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80062a0:	230c      	movs	r3, #12
 80062a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80062a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80062ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80062b2:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80062cc:	f107 0308 	add.w	r3, r7, #8
 80062d0:	4619      	mov	r1, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7ff feb8 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80062d8:	4a0b      	ldr	r2, [pc, #44]	; (8006308 <SDMMC_CmdStopTransfer+0x74>)
 80062da:	210c      	movs	r1, #12
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f9a5 	bl	800662c <SDMMC_GetCmdResp1>
 80062e2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062f6:	d101      	bne.n	80062fc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80062f8:	2300      	movs	r3, #0
 80062fa:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80062fc:	69fb      	ldr	r3, [r7, #28]
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	05f5e100 	.word	0x05f5e100

0800630c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800631a:	2307      	movs	r3, #7
 800631c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800631e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006324:	2300      	movs	r3, #0
 8006326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800632c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	4619      	mov	r1, r3
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f7ff fe87 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800633a:	f241 3288 	movw	r2, #5000	; 0x1388
 800633e:	2107      	movs	r1, #7
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f973 	bl	800662c <SDMMC_GetCmdResp1>
 8006346:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006348:	69fb      	ldr	r3, [r7, #28]
}
 800634a:	4618      	mov	r0, r3
 800634c:	3720      	adds	r7, #32
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b088      	sub	sp, #32
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8006362:	2300      	movs	r3, #0
 8006364:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800636a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800636e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006370:	f107 0308 	add.w	r3, r7, #8
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7ff fe66 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 fb97 	bl	8006ab0 <SDMMC_GetCmdError>
 8006382:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006384:	69fb      	ldr	r3, [r7, #28]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b088      	sub	sp, #32
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006396:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800639a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800639c:	2308      	movs	r3, #8
 800639e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063b0:	f107 0308 	add.w	r3, r7, #8
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fe46 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fb29 	bl	8006a14 <SDMMC_GetCmdResp7>
 80063c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063c4:	69fb      	ldr	r3, [r7, #28]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b088      	sub	sp, #32
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
 80063d6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80063dc:	2337      	movs	r3, #55	; 0x37
 80063de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80063e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80063ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80063f0:	f107 0308 	add.w	r3, r7, #8
 80063f4:	4619      	mov	r1, r3
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7ff fe26 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80063fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006400:	2137      	movs	r1, #55	; 0x37
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f912 	bl	800662c <SDMMC_GetCmdResp1>
 8006408:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800640a:	69fb      	ldr	r3, [r7, #28]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3720      	adds	r7, #32
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006422:	2329      	movs	r3, #41	; 0x29
 8006424:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006426:	f44f 7380 	mov.w	r3, #256	; 0x100
 800642a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006430:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006434:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006436:	f107 0308 	add.w	r3, r7, #8
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff fe03 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa2e 	bl	80068a4 <SDMMC_GetCmdResp3>
 8006448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800644a:	69fb      	ldr	r3, [r7, #28]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3720      	adds	r7, #32
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b088      	sub	sp, #32
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006462:	2306      	movs	r3, #6
 8006464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8006466:	f44f 7380 	mov.w	r3, #256	; 0x100
 800646a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800646c:	2300      	movs	r3, #0
 800646e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006476:	f107 0308 	add.w	r3, r7, #8
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fde3 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8006482:	f241 3288 	movw	r2, #5000	; 0x1388
 8006486:	2106      	movs	r1, #6
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f8cf 	bl	800662c <SDMMC_GetCmdResp1>
 800648e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006490:	69fb      	ldr	r3, [r7, #28]
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b088      	sub	sp, #32
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80064a6:	2333      	movs	r3, #51	; 0x33
 80064a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80064aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064b0:	2300      	movs	r3, #0
 80064b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064ba:	f107 0308 	add.w	r3, r7, #8
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fdc1 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80064c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ca:	2133      	movs	r1, #51	; 0x33
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f8ad 	bl	800662c <SDMMC_GetCmdResp1>
 80064d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064d4:	69fb      	ldr	r3, [r7, #28]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3720      	adds	r7, #32
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b088      	sub	sp, #32
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80064ea:	2302      	movs	r3, #2
 80064ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80064ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80064f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80064f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80064fe:	f107 0308 	add.w	r3, r7, #8
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff fd9f 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f980 	bl	8006810 <SDMMC_GetCmdResp2>
 8006510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006512:	69fb      	ldr	r3, [r7, #28]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b088      	sub	sp, #32
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800652a:	2309      	movs	r3, #9
 800652c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800652e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006532:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006538:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800653c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800653e:	f107 0308 	add.w	r3, r7, #8
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff fd7f 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f960 	bl	8006810 <SDMMC_GetCmdResp2>
 8006550:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006552:	69fb      	ldr	r3, [r7, #28]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3720      	adds	r7, #32
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006566:	2300      	movs	r3, #0
 8006568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800656a:	2303      	movs	r3, #3
 800656c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800656e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800657c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800657e:	f107 0308 	add.w	r3, r7, #8
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f7ff fd5f 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	2103      	movs	r1, #3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9c8 	bl	8006924 <SDMMC_GetCmdResp6>
 8006594:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006596:	69fb      	ldr	r3, [r7, #28]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80065ae:	230d      	movs	r3, #13
 80065b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80065bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80065c2:	f107 0308 	add.w	r3, r7, #8
 80065c6:	4619      	mov	r1, r3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff fd3d 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80065ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d2:	210d      	movs	r1, #13
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f829 	bl	800662c <SDMMC_GetCmdResp1>
 80065da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065dc:	69fb      	ldr	r3, [r7, #28]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b088      	sub	sp, #32
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80065f2:	230d      	movs	r3, #13
 80065f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80065f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8006600:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006604:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8006606:	f107 0308 	add.w	r3, r7, #8
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f7ff fd1b 	bl	8006048 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8006612:	f241 3288 	movw	r2, #5000	; 0x1388
 8006616:	210d      	movs	r1, #13
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f807 	bl	800662c <SDMMC_GetCmdResp1>
 800661e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006620:	69fb      	ldr	r3, [r7, #28]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b088      	sub	sp, #32
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	460b      	mov	r3, r1
 8006636:	607a      	str	r2, [r7, #4]
 8006638:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800663a:	4b70      	ldr	r3, [pc, #448]	; (80067fc <SDMMC_GetCmdResp1+0x1d0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a70      	ldr	r2, [pc, #448]	; (8006800 <SDMMC_GetCmdResp1+0x1d4>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	0a5a      	lsrs	r2, r3, #9
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	fb02 f303 	mul.w	r3, r2, r3
 800664c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	1e5a      	subs	r2, r3, #1
 8006652:	61fa      	str	r2, [r7, #28]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d102      	bne.n	800665e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800665c:	e0c9      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006662:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006664:	69ba      	ldr	r2, [r7, #24]
 8006666:	4b67      	ldr	r3, [pc, #412]	; (8006804 <SDMMC_GetCmdResp1+0x1d8>)
 8006668:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800666a:	2b00      	cmp	r3, #0
 800666c:	d0ef      	beq.n	800664e <SDMMC_GetCmdResp1+0x22>
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1ea      	bne.n	800664e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667c:	f003 0304 	and.w	r3, r3, #4
 8006680:	2b00      	cmp	r3, #0
 8006682:	d004      	beq.n	800668e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2204      	movs	r2, #4
 8006688:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800668a:	2304      	movs	r3, #4
 800668c:	e0b1      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d004      	beq.n	80066a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0a6      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4a58      	ldr	r2, [pc, #352]	; (8006808 <SDMMC_GetCmdResp1+0x1dc>)
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f7ff fcf6 	bl	800609c <SDMMC_GetCommandResponse>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d001      	beq.n	80066be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e099      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80066be:	2100      	movs	r1, #0
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fcf8 	bl	80060b6 <SDMMC_GetResponse>
 80066c6:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4b50      	ldr	r3, [pc, #320]	; (800680c <SDMMC_GetCmdResp1+0x1e0>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d101      	bne.n	80066d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e08d      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	da02      	bge.n	80066e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80066dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066e0:	e087      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80066ec:	2340      	movs	r3, #64	; 0x40
 80066ee:	e080      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	e079      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d002      	beq.n	800670e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006708:	f44f 7380 	mov.w	r3, #256	; 0x100
 800670c:	e071      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800671c:	e069      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d002      	beq.n	800672e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800672c:	e061      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d002      	beq.n	800673e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006738:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800673c:	e059      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674c:	e051      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006758:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800675c:	e049      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d002      	beq.n	800676e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006768:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800676c:	e041      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800677c:	e039      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d002      	beq.n	800678e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006788:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800678c:	e031      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006798:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800679c:	e029      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80067a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80067ac:	e021      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80067b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80067bc:	e019      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80067c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80067cc:	e011      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80067d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80067dc:	e009      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80067e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80067ec:	e001      	b.n	80067f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80067ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3720      	adds	r7, #32
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	24000010 	.word	0x24000010
 8006800:	10624dd3 	.word	0x10624dd3
 8006804:	00200045 	.word	0x00200045
 8006808:	002000c5 	.word	0x002000c5
 800680c:	fdffe008 	.word	0xfdffe008

08006810 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006818:	4b1f      	ldr	r3, [pc, #124]	; (8006898 <SDMMC_GetCmdResp2+0x88>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a1f      	ldr	r2, [pc, #124]	; (800689c <SDMMC_GetCmdResp2+0x8c>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	0a5b      	lsrs	r3, r3, #9
 8006824:	f241 3288 	movw	r2, #5000	; 0x1388
 8006828:	fb02 f303 	mul.w	r3, r2, r3
 800682c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	1e5a      	subs	r2, r3, #1
 8006832:	60fa      	str	r2, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006838:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800683c:	e026      	b.n	800688c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006842:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800684a:	2b00      	cmp	r3, #0
 800684c:	d0ef      	beq.n	800682e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1ea      	bne.n	800682e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2204      	movs	r2, #4
 8006868:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800686a:	2304      	movs	r3, #4
 800686c:	e00e      	b.n	800688c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d004      	beq.n	8006884 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006880:	2301      	movs	r3, #1
 8006882:	e003      	b.n	800688c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a06      	ldr	r2, [pc, #24]	; (80068a0 <SDMMC_GetCmdResp2+0x90>)
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3714      	adds	r7, #20
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	24000010 	.word	0x24000010
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	002000c5 	.word	0x002000c5

080068a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80068ac:	4b1a      	ldr	r3, [pc, #104]	; (8006918 <SDMMC_GetCmdResp3+0x74>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a1a      	ldr	r2, [pc, #104]	; (800691c <SDMMC_GetCmdResp3+0x78>)
 80068b2:	fba2 2303 	umull	r2, r3, r2, r3
 80068b6:	0a5b      	lsrs	r3, r3, #9
 80068b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068bc:	fb02 f303 	mul.w	r3, r2, r3
 80068c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1e5a      	subs	r2, r3, #1
 80068c6:	60fa      	str	r2, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d102      	bne.n	80068d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80068cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80068d0:	e01b      	b.n	800690a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ef      	beq.n	80068c2 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1ea      	bne.n	80068c2 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f0:	f003 0304 	and.w	r3, r3, #4
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d004      	beq.n	8006902 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2204      	movs	r2, #4
 80068fc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068fe:	2304      	movs	r3, #4
 8006900:	e003      	b.n	800690a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a06      	ldr	r2, [pc, #24]	; (8006920 <SDMMC_GetCmdResp3+0x7c>)
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3714      	adds	r7, #20
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr
 8006916:	bf00      	nop
 8006918:	24000010 	.word	0x24000010
 800691c:	10624dd3 	.word	0x10624dd3
 8006920:	002000c5 	.word	0x002000c5

08006924 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	460b      	mov	r3, r1
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006932:	4b35      	ldr	r3, [pc, #212]	; (8006a08 <SDMMC_GetCmdResp6+0xe4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a35      	ldr	r2, [pc, #212]	; (8006a0c <SDMMC_GetCmdResp6+0xe8>)
 8006938:	fba2 2303 	umull	r2, r3, r2, r3
 800693c:	0a5b      	lsrs	r3, r3, #9
 800693e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	1e5a      	subs	r2, r3, #1
 800694c:	61fa      	str	r2, [r7, #28]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006952:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006956:	e052      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800695c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006964:	2b00      	cmp	r3, #0
 8006966:	d0ef      	beq.n	8006948 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1ea      	bne.n	8006948 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2204      	movs	r2, #4
 8006982:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006984:	2304      	movs	r3, #4
 8006986:	e03a      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698c:	f003 0301 	and.w	r3, r3, #1
 8006990:	2b00      	cmp	r3, #0
 8006992:	d004      	beq.n	800699e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2201      	movs	r2, #1
 8006998:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800699a:	2301      	movs	r3, #1
 800699c:	e02f      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f7ff fb7c 	bl	800609c <SDMMC_GetCommandResponse>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d001      	beq.n	80069b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e025      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	4a16      	ldr	r2, [pc, #88]	; (8006a10 <SDMMC_GetCmdResp6+0xec>)
 80069b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80069b8:	2100      	movs	r1, #0
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f7ff fb7b 	bl	80060b6 <SDMMC_GetResponse>
 80069c0:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	b29a      	uxth	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80069d6:	2300      	movs	r3, #0
 80069d8:	e011      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069e8:	e009      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80069f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069f8:	e001      	b.n	80069fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80069fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	24000010 	.word	0x24000010
 8006a0c:	10624dd3 	.word	0x10624dd3
 8006a10:	002000c5 	.word	0x002000c5

08006a14 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006a1c:	4b22      	ldr	r3, [pc, #136]	; (8006aa8 <SDMMC_GetCmdResp7+0x94>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a22      	ldr	r2, [pc, #136]	; (8006aac <SDMMC_GetCmdResp7+0x98>)
 8006a22:	fba2 2303 	umull	r2, r3, r2, r3
 8006a26:	0a5b      	lsrs	r3, r3, #9
 8006a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2c:	fb02 f303 	mul.w	r3, r2, r3
 8006a30:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	60fa      	str	r2, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a40:	e02c      	b.n	8006a9c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a46:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0ef      	beq.n	8006a32 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d1ea      	bne.n	8006a32 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2204      	movs	r2, #4
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a6e:	2304      	movs	r3, #4
 8006a70:	e014      	b.n	8006a9c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e009      	b.n	8006a9c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2240      	movs	r2, #64	; 0x40
 8006a98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006a9a:	2300      	movs	r3, #0

}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	24000010 	.word	0x24000010
 8006aac:	10624dd3 	.word	0x10624dd3

08006ab0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8006ab8:	4b11      	ldr	r3, [pc, #68]	; (8006b00 <SDMMC_GetCmdError+0x50>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a11      	ldr	r2, [pc, #68]	; (8006b04 <SDMMC_GetCmdError+0x54>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	0a5b      	lsrs	r3, r3, #9
 8006ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ac8:	fb02 f303 	mul.w	r3, r2, r3
 8006acc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	1e5a      	subs	r2, r3, #1
 8006ad2:	60fa      	str	r2, [r7, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006adc:	e009      	b.n	8006af2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0f1      	beq.n	8006ace <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a06      	ldr	r2, [pc, #24]	; (8006b08 <SDMMC_GetCmdError+0x58>)
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3714      	adds	r7, #20
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	24000010 	.word	0x24000010
 8006b04:	10624dd3 	.word	0x10624dd3
 8006b08:	002000c5 	.word	0x002000c5

08006b0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b10:	4904      	ldr	r1, [pc, #16]	; (8006b24 <MX_FATFS_Init+0x18>)
 8006b12:	4805      	ldr	r0, [pc, #20]	; (8006b28 <MX_FATFS_Init+0x1c>)
 8006b14:	f002 fbe6 	bl	80092e4 <FATFS_LinkDriver>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <MX_FATFS_Init+0x20>)
 8006b1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b20:	bf00      	nop
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	240000c0 	.word	0x240000c0
 8006b28:	080093d8 	.word	0x080093d8
 8006b2c:	240000bc 	.word	0x240000bc

08006b30 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006b34:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006b46:	2300      	movs	r3, #0
 8006b48:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b4a:	f000 f877 	bl	8006c3c <BSP_SD_IsDetected>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d001      	beq.n	8006b58 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8006b54:	2302      	movs	r3, #2
 8006b56:	e005      	b.n	8006b64 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8006b58:	4804      	ldr	r0, [pc, #16]	; (8006b6c <BSP_SD_Init+0x2c>)
 8006b5a:	f7fd fda9 	bl	80046b0 <HAL_SD_Init>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006b62:	79fb      	ldrb	r3, [r7, #7]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3708      	adds	r7, #8
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	2400003c 	.word	0x2400003c

08006b70 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	68f9      	ldr	r1, [r7, #12]
 8006b86:	4806      	ldr	r0, [pc, #24]	; (8006ba0 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006b88:	f7fd feb2 	bl	80048f0 <HAL_SD_ReadBlocks_DMA>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	2400003c 	.word	0x2400003c

08006ba4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	68f9      	ldr	r1, [r7, #12]
 8006bba:	4806      	ldr	r0, [pc, #24]	; (8006bd4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006bbc:	f7fd ff40 	bl	8004a40 <HAL_SD_WriteBlocks_DMA>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	2400003c 	.word	0x2400003c

08006bd8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006bdc:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <BSP_SD_GetCardState+0x1c>)
 8006bde:	f7fe fd39 	bl	8005654 <HAL_SD_GetCardState>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2400003c 	.word	0x2400003c

08006bf8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8006c00:	6879      	ldr	r1, [r7, #4]
 8006c02:	4803      	ldr	r0, [pc, #12]	; (8006c10 <BSP_SD_GetCardInfo+0x18>)
 8006c04:	f7fe fbe8 	bl	80053d8 <HAL_SD_GetCardInfo>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	2400003c 	.word	0x2400003c

08006c14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006c1c:	f000 f9a0 	bl	8006f60 <BSP_SD_WriteCpltCallback>
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006c30:	f000 f9a2 	bl	8006f78 <BSP_SD_ReadCpltCallback>
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c42:	2301      	movs	r3, #1
 8006c44:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006c46:	f000 f80b 	bl	8006c60 <BSP_PlatformIsDetected>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006c50:	2300      	movs	r3, #0
 8006c52:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006c54:	79fb      	ldrb	r3, [r7, #7]
 8006c56:	b2db      	uxtb	r3, r3
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006c66:	2301      	movs	r3, #1
 8006c68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006c6a:	2104      	movs	r1, #4
 8006c6c:	4806      	ldr	r0, [pc, #24]	; (8006c88 <BSP_PlatformIsDetected+0x28>)
 8006c6e:	f7fa f977 	bl	8000f60 <HAL_GPIO_ReadPin>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	58021000 	.word	0x58021000

08006c8c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006c94:	f7f9 fe7c 	bl	8000990 <HAL_GetTick>
 8006c98:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8006c9a:	e006      	b.n	8006caa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c9c:	f7ff ff9c 	bl	8006bd8 <BSP_SD_GetCardState>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d101      	bne.n	8006caa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e009      	b.n	8006cbe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8006caa:	f7f9 fe71 	bl	8000990 <HAL_GetTick>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	1ad3      	subs	r3, r2, r3
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d8f0      	bhi.n	8006c9c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3710      	adds	r7, #16
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006cd2:	4b0b      	ldr	r3, [pc, #44]	; (8006d00 <SD_CheckStatus+0x38>)
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006cd8:	f7ff ff7e 	bl	8006bd8 <BSP_SD_GetCardState>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d107      	bne.n	8006cf2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006ce2:	4b07      	ldr	r3, [pc, #28]	; (8006d00 <SD_CheckStatus+0x38>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f023 0301 	bic.w	r3, r3, #1
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <SD_CheckStatus+0x38>)
 8006cf0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006cf2:	4b03      	ldr	r3, [pc, #12]	; (8006d00 <SD_CheckStatus+0x38>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	b2db      	uxtb	r3, r3
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3708      	adds	r7, #8
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	2400001d 	.word	0x2400001d

08006d04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006d0e:	f7ff ff17 	bl	8006b40 <BSP_SD_Init>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d107      	bne.n	8006d28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff ffd4 	bl	8006cc8 <SD_CheckStatus>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <SD_initialize+0x34>)
 8006d26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006d28:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <SD_initialize+0x34>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b2db      	uxtb	r3, r3
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	2400001d 	.word	0x2400001d

08006d3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	4603      	mov	r3, r0
 8006d44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ffbd 	bl	8006cc8 <SD_CheckStatus>
 8006d4e:	4603      	mov	r3, r0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	607a      	str	r2, [r7, #4]
 8006d62:	603b      	str	r3, [r7, #0]
 8006d64:	4603      	mov	r3, r0
 8006d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006d6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006d70:	f7ff ff8c 	bl	8006c8c <SD_CheckStatusWithTimeout>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	da01      	bge.n	8006d7e <SD_read+0x26>
  {
    return res;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	e03b      	b.n	8006df6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8006d7e:	683a      	ldr	r2, [r7, #0]
 8006d80:	6879      	ldr	r1, [r7, #4]
 8006d82:	68b8      	ldr	r0, [r7, #8]
 8006d84:	f7ff fef4 	bl	8006b70 <BSP_SD_ReadBlocks_DMA>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d132      	bne.n	8006df4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8006d8e:	4b1c      	ldr	r3, [pc, #112]	; (8006e00 <SD_read+0xa8>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006d94:	f7f9 fdfc 	bl	8000990 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006d9a:	bf00      	nop
 8006d9c:	4b18      	ldr	r3, [pc, #96]	; (8006e00 <SD_read+0xa8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d108      	bne.n	8006db6 <SD_read+0x5e>
 8006da4:	f7f9 fdf4 	bl	8000990 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f247 522f 	movw	r2, #29999	; 0x752f
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d9f2      	bls.n	8006d9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8006db6:	4b12      	ldr	r3, [pc, #72]	; (8006e00 <SD_read+0xa8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
 8006dc2:	e017      	b.n	8006df4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	; (8006e00 <SD_read+0xa8>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006dca:	f7f9 fde1 	bl	8000990 <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006dd0:	e007      	b.n	8006de2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006dd2:	f7ff ff01 	bl	8006bd8 <BSP_SD_GetCardState>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <SD_read+0x8a>
          {
            res = RES_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8006de0:	e008      	b.n	8006df4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006de2:	f7f9 fdd5 	bl	8000990 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f247 522f 	movw	r2, #29999	; 0x752f
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d9ee      	bls.n	8006dd2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8006df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3718      	adds	r7, #24
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	24000528 	.word	0x24000528

08006e04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	4603      	mov	r3, r0
 8006e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8006e18:	4b24      	ldr	r3, [pc, #144]	; (8006eac <SD_write+0xa8>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006e1e:	f247 5030 	movw	r0, #30000	; 0x7530
 8006e22:	f7ff ff33 	bl	8006c8c <SD_CheckStatusWithTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	da01      	bge.n	8006e30 <SD_write+0x2c>
  {
    return res;
 8006e2c:	7dfb      	ldrb	r3, [r7, #23]
 8006e2e:	e038      	b.n	8006ea2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	6879      	ldr	r1, [r7, #4]
 8006e34:	68b8      	ldr	r0, [r7, #8]
 8006e36:	f7ff feb5 	bl	8006ba4 <BSP_SD_WriteBlocks_DMA>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d12f      	bne.n	8006ea0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8006e40:	f7f9 fda6 	bl	8000990 <HAL_GetTick>
 8006e44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006e46:	bf00      	nop
 8006e48:	4b18      	ldr	r3, [pc, #96]	; (8006eac <SD_write+0xa8>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d108      	bne.n	8006e62 <SD_write+0x5e>
 8006e50:	f7f9 fd9e 	bl	8000990 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f247 522f 	movw	r2, #29999	; 0x752f
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d9f2      	bls.n	8006e48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8006e62:	4b12      	ldr	r3, [pc, #72]	; (8006eac <SD_write+0xa8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d102      	bne.n	8006e70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	75fb      	strb	r3, [r7, #23]
 8006e6e:	e017      	b.n	8006ea0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8006e70:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <SD_write+0xa8>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006e76:	f7f9 fd8b 	bl	8000990 <HAL_GetTick>
 8006e7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006e7c:	e007      	b.n	8006e8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006e7e:	f7ff feab 	bl	8006bd8 <BSP_SD_GetCardState>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d102      	bne.n	8006e8e <SD_write+0x8a>
          {
            res = RES_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8006e8c:	e008      	b.n	8006ea0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8006e8e:	f7f9 fd7f 	bl	8000990 <HAL_GetTick>
 8006e92:	4602      	mov	r2, r0
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	1ad3      	subs	r3, r2, r3
 8006e98:	f247 522f 	movw	r2, #29999	; 0x752f
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d9ee      	bls.n	8006e7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8006ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	24000524 	.word	0x24000524

08006eb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08c      	sub	sp, #48	; 0x30
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	603a      	str	r2, [r7, #0]
 8006eba:	71fb      	strb	r3, [r7, #7]
 8006ebc:	460b      	mov	r3, r1
 8006ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006ec6:	4b25      	ldr	r3, [pc, #148]	; (8006f5c <SD_ioctl+0xac>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <SD_ioctl+0x28>
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e03c      	b.n	8006f52 <SD_ioctl+0xa2>

  switch (cmd)
 8006ed8:	79bb      	ldrb	r3, [r7, #6]
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d834      	bhi.n	8006f48 <SD_ioctl+0x98>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <SD_ioctl+0x34>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006efd 	.word	0x08006efd
 8006eec:	08006f15 	.word	0x08006f15
 8006ef0:	08006f2f 	.word	0x08006f2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006efa:	e028      	b.n	8006f4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006efc:	f107 0308 	add.w	r3, r7, #8
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fe79 	bl	8006bf8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006f06:	6a3a      	ldr	r2, [r7, #32]
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f12:	e01c      	b.n	8006f4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f14:	f107 0308 	add.w	r3, r7, #8
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff fe6d 	bl	8006bf8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f2c:	e00f      	b.n	8006f4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f7ff fe60 	bl	8006bf8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	0a5a      	lsrs	r2, r3, #9
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006f46:	e002      	b.n	8006f4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006f48:	2304      	movs	r3, #4
 8006f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3730      	adds	r7, #48	; 0x30
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	2400001d 	.word	0x2400001d

08006f60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006f60:	b480      	push	{r7}
 8006f62:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8006f64:	4b03      	ldr	r3, [pc, #12]	; (8006f74 <BSP_SD_WriteCpltCallback+0x14>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	24000524 	.word	0x24000524

08006f78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8006f7c:	4b03      	ldr	r3, [pc, #12]	; (8006f8c <BSP_SD_ReadCpltCallback+0x14>)
 8006f7e:	2201      	movs	r2, #1
 8006f80:	601a      	str	r2, [r3, #0]
}
 8006f82:	bf00      	nop
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	24000528 	.word	0x24000528

08006f90 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	4603      	mov	r3, r0
 8006f98:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	4a08      	ldr	r2, [pc, #32]	; (8006fc0 <disk_status+0x30>)
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	79fa      	ldrb	r2, [r7, #7]
 8006fa8:	4905      	ldr	r1, [pc, #20]	; (8006fc0 <disk_status+0x30>)
 8006faa:	440a      	add	r2, r1
 8006fac:	7a12      	ldrb	r2, [r2, #8]
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4798      	blx	r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	24000554 	.word	0x24000554

08006fc4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	4603      	mov	r3, r0
 8006fcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	4a0d      	ldr	r2, [pc, #52]	; (800700c <disk_initialize+0x48>)
 8006fd6:	5cd3      	ldrb	r3, [r2, r3]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d111      	bne.n	8007000 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	4a0b      	ldr	r2, [pc, #44]	; (800700c <disk_initialize+0x48>)
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <disk_initialize+0x48>)
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	79fa      	ldrb	r2, [r7, #7]
 8006ff2:	4906      	ldr	r1, [pc, #24]	; (800700c <disk_initialize+0x48>)
 8006ff4:	440a      	add	r2, r1
 8006ff6:	7a12      	ldrb	r2, [r2, #8]
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	4798      	blx	r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007000:	7bfb      	ldrb	r3, [r7, #15]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	24000554 	.word	0x24000554

08007010 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007010:	b590      	push	{r4, r7, lr}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	4a0a      	ldr	r2, [pc, #40]	; (800704c <disk_read+0x3c>)
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	689c      	ldr	r4, [r3, #8]
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	4a07      	ldr	r2, [pc, #28]	; (800704c <disk_read+0x3c>)
 8007030:	4413      	add	r3, r2
 8007032:	7a18      	ldrb	r0, [r3, #8]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	68b9      	ldr	r1, [r7, #8]
 800703a:	47a0      	blx	r4
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
}
 8007042:	4618      	mov	r0, r3
 8007044:	371c      	adds	r7, #28
 8007046:	46bd      	mov	sp, r7
 8007048:	bd90      	pop	{r4, r7, pc}
 800704a:	bf00      	nop
 800704c:	24000554 	.word	0x24000554

08007050 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007050:	b590      	push	{r4, r7, lr}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	603b      	str	r3, [r7, #0]
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4a0a      	ldr	r2, [pc, #40]	; (800708c <disk_write+0x3c>)
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	4413      	add	r3, r2
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	68dc      	ldr	r4, [r3, #12]
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	4a07      	ldr	r2, [pc, #28]	; (800708c <disk_write+0x3c>)
 8007070:	4413      	add	r3, r2
 8007072:	7a18      	ldrb	r0, [r3, #8]
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	68b9      	ldr	r1, [r7, #8]
 800707a:	47a0      	blx	r4
 800707c:	4603      	mov	r3, r0
 800707e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
}
 8007082:	4618      	mov	r0, r3
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}
 800708a:	bf00      	nop
 800708c:	24000554 	.word	0x24000554

08007090 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	4603      	mov	r3, r0
 8007098:	603a      	str	r2, [r7, #0]
 800709a:	71fb      	strb	r3, [r7, #7]
 800709c:	460b      	mov	r3, r1
 800709e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80070a0:	79fb      	ldrb	r3, [r7, #7]
 80070a2:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <disk_ioctl+0x38>)
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	79fa      	ldrb	r2, [r7, #7]
 80070ae:	4906      	ldr	r1, [pc, #24]	; (80070c8 <disk_ioctl+0x38>)
 80070b0:	440a      	add	r2, r1
 80070b2:	7a10      	ldrb	r0, [r2, #8]
 80070b4:	79b9      	ldrb	r1, [r7, #6]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	4798      	blx	r3
 80070ba:	4603      	mov	r3, r0
 80070bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80070be:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	24000554 	.word	0x24000554

080070cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3301      	adds	r3, #1
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80070dc:	89fb      	ldrh	r3, [r7, #14]
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	b21a      	sxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	b21b      	sxth	r3, r3
 80070e8:	4313      	orrs	r3, r2
 80070ea:	b21b      	sxth	r3, r3
 80070ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80070ee:	89fb      	ldrh	r3, [r7, #14]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3303      	adds	r3, #3
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	021b      	lsls	r3, r3, #8
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	3202      	adds	r2, #2
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	4313      	orrs	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	3201      	adds	r2, #1
 8007122:	7812      	ldrb	r2, [r2, #0]
 8007124:	4313      	orrs	r3, r2
 8007126:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	021b      	lsls	r3, r3, #8
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	7812      	ldrb	r2, [r2, #0]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
	return rv;
 8007134:	68fb      	ldr	r3, [r7, #12]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr

08007142 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	1c5a      	adds	r2, r3, #1
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	887a      	ldrh	r2, [r7, #2]
 8007156:	b2d2      	uxtb	r2, r2
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	887b      	ldrh	r3, [r7, #2]
 800715c:	0a1b      	lsrs	r3, r3, #8
 800715e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	887a      	ldrh	r2, [r7, #2]
 8007168:	b2d2      	uxtb	r2, r2
 800716a:	701a      	strb	r2, [r3, #0]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	b2d2      	uxtb	r2, r2
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1c5a      	adds	r2, r3, #1
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	0a1b      	lsrs	r3, r3, #8
 80071a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	683a      	ldr	r2, [r7, #0]
 80071ae:	b2d2      	uxtb	r2, r2
 80071b0:	701a      	strb	r2, [r3, #0]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	b2d2      	uxtb	r2, r2
 80071c2:	701a      	strb	r2, [r3, #0]
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80071d0:	b480      	push	{r7}
 80071d2:	b087      	sub	sp, #28
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00d      	beq.n	8007206 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80071ea:	693a      	ldr	r2, [r7, #16]
 80071ec:	1c53      	adds	r3, r2, #1
 80071ee:	613b      	str	r3, [r7, #16]
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	1c59      	adds	r1, r3, #1
 80071f4:	6179      	str	r1, [r7, #20]
 80071f6:	7812      	ldrb	r2, [r2, #0]
 80071f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	607b      	str	r3, [r7, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d1f1      	bne.n	80071ea <mem_cpy+0x1a>
	}
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007212:	b480      	push	{r7}
 8007214:	b087      	sub	sp, #28
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	1c5a      	adds	r2, r3, #1
 8007226:	617a      	str	r2, [r7, #20]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3b01      	subs	r3, #1
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1f3      	bne.n	8007222 <mem_set+0x10>
}
 800723a:	bf00      	nop
 800723c:	bf00      	nop
 800723e:	371c      	adds	r7, #28
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007248:	b480      	push	{r7}
 800724a:	b089      	sub	sp, #36	; 0x24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	1c5a      	adds	r2, r3, #1
 8007264:	61fa      	str	r2, [r7, #28]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	4619      	mov	r1, r3
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	1c5a      	adds	r2, r3, #1
 800726e:	61ba      	str	r2, [r7, #24]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	1acb      	subs	r3, r1, r3
 8007274:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3b01      	subs	r3, #1
 800727a:	607b      	str	r3, [r7, #4]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <mem_cmp+0x40>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d0eb      	beq.n	8007260 <mem_cmp+0x18>

	return r;
 8007288:	697b      	ldr	r3, [r7, #20]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3724      	adds	r7, #36	; 0x24
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80072a0:	e002      	b.n	80072a8 <chk_chr+0x12>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3301      	adds	r3, #1
 80072a6:	607b      	str	r3, [r7, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d005      	beq.n	80072bc <chk_chr+0x26>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	461a      	mov	r2, r3
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d1f2      	bne.n	80072a2 <chk_chr+0xc>
	return *str;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	781b      	ldrb	r3, [r3, #0]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072d6:	2300      	movs	r3, #0
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	60fb      	str	r3, [r7, #12]
 80072de:	e029      	b.n	8007334 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80072e0:	4a27      	ldr	r2, [pc, #156]	; (8007380 <chk_lock+0xb4>)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01d      	beq.n	800732a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80072ee:	4a24      	ldr	r2, [pc, #144]	; (8007380 <chk_lock+0xb4>)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	4413      	add	r3, r2
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d116      	bne.n	800732e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007300:	4a1f      	ldr	r2, [pc, #124]	; (8007380 <chk_lock+0xb4>)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	4413      	add	r3, r2
 8007308:	3304      	adds	r3, #4
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007310:	429a      	cmp	r2, r3
 8007312:	d10c      	bne.n	800732e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007314:	4a1a      	ldr	r2, [pc, #104]	; (8007380 <chk_lock+0xb4>)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	011b      	lsls	r3, r3, #4
 800731a:	4413      	add	r3, r2
 800731c:	3308      	adds	r3, #8
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007324:	429a      	cmp	r2, r3
 8007326:	d102      	bne.n	800732e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007328:	e007      	b.n	800733a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800732a:	2301      	movs	r3, #1
 800732c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	3301      	adds	r3, #1
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d9d2      	bls.n	80072e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b02      	cmp	r3, #2
 800733e:	d109      	bne.n	8007354 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d102      	bne.n	800734c <chk_lock+0x80>
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d101      	bne.n	8007350 <chk_lock+0x84>
 800734c:	2300      	movs	r3, #0
 800734e:	e010      	b.n	8007372 <chk_lock+0xa6>
 8007350:	2312      	movs	r3, #18
 8007352:	e00e      	b.n	8007372 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d108      	bne.n	800736c <chk_lock+0xa0>
 800735a:	4a09      	ldr	r2, [pc, #36]	; (8007380 <chk_lock+0xb4>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	011b      	lsls	r3, r3, #4
 8007360:	4413      	add	r3, r2
 8007362:	330c      	adds	r3, #12
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800736a:	d101      	bne.n	8007370 <chk_lock+0xa4>
 800736c:	2310      	movs	r3, #16
 800736e:	e000      	b.n	8007372 <chk_lock+0xa6>
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	24000534 	.word	0x24000534

08007384 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	e002      	b.n	8007396 <enq_lock+0x12>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	3301      	adds	r3, #1
 8007394:	607b      	str	r3, [r7, #4]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d806      	bhi.n	80073aa <enq_lock+0x26>
 800739c:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <enq_lock+0x40>)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	4413      	add	r3, r2
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f2      	bne.n	8007390 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	bf14      	ite	ne
 80073b0:	2301      	movne	r3, #1
 80073b2:	2300      	moveq	r3, #0
 80073b4:	b2db      	uxtb	r3, r3
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	24000534 	.word	0x24000534

080073c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	e01f      	b.n	8007418 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80073d8:	4a41      	ldr	r2, [pc, #260]	; (80074e0 <inc_lock+0x118>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	011b      	lsls	r3, r3, #4
 80073de:	4413      	add	r3, r2
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d113      	bne.n	8007412 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80073ea:	4a3d      	ldr	r2, [pc, #244]	; (80074e0 <inc_lock+0x118>)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	011b      	lsls	r3, r3, #4
 80073f0:	4413      	add	r3, r2
 80073f2:	3304      	adds	r3, #4
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d109      	bne.n	8007412 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80073fe:	4a38      	ldr	r2, [pc, #224]	; (80074e0 <inc_lock+0x118>)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	011b      	lsls	r3, r3, #4
 8007404:	4413      	add	r3, r2
 8007406:	3308      	adds	r3, #8
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800740e:	429a      	cmp	r2, r3
 8007410:	d006      	beq.n	8007420 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3301      	adds	r3, #1
 8007416:	60fb      	str	r3, [r7, #12]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d9dc      	bls.n	80073d8 <inc_lock+0x10>
 800741e:	e000      	b.n	8007422 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007420:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b02      	cmp	r3, #2
 8007426:	d132      	bne.n	800748e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e002      	b.n	8007434 <inc_lock+0x6c>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3301      	adds	r3, #1
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d806      	bhi.n	8007448 <inc_lock+0x80>
 800743a:	4a29      	ldr	r2, [pc, #164]	; (80074e0 <inc_lock+0x118>)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	011b      	lsls	r3, r3, #4
 8007440:	4413      	add	r3, r2
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1f2      	bne.n	800742e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d101      	bne.n	8007452 <inc_lock+0x8a>
 800744e:	2300      	movs	r3, #0
 8007450:	e040      	b.n	80074d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	4922      	ldr	r1, [pc, #136]	; (80074e0 <inc_lock+0x118>)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	440b      	add	r3, r1
 800745e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	491e      	ldr	r1, [pc, #120]	; (80074e0 <inc_lock+0x118>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	011b      	lsls	r3, r3, #4
 800746a:	440b      	add	r3, r1
 800746c:	3304      	adds	r3, #4
 800746e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695a      	ldr	r2, [r3, #20]
 8007474:	491a      	ldr	r1, [pc, #104]	; (80074e0 <inc_lock+0x118>)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	440b      	add	r3, r1
 800747c:	3308      	adds	r3, #8
 800747e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007480:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <inc_lock+0x118>)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	330c      	adds	r3, #12
 800748a:	2200      	movs	r2, #0
 800748c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <inc_lock+0xe0>
 8007494:	4a12      	ldr	r2, [pc, #72]	; (80074e0 <inc_lock+0x118>)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	011b      	lsls	r3, r3, #4
 800749a:	4413      	add	r3, r2
 800749c:	330c      	adds	r3, #12
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <inc_lock+0xe0>
 80074a4:	2300      	movs	r3, #0
 80074a6:	e015      	b.n	80074d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d108      	bne.n	80074c0 <inc_lock+0xf8>
 80074ae:	4a0c      	ldr	r2, [pc, #48]	; (80074e0 <inc_lock+0x118>)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	4413      	add	r3, r2
 80074b6:	330c      	adds	r3, #12
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	b29a      	uxth	r2, r3
 80074be:	e001      	b.n	80074c4 <inc_lock+0xfc>
 80074c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074c4:	4906      	ldr	r1, [pc, #24]	; (80074e0 <inc_lock+0x118>)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	440b      	add	r3, r1
 80074cc:	330c      	adds	r3, #12
 80074ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	3301      	adds	r3, #1
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	24000534 	.word	0x24000534

080074e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	607b      	str	r3, [r7, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d825      	bhi.n	8007544 <dec_lock+0x60>
		n = Files[i].ctr;
 80074f8:	4a17      	ldr	r2, [pc, #92]	; (8007558 <dec_lock+0x74>)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	330c      	adds	r3, #12
 8007502:	881b      	ldrh	r3, [r3, #0]
 8007504:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007506:	89fb      	ldrh	r3, [r7, #14]
 8007508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800750c:	d101      	bne.n	8007512 <dec_lock+0x2e>
 800750e:	2300      	movs	r3, #0
 8007510:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007512:	89fb      	ldrh	r3, [r7, #14]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d002      	beq.n	800751e <dec_lock+0x3a>
 8007518:	89fb      	ldrh	r3, [r7, #14]
 800751a:	3b01      	subs	r3, #1
 800751c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800751e:	4a0e      	ldr	r2, [pc, #56]	; (8007558 <dec_lock+0x74>)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	4413      	add	r3, r2
 8007526:	330c      	adds	r3, #12
 8007528:	89fa      	ldrh	r2, [r7, #14]
 800752a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800752c:	89fb      	ldrh	r3, [r7, #14]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <dec_lock+0x5a>
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <dec_lock+0x74>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	4413      	add	r3, r2
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800753e:	2300      	movs	r3, #0
 8007540:	737b      	strb	r3, [r7, #13]
 8007542:	e001      	b.n	8007548 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007544:	2302      	movs	r3, #2
 8007546:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007548:	7b7b      	ldrb	r3, [r7, #13]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	24000534 	.word	0x24000534

0800755c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007564:	2300      	movs	r3, #0
 8007566:	60fb      	str	r3, [r7, #12]
 8007568:	e010      	b.n	800758c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800756a:	4a0d      	ldr	r2, [pc, #52]	; (80075a0 <clear_lock+0x44>)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	4413      	add	r3, r2
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	429a      	cmp	r2, r3
 8007578:	d105      	bne.n	8007586 <clear_lock+0x2a>
 800757a:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <clear_lock+0x44>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	011b      	lsls	r3, r3, #4
 8007580:	4413      	add	r3, r2
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	3301      	adds	r3, #1
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d9eb      	bls.n	800756a <clear_lock+0xe>
	}
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	3714      	adds	r7, #20
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	24000534 	.word	0x24000534

080075a4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	78db      	ldrb	r3, [r3, #3]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d034      	beq.n	8007622 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	7858      	ldrb	r0, [r3, #1]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075c8:	2301      	movs	r3, #1
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	f7ff fd40 	bl	8007050 <disk_write>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <sync_window+0x38>
			res = FR_DISK_ERR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	73fb      	strb	r3, [r7, #15]
 80075da:	e022      	b.n	8007622 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	1ad2      	subs	r2, r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d217      	bcs.n	8007622 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	789b      	ldrb	r3, [r3, #2]
 80075f6:	613b      	str	r3, [r7, #16]
 80075f8:	e010      	b.n	800761c <sync_window+0x78>
					wsect += fs->fsize;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4413      	add	r3, r2
 8007602:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7858      	ldrb	r0, [r3, #1]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800760e:	2301      	movs	r3, #1
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	f7ff fd1d 	bl	8007050 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	3b01      	subs	r3, #1
 800761a:	613b      	str	r3, [r7, #16]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d8eb      	bhi.n	80075fa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007622:	7bfb      	ldrb	r3, [r7, #15]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007636:	2300      	movs	r3, #0
 8007638:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	683a      	ldr	r2, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d01b      	beq.n	800767c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff ffad 	bl	80075a4 <sync_window>
 800764a:	4603      	mov	r3, r0
 800764c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800764e:	7bfb      	ldrb	r3, [r7, #15]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d113      	bne.n	800767c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	7858      	ldrb	r0, [r3, #1]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800765e:	2301      	movs	r3, #1
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	f7ff fcd5 	bl	8007010 <disk_read>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d004      	beq.n	8007676 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800766c:	f04f 33ff 	mov.w	r3, #4294967295
 8007670:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007672:	2301      	movs	r3, #1
 8007674:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff ff87 	bl	80075a4 <sync_window>
 8007696:	4603      	mov	r3, r0
 8007698:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800769a:	7bfb      	ldrb	r3, [r7, #15]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d158      	bne.n	8007752 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d148      	bne.n	800773a <sync_fs+0xb2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	791b      	ldrb	r3, [r3, #4]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d144      	bne.n	800773a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3330      	adds	r3, #48	; 0x30
 80076b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076b8:	2100      	movs	r1, #0
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fda9 	bl	8007212 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	3330      	adds	r3, #48	; 0x30
 80076c4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80076c8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fd38 	bl	8007142 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3330      	adds	r3, #48	; 0x30
 80076d6:	4921      	ldr	r1, [pc, #132]	; (800775c <sync_fs+0xd4>)
 80076d8:	4618      	mov	r0, r3
 80076da:	f7ff fd4d 	bl	8007178 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3330      	adds	r3, #48	; 0x30
 80076e2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80076e6:	491e      	ldr	r1, [pc, #120]	; (8007760 <sync_fs+0xd8>)
 80076e8:	4618      	mov	r0, r3
 80076ea:	f7ff fd45 	bl	8007178 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3330      	adds	r3, #48	; 0x30
 80076f2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	4619      	mov	r1, r3
 80076fc:	4610      	mov	r0, r2
 80076fe:	f7ff fd3b 	bl	8007178 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	3330      	adds	r3, #48	; 0x30
 8007706:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	68db      	ldr	r3, [r3, #12]
 800770e:	4619      	mov	r1, r3
 8007710:	4610      	mov	r0, r2
 8007712:	f7ff fd31 	bl	8007178 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	1c5a      	adds	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	7858      	ldrb	r0, [r3, #1]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800772e:	2301      	movs	r3, #1
 8007730:	f7ff fc8e 	bl	8007050 <disk_write>
			fs->fsi_flag = 0;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	2200      	movs	r2, #0
 8007740:	2100      	movs	r1, #0
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fca4 	bl	8007090 <disk_ioctl>
 8007748:	4603      	mov	r3, r0
 800774a:	2b00      	cmp	r3, #0
 800774c:	d001      	beq.n	8007752 <sync_fs+0xca>
 800774e:	2301      	movs	r3, #1
 8007750:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007752:	7bfb      	ldrb	r3, [r7, #15]
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	41615252 	.word	0x41615252
 8007760:	61417272 	.word	0x61417272

08007764 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	3b02      	subs	r3, #2
 8007772:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	3b02      	subs	r3, #2
 800777a:	683a      	ldr	r2, [r7, #0]
 800777c:	429a      	cmp	r2, r3
 800777e:	d301      	bcc.n	8007784 <clust2sect+0x20>
 8007780:	2300      	movs	r3, #0
 8007782:	e008      	b.n	8007796 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	895b      	ldrh	r3, [r3, #10]
 8007788:	461a      	mov	r2, r3
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	fb03 f202 	mul.w	r2, r3, r2
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	4413      	add	r3, r2
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d904      	bls.n	80077c2 <get_fat+0x20>
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	429a      	cmp	r2, r3
 80077c0:	d302      	bcc.n	80077c8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80077c2:	2301      	movs	r3, #1
 80077c4:	617b      	str	r3, [r7, #20]
 80077c6:	e08f      	b.n	80078e8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295
 80077cc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d062      	beq.n	800789c <get_fat+0xfa>
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	dc7c      	bgt.n	80078d4 <get_fat+0x132>
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d002      	beq.n	80077e4 <get_fat+0x42>
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d042      	beq.n	8007868 <get_fat+0xc6>
 80077e2:	e077      	b.n	80078d4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	60fb      	str	r3, [r7, #12]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	6a1a      	ldr	r2, [r3, #32]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	4413      	add	r3, r2
 80077fc:	4619      	mov	r1, r3
 80077fe:	6938      	ldr	r0, [r7, #16]
 8007800:	f7ff ff14 	bl	800762c <move_window>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d167      	bne.n	80078da <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	60fa      	str	r2, [r7, #12]
 8007810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4413      	add	r3, r2
 8007818:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800781c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	6a1a      	ldr	r2, [r3, #32]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	0a5b      	lsrs	r3, r3, #9
 8007826:	4413      	add	r3, r2
 8007828:	4619      	mov	r1, r3
 800782a:	6938      	ldr	r0, [r7, #16]
 800782c:	f7ff fefe 	bl	800762c <move_window>
 8007830:	4603      	mov	r3, r0
 8007832:	2b00      	cmp	r3, #0
 8007834:	d153      	bne.n	80078de <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	4413      	add	r3, r2
 8007840:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	461a      	mov	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	4313      	orrs	r3, r2
 800784c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <get_fat+0xbc>
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	091b      	lsrs	r3, r3, #4
 800785c:	e002      	b.n	8007864 <get_fat+0xc2>
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007864:	617b      	str	r3, [r7, #20]
			break;
 8007866:	e03f      	b.n	80078e8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	6a1a      	ldr	r2, [r3, #32]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	4413      	add	r3, r2
 8007872:	4619      	mov	r1, r3
 8007874:	6938      	ldr	r0, [r7, #16]
 8007876:	f7ff fed9 	bl	800762c <move_window>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d130      	bne.n	80078e2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800788e:	4413      	add	r3, r2
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fc1b 	bl	80070cc <ld_word>
 8007896:	4603      	mov	r3, r0
 8007898:	617b      	str	r3, [r7, #20]
			break;
 800789a:	e025      	b.n	80078e8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	6a1a      	ldr	r2, [r3, #32]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	09db      	lsrs	r3, r3, #7
 80078a4:	4413      	add	r3, r2
 80078a6:	4619      	mov	r1, r3
 80078a8:	6938      	ldr	r0, [r7, #16]
 80078aa:	f7ff febf 	bl	800762c <move_window>
 80078ae:	4603      	mov	r3, r0
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d118      	bne.n	80078e6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80078c2:	4413      	add	r3, r2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fc19 	bl	80070fc <ld_dword>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80078d0:	617b      	str	r3, [r7, #20]
			break;
 80078d2:	e009      	b.n	80078e8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80078d4:	2301      	movs	r3, #1
 80078d6:	617b      	str	r3, [r7, #20]
 80078d8:	e006      	b.n	80078e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078da:	bf00      	nop
 80078dc:	e004      	b.n	80078e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80078de:	bf00      	nop
 80078e0:	e002      	b.n	80078e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078e2:	bf00      	nop
 80078e4:	e000      	b.n	80078e8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078e6:	bf00      	nop
		}
	}

	return val;
 80078e8:	697b      	ldr	r3, [r7, #20]
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80078f2:	b590      	push	{r4, r7, lr}
 80078f4:	b089      	sub	sp, #36	; 0x24
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80078fe:	2302      	movs	r3, #2
 8007900:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b01      	cmp	r3, #1
 8007906:	f240 80d9 	bls.w	8007abc <put_fat+0x1ca>
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	695b      	ldr	r3, [r3, #20]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	f080 80d3 	bcs.w	8007abc <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	2b03      	cmp	r3, #3
 800791c:	f000 8096 	beq.w	8007a4c <put_fat+0x15a>
 8007920:	2b03      	cmp	r3, #3
 8007922:	f300 80cb 	bgt.w	8007abc <put_fat+0x1ca>
 8007926:	2b01      	cmp	r3, #1
 8007928:	d002      	beq.n	8007930 <put_fat+0x3e>
 800792a:	2b02      	cmp	r3, #2
 800792c:	d06e      	beq.n	8007a0c <put_fat+0x11a>
 800792e:	e0c5      	b.n	8007abc <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	61bb      	str	r3, [r7, #24]
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	69ba      	ldr	r2, [r7, #24]
 800793a:	4413      	add	r3, r2
 800793c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	0a5b      	lsrs	r3, r3, #9
 8007946:	4413      	add	r3, r2
 8007948:	4619      	mov	r1, r3
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f7ff fe6e 	bl	800762c <move_window>
 8007950:	4603      	mov	r3, r0
 8007952:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007954:	7ffb      	ldrb	r3, [r7, #31]
 8007956:	2b00      	cmp	r3, #0
 8007958:	f040 80a9 	bne.w	8007aae <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	1c59      	adds	r1, r3, #1
 8007966:	61b9      	str	r1, [r7, #24]
 8007968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800796c:	4413      	add	r3, r2
 800796e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00d      	beq.n	8007996 <put_fat+0xa4>
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	b25b      	sxtb	r3, r3
 8007980:	f003 030f 	and.w	r3, r3, #15
 8007984:	b25a      	sxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	011b      	lsls	r3, r3, #4
 800798c:	b25b      	sxtb	r3, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	b25b      	sxtb	r3, r3
 8007992:	b2db      	uxtb	r3, r3
 8007994:	e001      	b.n	800799a <put_fat+0xa8>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	b2db      	uxtb	r3, r3
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2201      	movs	r2, #1
 80079a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6a1a      	ldr	r2, [r3, #32]
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	0a5b      	lsrs	r3, r3, #9
 80079ac:	4413      	add	r3, r2
 80079ae:	4619      	mov	r1, r3
 80079b0:	68f8      	ldr	r0, [r7, #12]
 80079b2:	f7ff fe3b 	bl	800762c <move_window>
 80079b6:	4603      	mov	r3, r0
 80079b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079ba:	7ffb      	ldrb	r3, [r7, #31]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d178      	bne.n	8007ab2 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079cc:	4413      	add	r3, r2
 80079ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d003      	beq.n	80079e2 <put_fat+0xf0>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	091b      	lsrs	r3, r3, #4
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	e00e      	b.n	8007a00 <put_fat+0x10e>
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	f023 030f 	bic.w	r3, r3, #15
 80079ec:	b25a      	sxtb	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	0a1b      	lsrs	r3, r3, #8
 80079f2:	b25b      	sxtb	r3, r3
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	b25b      	sxtb	r3, r3
 80079fa:	4313      	orrs	r3, r2
 80079fc:	b25b      	sxtb	r3, r3
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2201      	movs	r2, #1
 8007a08:	70da      	strb	r2, [r3, #3]
			break;
 8007a0a:	e057      	b.n	8007abc <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1a      	ldr	r2, [r3, #32]
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	0a1b      	lsrs	r3, r3, #8
 8007a14:	4413      	add	r3, r2
 8007a16:	4619      	mov	r1, r3
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f7ff fe07 	bl	800762c <move_window>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a22:	7ffb      	ldrb	r3, [r7, #31]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d146      	bne.n	8007ab6 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a36:	4413      	add	r3, r2
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	b292      	uxth	r2, r2
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fb7f 	bl	8007142 <st_word>
			fs->wflag = 1;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	70da      	strb	r2, [r3, #3]
			break;
 8007a4a:	e037      	b.n	8007abc <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6a1a      	ldr	r2, [r3, #32]
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	09db      	lsrs	r3, r3, #7
 8007a54:	4413      	add	r3, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fde7 	bl	800762c <move_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d128      	bne.n	8007aba <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a7c:	4413      	add	r3, r2
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fb3c 	bl	80070fc <ld_dword>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a8a:	4323      	orrs	r3, r4
 8007a8c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a9c:	4413      	add	r3, r2
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fb69 	bl	8007178 <st_dword>
			fs->wflag = 1;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	70da      	strb	r2, [r3, #3]
			break;
 8007aac:	e006      	b.n	8007abc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007aae:	bf00      	nop
 8007ab0:	e004      	b.n	8007abc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ab2:	bf00      	nop
 8007ab4:	e002      	b.n	8007abc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007aba:	bf00      	nop
		}
	}
	return res;
 8007abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3724      	adds	r7, #36	; 0x24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd90      	pop	{r4, r7, pc}

08007ac6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b088      	sub	sp, #32
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	60f8      	str	r0, [r7, #12]
 8007ace:	60b9      	str	r1, [r7, #8]
 8007ad0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d904      	bls.n	8007aec <remove_chain+0x26>
 8007ae2:	69bb      	ldr	r3, [r7, #24]
 8007ae4:	695b      	ldr	r3, [r3, #20]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d301      	bcc.n	8007af0 <remove_chain+0x2a>
 8007aec:	2302      	movs	r3, #2
 8007aee:	e04b      	b.n	8007b88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007af6:	f04f 32ff 	mov.w	r2, #4294967295
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	69b8      	ldr	r0, [r7, #24]
 8007afe:	f7ff fef8 	bl	80078f2 <put_fat>
 8007b02:	4603      	mov	r3, r0
 8007b04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b06:	7ffb      	ldrb	r3, [r7, #31]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <remove_chain+0x4a>
 8007b0c:	7ffb      	ldrb	r3, [r7, #31]
 8007b0e:	e03b      	b.n	8007b88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f7ff fe45 	bl	80077a2 <get_fat>
 8007b18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d031      	beq.n	8007b84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <remove_chain+0x64>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e02e      	b.n	8007b88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b30:	d101      	bne.n	8007b36 <remove_chain+0x70>
 8007b32:	2301      	movs	r3, #1
 8007b34:	e028      	b.n	8007b88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b36:	2200      	movs	r2, #0
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	69b8      	ldr	r0, [r7, #24]
 8007b3c:	f7ff fed9 	bl	80078f2 <put_fat>
 8007b40:	4603      	mov	r3, r0
 8007b42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b44:	7ffb      	ldrb	r3, [r7, #31]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d001      	beq.n	8007b4e <remove_chain+0x88>
 8007b4a:	7ffb      	ldrb	r3, [r7, #31]
 8007b4c:	e01c      	b.n	8007b88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	3b02      	subs	r3, #2
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d20b      	bcs.n	8007b74 <remove_chain+0xae>
			fs->free_clst++;
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	1c5a      	adds	r2, r3, #1
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	f043 0301 	orr.w	r3, r3, #1
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d3c6      	bcc.n	8007b10 <remove_chain+0x4a>
 8007b82:	e000      	b.n	8007b86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10d      	bne.n	8007bc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	68db      	ldr	r3, [r3, #12]
 8007baa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d004      	beq.n	8007bbc <create_chain+0x2c>
 8007bb2:	693b      	ldr	r3, [r7, #16]
 8007bb4:	695b      	ldr	r3, [r3, #20]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d31b      	bcc.n	8007bf4 <create_chain+0x64>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	61bb      	str	r3, [r7, #24]
 8007bc0:	e018      	b.n	8007bf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff fdec 	bl	80077a2 <get_fat>
 8007bca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d801      	bhi.n	8007bd6 <create_chain+0x46>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e070      	b.n	8007cb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bdc:	d101      	bne.n	8007be2 <create_chain+0x52>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	e06a      	b.n	8007cb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	68fa      	ldr	r2, [r7, #12]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d201      	bcs.n	8007bf0 <create_chain+0x60>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	e063      	b.n	8007cb8 <create_chain+0x128>
		scl = clst;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d307      	bcc.n	8007c18 <create_chain+0x88>
				ncl = 2;
 8007c08:	2302      	movs	r3, #2
 8007c0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	69bb      	ldr	r3, [r7, #24]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d901      	bls.n	8007c18 <create_chain+0x88>
 8007c14:	2300      	movs	r3, #0
 8007c16:	e04f      	b.n	8007cb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c18:	69f9      	ldr	r1, [r7, #28]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7ff fdc1 	bl	80077a2 <get_fat>
 8007c20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00e      	beq.n	8007c46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d003      	beq.n	8007c36 <create_chain+0xa6>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c34:	d101      	bne.n	8007c3a <create_chain+0xaa>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	e03e      	b.n	8007cb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d1da      	bne.n	8007bf8 <create_chain+0x68>
 8007c42:	2300      	movs	r3, #0
 8007c44:	e038      	b.n	8007cb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c48:	f04f 32ff 	mov.w	r2, #4294967295
 8007c4c:	69f9      	ldr	r1, [r7, #28]
 8007c4e:	6938      	ldr	r0, [r7, #16]
 8007c50:	f7ff fe4f 	bl	80078f2 <put_fat>
 8007c54:	4603      	mov	r3, r0
 8007c56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d109      	bne.n	8007c72 <create_chain+0xe2>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007c64:	69fa      	ldr	r2, [r7, #28]
 8007c66:	6839      	ldr	r1, [r7, #0]
 8007c68:	6938      	ldr	r0, [r7, #16]
 8007c6a:	f7ff fe42 	bl	80078f2 <put_fat>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d116      	bne.n	8007ca6 <create_chain+0x116>
		fs->last_clst = ncl;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	3b02      	subs	r3, #2
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d804      	bhi.n	8007c96 <create_chain+0x106>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	1e5a      	subs	r2, r3, #1
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	711a      	strb	r2, [r3, #4]
 8007ca4:	e007      	b.n	8007cb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d102      	bne.n	8007cb2 <create_chain+0x122>
 8007cac:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb0:	e000      	b.n	8007cb4 <create_chain+0x124>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cb6:	69fb      	ldr	r3, [r7, #28]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3720      	adds	r7, #32
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	0a5b      	lsrs	r3, r3, #9
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	8952      	ldrh	r2, [r2, #10]
 8007ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1d1a      	adds	r2, r3, #4
 8007cea:	613a      	str	r2, [r7, #16]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <clmt_clust+0x3a>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e010      	b.n	8007d1c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d307      	bcc.n	8007d12 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	617b      	str	r3, [r7, #20]
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d10:	e7e9      	b.n	8007ce6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007d12:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	4413      	add	r3, r2
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	371c      	adds	r7, #28
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b086      	sub	sp, #24
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d3e:	d204      	bcs.n	8007d4a <dir_sdi+0x22>
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d001      	beq.n	8007d4e <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d4a:	2302      	movs	r3, #2
 8007d4c:	e063      	b.n	8007e16 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <dir_sdi+0x46>
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d902      	bls.n	8007d6e <dir_sdi+0x46>
		clst = fs->dirbase;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10c      	bne.n	8007d8e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	095b      	lsrs	r3, r3, #5
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	8912      	ldrh	r2, [r2, #8]
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d301      	bcc.n	8007d84 <dir_sdi+0x5c>
 8007d80:	2302      	movs	r3, #2
 8007d82:	e048      	b.n	8007e16 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	61da      	str	r2, [r3, #28]
 8007d8c:	e029      	b.n	8007de2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	895b      	ldrh	r3, [r3, #10]
 8007d92:	025b      	lsls	r3, r3, #9
 8007d94:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d96:	e019      	b.n	8007dcc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6979      	ldr	r1, [r7, #20]
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff fd00 	bl	80077a2 <get_fat>
 8007da2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007daa:	d101      	bne.n	8007db0 <dir_sdi+0x88>
 8007dac:	2301      	movs	r3, #1
 8007dae:	e032      	b.n	8007e16 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d904      	bls.n	8007dc0 <dir_sdi+0x98>
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d301      	bcc.n	8007dc4 <dir_sdi+0x9c>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e028      	b.n	8007e16 <dir_sdi+0xee>
			ofs -= csz;
 8007dc4:	683a      	ldr	r2, [r7, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d2e1      	bcs.n	8007d98 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007dd4:	6979      	ldr	r1, [r7, #20]
 8007dd6:	6938      	ldr	r0, [r7, #16]
 8007dd8:	f7ff fcc4 	bl	8007764 <clust2sect>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d101      	bne.n	8007df4 <dir_sdi+0xcc>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e010      	b.n	8007e16 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	69da      	ldr	r2, [r3, #28]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	0a5b      	lsrs	r3, r3, #9
 8007dfc:	441a      	add	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e0e:	441a      	add	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b086      	sub	sp, #24
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	3320      	adds	r3, #32
 8007e34:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <dir_next+0x28>
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e44:	d301      	bcc.n	8007e4a <dir_next+0x2c>
 8007e46:	2304      	movs	r3, #4
 8007e48:	e0aa      	b.n	8007fa0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f040 8098 	bne.w	8007f86 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	69db      	ldr	r3, [r3, #28]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10b      	bne.n	8007e80 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	095b      	lsrs	r3, r3, #5
 8007e6c:	68fa      	ldr	r2, [r7, #12]
 8007e6e:	8912      	ldrh	r2, [r2, #8]
 8007e70:	4293      	cmp	r3, r2
 8007e72:	f0c0 8088 	bcc.w	8007f86 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	61da      	str	r2, [r3, #28]
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	e08f      	b.n	8007fa0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	0a5b      	lsrs	r3, r3, #9
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	8952      	ldrh	r2, [r2, #10]
 8007e88:	3a01      	subs	r2, #1
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d17a      	bne.n	8007f86 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	4619      	mov	r1, r3
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7ff fc82 	bl	80077a2 <get_fat>
 8007e9e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d801      	bhi.n	8007eaa <dir_next+0x8c>
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	e07a      	b.n	8007fa0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb0:	d101      	bne.n	8007eb6 <dir_next+0x98>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e074      	b.n	8007fa0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d358      	bcc.n	8007f72 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d104      	bne.n	8007ed0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	61da      	str	r2, [r3, #28]
 8007ecc:	2304      	movs	r3, #4
 8007ece:	e067      	b.n	8007fa0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	4610      	mov	r0, r2
 8007eda:	f7ff fe59 	bl	8007b90 <create_chain>
 8007ede:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d101      	bne.n	8007eea <dir_next+0xcc>
 8007ee6:	2307      	movs	r3, #7
 8007ee8:	e05a      	b.n	8007fa0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <dir_next+0xd6>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	e055      	b.n	8007fa0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d101      	bne.n	8007f00 <dir_next+0xe2>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e04f      	b.n	8007fa0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff fb4f 	bl	80075a4 <sync_window>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <dir_next+0xf2>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e047      	b.n	8007fa0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3330      	adds	r3, #48	; 0x30
 8007f14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f18:	2100      	movs	r1, #0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7ff f979 	bl	8007212 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f20:	2300      	movs	r3, #0
 8007f22:	613b      	str	r3, [r7, #16]
 8007f24:	6979      	ldr	r1, [r7, #20]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fc1c 	bl	8007764 <clust2sect>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f32:	e012      	b.n	8007f5a <dir_next+0x13c>
						fs->wflag = 1;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7ff fb32 	bl	80075a4 <sync_window>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <dir_next+0x12c>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e02a      	b.n	8007fa0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	613b      	str	r3, [r7, #16]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	895b      	ldrh	r3, [r3, #10]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d3e6      	bcc.n	8007f34 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad2      	subs	r2, r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f78:	6979      	ldr	r1, [r7, #20]
 8007f7a:	68f8      	ldr	r0, [r7, #12]
 8007f7c:	f7ff fbf2 	bl	8007764 <clust2sect>
 8007f80:	4602      	mov	r2, r0
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68ba      	ldr	r2, [r7, #8]
 8007f8a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f98:	441a      	add	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f9e:	2300      	movs	r3, #0
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007fb8:	2100      	movs	r1, #0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff feb4 	bl	8007d28 <dir_sdi>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007fc4:	7dfb      	ldrb	r3, [r7, #23]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d12b      	bne.n	8008022 <dir_alloc+0x7a>
		n = 0;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	69db      	ldr	r3, [r3, #28]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f7ff fb29 	bl	800762c <move_window>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d11d      	bne.n	8008020 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a1b      	ldr	r3, [r3, #32]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2be5      	cmp	r3, #229	; 0xe5
 8007fec:	d004      	beq.n	8007ff8 <dir_alloc+0x50>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d107      	bne.n	8008008 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	613b      	str	r3, [r7, #16]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	429a      	cmp	r2, r3
 8008004:	d102      	bne.n	800800c <dir_alloc+0x64>
 8008006:	e00c      	b.n	8008022 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800800c:	2101      	movs	r1, #1
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f7ff ff05 	bl	8007e1e <dir_next>
 8008014:	4603      	mov	r3, r0
 8008016:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0d7      	beq.n	8007fce <dir_alloc+0x26>
 800801e:	e000      	b.n	8008022 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008020:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	2b04      	cmp	r3, #4
 8008026:	d101      	bne.n	800802c <dir_alloc+0x84>
 8008028:	2307      	movs	r3, #7
 800802a:	75fb      	strb	r3, [r7, #23]
	return res;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	331a      	adds	r3, #26
 8008044:	4618      	mov	r0, r3
 8008046:	f7ff f841 	bl	80070cc <ld_word>
 800804a:	4603      	mov	r3, r0
 800804c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	2b03      	cmp	r3, #3
 8008054:	d109      	bne.n	800806a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	3314      	adds	r3, #20
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff f836 	bl	80070cc <ld_word>
 8008060:	4603      	mov	r3, r0
 8008062:	041b      	lsls	r3, r3, #16
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800806a:	68fb      	ldr	r3, [r7, #12]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	331a      	adds	r3, #26
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	b292      	uxth	r2, r2
 8008088:	4611      	mov	r1, r2
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff f859 	bl	8007142 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	2b03      	cmp	r3, #3
 8008096:	d109      	bne.n	80080ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f103 0214 	add.w	r2, r3, #20
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	0c1b      	lsrs	r3, r3, #16
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	4619      	mov	r1, r3
 80080a6:	4610      	mov	r0, r2
 80080a8:	f7ff f84b 	bl	8007142 <st_word>
	}
}
 80080ac:	bf00      	nop
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80080c2:	2100      	movs	r1, #0
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fe2f 	bl	8007d28 <dir_sdi>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <dir_find+0x24>
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	e03e      	b.n	8008156 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	4619      	mov	r1, r3
 80080de:	6938      	ldr	r0, [r7, #16]
 80080e0:	f7ff faa4 	bl	800762c <move_window>
 80080e4:	4603      	mov	r3, r0
 80080e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d12f      	bne.n	800814e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <dir_find+0x4e>
 80080fc:	2304      	movs	r3, #4
 80080fe:	75fb      	strb	r3, [r7, #23]
 8008100:	e028      	b.n	8008154 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	330b      	adds	r3, #11
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800810e:	b2da      	uxtb	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	330b      	adds	r3, #11
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10a      	bne.n	800813a <dir_find+0x86>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a18      	ldr	r0, [r3, #32]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3324      	adds	r3, #36	; 0x24
 800812c:	220b      	movs	r2, #11
 800812e:	4619      	mov	r1, r3
 8008130:	f7ff f88a 	bl	8007248 <mem_cmp>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00b      	beq.n	8008152 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800813a:	2100      	movs	r1, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff fe6e 	bl	8007e1e <dir_next>
 8008142:	4603      	mov	r3, r0
 8008144:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d0c5      	beq.n	80080d8 <dir_find+0x24>
 800814c:	e002      	b.n	8008154 <dir_find+0xa0>
		if (res != FR_OK) break;
 800814e:	bf00      	nop
 8008150:	e000      	b.n	8008154 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008152:	bf00      	nop

	return res;
 8008154:	7dfb      	ldrb	r3, [r7, #23]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800816c:	2101      	movs	r1, #1
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff ff1a 	bl	8007fa8 <dir_alloc>
 8008174:	4603      	mov	r3, r0
 8008176:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d11c      	bne.n	80081b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	4619      	mov	r1, r3
 8008184:	68b8      	ldr	r0, [r7, #8]
 8008186:	f7ff fa51 	bl	800762c <move_window>
 800818a:	4603      	mov	r3, r0
 800818c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800818e:	7bfb      	ldrb	r3, [r7, #15]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d111      	bne.n	80081b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	2220      	movs	r2, #32
 800819a:	2100      	movs	r1, #0
 800819c:	4618      	mov	r0, r3
 800819e:	f7ff f838 	bl	8007212 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a18      	ldr	r0, [r3, #32]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3324      	adds	r3, #36	; 0x24
 80081aa:	220b      	movs	r2, #11
 80081ac:	4619      	mov	r1, r3
 80081ae:	f7ff f80f 	bl	80071d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	2201      	movs	r2, #1
 80081b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3710      	adds	r7, #16
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
	...

080081c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3324      	adds	r3, #36	; 0x24
 80081d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80081da:	220b      	movs	r2, #11
 80081dc:	2120      	movs	r1, #32
 80081de:	68b8      	ldr	r0, [r7, #8]
 80081e0:	f7ff f817 	bl	8007212 <mem_set>
	si = i = 0; ni = 8;
 80081e4:	2300      	movs	r3, #0
 80081e6:	613b      	str	r3, [r7, #16]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	61fb      	str	r3, [r7, #28]
 80081ec:	2308      	movs	r3, #8
 80081ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	61fa      	str	r2, [r7, #28]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4413      	add	r3, r2
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80081fe:	7efb      	ldrb	r3, [r7, #27]
 8008200:	2b20      	cmp	r3, #32
 8008202:	d94e      	bls.n	80082a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008204:	7efb      	ldrb	r3, [r7, #27]
 8008206:	2b2f      	cmp	r3, #47	; 0x2f
 8008208:	d006      	beq.n	8008218 <create_name+0x54>
 800820a:	7efb      	ldrb	r3, [r7, #27]
 800820c:	2b5c      	cmp	r3, #92	; 0x5c
 800820e:	d110      	bne.n	8008232 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008210:	e002      	b.n	8008218 <create_name+0x54>
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	3301      	adds	r3, #1
 8008216:	61fb      	str	r3, [r7, #28]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	69fb      	ldr	r3, [r7, #28]
 800821c:	4413      	add	r3, r2
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	2b2f      	cmp	r3, #47	; 0x2f
 8008222:	d0f6      	beq.n	8008212 <create_name+0x4e>
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	4413      	add	r3, r2
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	2b5c      	cmp	r3, #92	; 0x5c
 800822e:	d0f0      	beq.n	8008212 <create_name+0x4e>
			break;
 8008230:	e038      	b.n	80082a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008232:	7efb      	ldrb	r3, [r7, #27]
 8008234:	2b2e      	cmp	r3, #46	; 0x2e
 8008236:	d003      	beq.n	8008240 <create_name+0x7c>
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	429a      	cmp	r2, r3
 800823e:	d30c      	bcc.n	800825a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	2b0b      	cmp	r3, #11
 8008244:	d002      	beq.n	800824c <create_name+0x88>
 8008246:	7efb      	ldrb	r3, [r7, #27]
 8008248:	2b2e      	cmp	r3, #46	; 0x2e
 800824a:	d001      	beq.n	8008250 <create_name+0x8c>
 800824c:	2306      	movs	r3, #6
 800824e:	e044      	b.n	80082da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008250:	2308      	movs	r3, #8
 8008252:	613b      	str	r3, [r7, #16]
 8008254:	230b      	movs	r3, #11
 8008256:	617b      	str	r3, [r7, #20]
			continue;
 8008258:	e022      	b.n	80082a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800825a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800825e:	2b00      	cmp	r3, #0
 8008260:	da04      	bge.n	800826c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008262:	7efb      	ldrb	r3, [r7, #27]
 8008264:	3b80      	subs	r3, #128	; 0x80
 8008266:	4a1f      	ldr	r2, [pc, #124]	; (80082e4 <create_name+0x120>)
 8008268:	5cd3      	ldrb	r3, [r2, r3]
 800826a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800826c:	7efb      	ldrb	r3, [r7, #27]
 800826e:	4619      	mov	r1, r3
 8008270:	481d      	ldr	r0, [pc, #116]	; (80082e8 <create_name+0x124>)
 8008272:	f7ff f810 	bl	8007296 <chk_chr>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <create_name+0xbc>
 800827c:	2306      	movs	r3, #6
 800827e:	e02c      	b.n	80082da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008280:	7efb      	ldrb	r3, [r7, #27]
 8008282:	2b60      	cmp	r3, #96	; 0x60
 8008284:	d905      	bls.n	8008292 <create_name+0xce>
 8008286:	7efb      	ldrb	r3, [r7, #27]
 8008288:	2b7a      	cmp	r3, #122	; 0x7a
 800828a:	d802      	bhi.n	8008292 <create_name+0xce>
 800828c:	7efb      	ldrb	r3, [r7, #27]
 800828e:	3b20      	subs	r3, #32
 8008290:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	613a      	str	r2, [r7, #16]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	7efa      	ldrb	r2, [r7, #27]
 800829e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80082a0:	e7a6      	b.n	80081f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80082a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	441a      	add	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <create_name+0xf4>
 80082b4:	2306      	movs	r3, #6
 80082b6:	e010      	b.n	80082da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	2be5      	cmp	r3, #229	; 0xe5
 80082be:	d102      	bne.n	80082c6 <create_name+0x102>
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	2205      	movs	r2, #5
 80082c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80082c6:	7efb      	ldrb	r3, [r7, #27]
 80082c8:	2b20      	cmp	r3, #32
 80082ca:	d801      	bhi.n	80082d0 <create_name+0x10c>
 80082cc:	2204      	movs	r2, #4
 80082ce:	e000      	b.n	80082d2 <create_name+0x10e>
 80082d0:	2200      	movs	r2, #0
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	330b      	adds	r3, #11
 80082d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80082d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3720      	adds	r7, #32
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
 80082e2:	bf00      	nop
 80082e4:	080093ec 	.word	0x080093ec
 80082e8:	08009384 	.word	0x08009384

080082ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008300:	e002      	b.n	8008308 <follow_path+0x1c>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	2b2f      	cmp	r3, #47	; 0x2f
 800830e:	d0f8      	beq.n	8008302 <follow_path+0x16>
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b5c      	cmp	r3, #92	; 0x5c
 8008316:	d0f4      	beq.n	8008302 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	2200      	movs	r2, #0
 800831c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b1f      	cmp	r3, #31
 8008324:	d80a      	bhi.n	800833c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2280      	movs	r2, #128	; 0x80
 800832a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800832e:	2100      	movs	r1, #0
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7ff fcf9 	bl	8007d28 <dir_sdi>
 8008336:	4603      	mov	r3, r0
 8008338:	75fb      	strb	r3, [r7, #23]
 800833a:	e043      	b.n	80083c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800833c:	463b      	mov	r3, r7
 800833e:	4619      	mov	r1, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f7ff ff3f 	bl	80081c4 <create_name>
 8008346:	4603      	mov	r3, r0
 8008348:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800834a:	7dfb      	ldrb	r3, [r7, #23]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d134      	bne.n	80083ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f7ff feaf 	bl	80080b4 <dir_find>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008360:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	2b04      	cmp	r3, #4
 800836c:	d127      	bne.n	80083be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800836e:	7afb      	ldrb	r3, [r7, #11]
 8008370:	f003 0304 	and.w	r3, r3, #4
 8008374:	2b00      	cmp	r3, #0
 8008376:	d122      	bne.n	80083be <follow_path+0xd2>
 8008378:	2305      	movs	r3, #5
 800837a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800837c:	e01f      	b.n	80083be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b00      	cmp	r3, #0
 8008386:	d11c      	bne.n	80083c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	799b      	ldrb	r3, [r3, #6]
 800838c:	f003 0310 	and.w	r3, r3, #16
 8008390:	2b00      	cmp	r3, #0
 8008392:	d102      	bne.n	800839a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008394:	2305      	movs	r3, #5
 8008396:	75fb      	strb	r3, [r7, #23]
 8008398:	e014      	b.n	80083c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a8:	4413      	add	r3, r2
 80083aa:	4619      	mov	r1, r3
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f7ff fe42 	bl	8008036 <ld_clust>
 80083b2:	4602      	mov	r2, r0
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80083b8:	e7c0      	b.n	800833c <follow_path+0x50>
			if (res != FR_OK) break;
 80083ba:	bf00      	nop
 80083bc:	e002      	b.n	80083c4 <follow_path+0xd8>
				break;
 80083be:	bf00      	nop
 80083c0:	e000      	b.n	80083c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083c2:	bf00      	nop
			}
		}
	}

	return res;
 80083c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}

080083ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80083ce:	b480      	push	{r7}
 80083d0:	b087      	sub	sp, #28
 80083d2:	af00      	add	r7, sp, #0
 80083d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80083d6:	f04f 33ff 	mov.w	r3, #4294967295
 80083da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d031      	beq.n	8008448 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	617b      	str	r3, [r7, #20]
 80083ea:	e002      	b.n	80083f2 <get_ldnumber+0x24>
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	3301      	adds	r3, #1
 80083f0:	617b      	str	r3, [r7, #20]
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	2b20      	cmp	r3, #32
 80083f8:	d903      	bls.n	8008402 <get_ldnumber+0x34>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	2b3a      	cmp	r3, #58	; 0x3a
 8008400:	d1f4      	bne.n	80083ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	2b3a      	cmp	r3, #58	; 0x3a
 8008408:	d11c      	bne.n	8008444 <get_ldnumber+0x76>
			tp = *path;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	60fa      	str	r2, [r7, #12]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	3b30      	subs	r3, #48	; 0x30
 800841a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	2b09      	cmp	r3, #9
 8008420:	d80e      	bhi.n	8008440 <get_ldnumber+0x72>
 8008422:	68fa      	ldr	r2, [r7, #12]
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	429a      	cmp	r2, r3
 8008428:	d10a      	bne.n	8008440 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d107      	bne.n	8008440 <get_ldnumber+0x72>
					vol = (int)i;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3301      	adds	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	697a      	ldr	r2, [r7, #20]
 800843e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	e002      	b.n	800844a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008444:	2300      	movs	r3, #0
 8008446:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008448:	693b      	ldr	r3, [r7, #16]
}
 800844a:	4618      	mov	r0, r3
 800844c:	371c      	adds	r7, #28
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
	...

08008458 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	70da      	strb	r2, [r3, #3]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f04f 32ff 	mov.w	r2, #4294967295
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008470:	6839      	ldr	r1, [r7, #0]
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7ff f8da 	bl	800762c <move_window>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d001      	beq.n	8008482 <check_fs+0x2a>
 800847e:	2304      	movs	r3, #4
 8008480:	e038      	b.n	80084f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	3330      	adds	r3, #48	; 0x30
 8008486:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fe1e 	bl	80070cc <ld_word>
 8008490:	4603      	mov	r3, r0
 8008492:	461a      	mov	r2, r3
 8008494:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008498:	429a      	cmp	r2, r3
 800849a:	d001      	beq.n	80084a0 <check_fs+0x48>
 800849c:	2303      	movs	r3, #3
 800849e:	e029      	b.n	80084f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084a6:	2be9      	cmp	r3, #233	; 0xe9
 80084a8:	d009      	beq.n	80084be <check_fs+0x66>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084b0:	2beb      	cmp	r3, #235	; 0xeb
 80084b2:	d11e      	bne.n	80084f2 <check_fs+0x9a>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80084ba:	2b90      	cmp	r3, #144	; 0x90
 80084bc:	d119      	bne.n	80084f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3330      	adds	r3, #48	; 0x30
 80084c2:	3336      	adds	r3, #54	; 0x36
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fe19 	bl	80070fc <ld_dword>
 80084ca:	4603      	mov	r3, r0
 80084cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084d0:	4a0a      	ldr	r2, [pc, #40]	; (80084fc <check_fs+0xa4>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d101      	bne.n	80084da <check_fs+0x82>
 80084d6:	2300      	movs	r3, #0
 80084d8:	e00c      	b.n	80084f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3330      	adds	r3, #48	; 0x30
 80084de:	3352      	adds	r3, #82	; 0x52
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fe fe0b 	bl	80070fc <ld_dword>
 80084e6:	4603      	mov	r3, r0
 80084e8:	4a05      	ldr	r2, [pc, #20]	; (8008500 <check_fs+0xa8>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d101      	bne.n	80084f2 <check_fs+0x9a>
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80084f2:	2302      	movs	r3, #2
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	00544146 	.word	0x00544146
 8008500:	33544146 	.word	0x33544146

08008504 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b096      	sub	sp, #88	; 0x58
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f7ff ff58 	bl	80083ce <get_ldnumber>
 800851e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008522:	2b00      	cmp	r3, #0
 8008524:	da01      	bge.n	800852a <find_volume+0x26>
 8008526:	230b      	movs	r3, #11
 8008528:	e22d      	b.n	8008986 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800852a:	4aa1      	ldr	r2, [pc, #644]	; (80087b0 <find_volume+0x2ac>)
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008532:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <find_volume+0x3a>
 800853a:	230c      	movs	r3, #12
 800853c:	e223      	b.n	8008986 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008542:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800854c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d01a      	beq.n	800858a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	4618      	mov	r0, r3
 800855a:	f7fe fd19 	bl	8006f90 <disk_status>
 800855e:	4603      	mov	r3, r0
 8008560:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008564:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10c      	bne.n	800858a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d007      	beq.n	8008586 <find_volume+0x82>
 8008576:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8008582:	230a      	movs	r3, #10
 8008584:	e1ff      	b.n	8008986 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008586:	2300      	movs	r3, #0
 8008588:	e1fd      	b.n	8008986 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	2200      	movs	r2, #0
 800858e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008592:	b2da      	uxtb	r2, r3
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	4618      	mov	r0, r3
 800859e:	f7fe fd11 	bl	8006fc4 <disk_initialize>
 80085a2:	4603      	mov	r3, r0
 80085a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80085a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80085b4:	2303      	movs	r3, #3
 80085b6:	e1e6      	b.n	8008986 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <find_volume+0xca>
 80085be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80085ca:	230a      	movs	r3, #10
 80085cc:	e1db      	b.n	8008986 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80085ce:	2300      	movs	r3, #0
 80085d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80085d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085d6:	f7ff ff3f 	bl	8008458 <check_fs>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80085e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d149      	bne.n	800867c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80085e8:	2300      	movs	r3, #0
 80085ea:	643b      	str	r3, [r7, #64]	; 0x40
 80085ec:	e01e      	b.n	800862c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80085ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80085f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80085fc:	4413      	add	r3, r2
 80085fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008602:	3304      	adds	r3, #4
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d006      	beq.n	8008618 <find_volume+0x114>
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	3308      	adds	r3, #8
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fd74 	bl	80070fc <ld_dword>
 8008614:	4602      	mov	r2, r0
 8008616:	e000      	b.n	800861a <find_volume+0x116>
 8008618:	2200      	movs	r2, #0
 800861a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	3358      	adds	r3, #88	; 0x58
 8008620:	443b      	add	r3, r7
 8008622:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008628:	3301      	adds	r3, #1
 800862a:	643b      	str	r3, [r7, #64]	; 0x40
 800862c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862e:	2b03      	cmp	r3, #3
 8008630:	d9dd      	bls.n	80085ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008632:	2300      	movs	r3, #0
 8008634:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008636:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d002      	beq.n	8008642 <find_volume+0x13e>
 800863c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863e:	3b01      	subs	r3, #1
 8008640:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	3358      	adds	r3, #88	; 0x58
 8008648:	443b      	add	r3, r7
 800864a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800864e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <find_volume+0x15e>
 8008656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800865a:	f7ff fefd 	bl	8008458 <check_fs>
 800865e:	4603      	mov	r3, r0
 8008660:	e000      	b.n	8008664 <find_volume+0x160>
 8008662:	2303      	movs	r3, #3
 8008664:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008668:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800866c:	2b01      	cmp	r3, #1
 800866e:	d905      	bls.n	800867c <find_volume+0x178>
 8008670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008672:	3301      	adds	r3, #1
 8008674:	643b      	str	r3, [r7, #64]	; 0x40
 8008676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008678:	2b03      	cmp	r3, #3
 800867a:	d9e2      	bls.n	8008642 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800867c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008680:	2b04      	cmp	r3, #4
 8008682:	d101      	bne.n	8008688 <find_volume+0x184>
 8008684:	2301      	movs	r3, #1
 8008686:	e17e      	b.n	8008986 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008688:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800868c:	2b01      	cmp	r3, #1
 800868e:	d901      	bls.n	8008694 <find_volume+0x190>
 8008690:	230d      	movs	r3, #13
 8008692:	e178      	b.n	8008986 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008696:	3330      	adds	r3, #48	; 0x30
 8008698:	330b      	adds	r3, #11
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fd16 	bl	80070cc <ld_word>
 80086a0:	4603      	mov	r3, r0
 80086a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a6:	d001      	beq.n	80086ac <find_volume+0x1a8>
 80086a8:	230d      	movs	r3, #13
 80086aa:	e16c      	b.n	8008986 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	3330      	adds	r3, #48	; 0x30
 80086b0:	3316      	adds	r3, #22
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fd0a 	bl	80070cc <ld_word>
 80086b8:	4603      	mov	r3, r0
 80086ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80086bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <find_volume+0x1cc>
 80086c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c4:	3330      	adds	r3, #48	; 0x30
 80086c6:	3324      	adds	r3, #36	; 0x24
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fd17 	bl	80070fc <ld_dword>
 80086ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086d4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80086d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	789b      	ldrb	r3, [r3, #2]
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d005      	beq.n	80086f4 <find_volume+0x1f0>
 80086e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ea:	789b      	ldrb	r3, [r3, #2]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d001      	beq.n	80086f4 <find_volume+0x1f0>
 80086f0:	230d      	movs	r3, #13
 80086f2:	e148      	b.n	8008986 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	789b      	ldrb	r3, [r3, #2]
 80086f8:	461a      	mov	r2, r3
 80086fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fc:	fb02 f303 	mul.w	r3, r2, r3
 8008700:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008708:	b29a      	uxth	r2, r3
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800870e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008710:	895b      	ldrh	r3, [r3, #10]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d008      	beq.n	8008728 <find_volume+0x224>
 8008716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008718:	895b      	ldrh	r3, [r3, #10]
 800871a:	461a      	mov	r2, r3
 800871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871e:	895b      	ldrh	r3, [r3, #10]
 8008720:	3b01      	subs	r3, #1
 8008722:	4013      	ands	r3, r2
 8008724:	2b00      	cmp	r3, #0
 8008726:	d001      	beq.n	800872c <find_volume+0x228>
 8008728:	230d      	movs	r3, #13
 800872a:	e12c      	b.n	8008986 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800872c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872e:	3330      	adds	r3, #48	; 0x30
 8008730:	3311      	adds	r3, #17
 8008732:	4618      	mov	r0, r3
 8008734:	f7fe fcca 	bl	80070cc <ld_word>
 8008738:	4603      	mov	r3, r0
 800873a:	461a      	mov	r2, r3
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	891b      	ldrh	r3, [r3, #8]
 8008744:	f003 030f 	and.w	r3, r3, #15
 8008748:	b29b      	uxth	r3, r3
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <find_volume+0x24e>
 800874e:	230d      	movs	r3, #13
 8008750:	e119      	b.n	8008986 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	3330      	adds	r3, #48	; 0x30
 8008756:	3313      	adds	r3, #19
 8008758:	4618      	mov	r0, r3
 800875a:	f7fe fcb7 	bl	80070cc <ld_word>
 800875e:	4603      	mov	r3, r0
 8008760:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008764:	2b00      	cmp	r3, #0
 8008766:	d106      	bne.n	8008776 <find_volume+0x272>
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	3330      	adds	r3, #48	; 0x30
 800876c:	3320      	adds	r3, #32
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fcc4 	bl	80070fc <ld_dword>
 8008774:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008778:	3330      	adds	r3, #48	; 0x30
 800877a:	330e      	adds	r3, #14
 800877c:	4618      	mov	r0, r3
 800877e:	f7fe fca5 	bl	80070cc <ld_word>
 8008782:	4603      	mov	r3, r0
 8008784:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008788:	2b00      	cmp	r3, #0
 800878a:	d101      	bne.n	8008790 <find_volume+0x28c>
 800878c:	230d      	movs	r3, #13
 800878e:	e0fa      	b.n	8008986 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008790:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	4413      	add	r3, r2
 8008796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008798:	8912      	ldrh	r2, [r2, #8]
 800879a:	0912      	lsrs	r2, r2, #4
 800879c:	b292      	uxth	r2, r2
 800879e:	4413      	add	r3, r2
 80087a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d204      	bcs.n	80087b4 <find_volume+0x2b0>
 80087aa:	230d      	movs	r3, #13
 80087ac:	e0eb      	b.n	8008986 <find_volume+0x482>
 80087ae:	bf00      	nop
 80087b0:	2400052c 	.word	0x2400052c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80087b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	1ad3      	subs	r3, r2, r3
 80087ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087bc:	8952      	ldrh	r2, [r2, #10]
 80087be:	fbb3 f3f2 	udiv	r3, r3, r2
 80087c2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <find_volume+0x2ca>
 80087ca:	230d      	movs	r3, #13
 80087cc:	e0db      	b.n	8008986 <find_volume+0x482>
		fmt = FS_FAT32;
 80087ce:	2303      	movs	r3, #3
 80087d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80087d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80087da:	4293      	cmp	r3, r2
 80087dc:	d802      	bhi.n	80087e4 <find_volume+0x2e0>
 80087de:	2302      	movs	r3, #2
 80087e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d802      	bhi.n	80087f4 <find_volume+0x2f0>
 80087ee:	2301      	movs	r3, #1
 80087f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80087f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f6:	1c9a      	adds	r2, r3, #2
 80087f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80087fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008800:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008802:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008806:	441a      	add	r2, r3
 8008808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800880c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800880e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008810:	441a      	add	r2, r3
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008816:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800881a:	2b03      	cmp	r3, #3
 800881c:	d11e      	bne.n	800885c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	3330      	adds	r3, #48	; 0x30
 8008822:	332a      	adds	r3, #42	; 0x2a
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fc51 	bl	80070cc <ld_word>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <find_volume+0x330>
 8008830:	230d      	movs	r3, #13
 8008832:	e0a8      	b.n	8008986 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008836:	891b      	ldrh	r3, [r3, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <find_volume+0x33c>
 800883c:	230d      	movs	r3, #13
 800883e:	e0a2      	b.n	8008986 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	3330      	adds	r3, #48	; 0x30
 8008844:	332c      	adds	r3, #44	; 0x2c
 8008846:	4618      	mov	r0, r3
 8008848:	f7fe fc58 	bl	80070fc <ld_dword>
 800884c:	4602      	mov	r2, r0
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	647b      	str	r3, [r7, #68]	; 0x44
 800885a:	e01f      	b.n	800889c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	891b      	ldrh	r3, [r3, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <find_volume+0x364>
 8008864:	230d      	movs	r3, #13
 8008866:	e08e      	b.n	8008986 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800886a:	6a1a      	ldr	r2, [r3, #32]
 800886c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886e:	441a      	add	r2, r3
 8008870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008872:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008874:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008878:	2b02      	cmp	r3, #2
 800887a:	d103      	bne.n	8008884 <find_volume+0x380>
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	695b      	ldr	r3, [r3, #20]
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	e00a      	b.n	800889a <find_volume+0x396>
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	695a      	ldr	r2, [r3, #20]
 8008888:	4613      	mov	r3, r2
 800888a:	005b      	lsls	r3, r3, #1
 800888c:	4413      	add	r3, r2
 800888e:	085a      	lsrs	r2, r3, #1
 8008890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008892:	695b      	ldr	r3, [r3, #20]
 8008894:	f003 0301 	and.w	r3, r3, #1
 8008898:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800889c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889e:	699a      	ldr	r2, [r3, #24]
 80088a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088a6:	0a5b      	lsrs	r3, r3, #9
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d201      	bcs.n	80088b0 <find_volume+0x3ac>
 80088ac:	230d      	movs	r3, #13
 80088ae:	e06a      	b.n	8008986 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	611a      	str	r2, [r3, #16]
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80088c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c2:	2280      	movs	r2, #128	; 0x80
 80088c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80088c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d149      	bne.n	8008962 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80088ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d0:	3330      	adds	r3, #48	; 0x30
 80088d2:	3330      	adds	r3, #48	; 0x30
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe fbf9 	bl	80070cc <ld_word>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d140      	bne.n	8008962 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80088e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e2:	3301      	adds	r3, #1
 80088e4:	4619      	mov	r1, r3
 80088e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088e8:	f7fe fea0 	bl	800762c <move_window>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d137      	bne.n	8008962 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80088f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f4:	2200      	movs	r2, #0
 80088f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	3330      	adds	r3, #48	; 0x30
 80088fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008900:	4618      	mov	r0, r3
 8008902:	f7fe fbe3 	bl	80070cc <ld_word>
 8008906:	4603      	mov	r3, r0
 8008908:	461a      	mov	r2, r3
 800890a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800890e:	429a      	cmp	r2, r3
 8008910:	d127      	bne.n	8008962 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	3330      	adds	r3, #48	; 0x30
 8008916:	4618      	mov	r0, r3
 8008918:	f7fe fbf0 	bl	80070fc <ld_dword>
 800891c:	4603      	mov	r3, r0
 800891e:	4a1c      	ldr	r2, [pc, #112]	; (8008990 <find_volume+0x48c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d11e      	bne.n	8008962 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	3330      	adds	r3, #48	; 0x30
 8008928:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fbe5 	bl	80070fc <ld_dword>
 8008932:	4603      	mov	r3, r0
 8008934:	4a17      	ldr	r2, [pc, #92]	; (8008994 <find_volume+0x490>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d113      	bne.n	8008962 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	3330      	adds	r3, #48	; 0x30
 800893e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008942:	4618      	mov	r0, r3
 8008944:	f7fe fbda 	bl	80070fc <ld_dword>
 8008948:	4602      	mov	r2, r0
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800894e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008950:	3330      	adds	r3, #48	; 0x30
 8008952:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008956:	4618      	mov	r0, r3
 8008958:	f7fe fbd0 	bl	80070fc <ld_dword>
 800895c:	4602      	mov	r2, r0
 800895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008960:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008964:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008968:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800896a:	4b0b      	ldr	r3, [pc, #44]	; (8008998 <find_volume+0x494>)
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	3301      	adds	r3, #1
 8008970:	b29a      	uxth	r2, r3
 8008972:	4b09      	ldr	r3, [pc, #36]	; (8008998 <find_volume+0x494>)
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	4b08      	ldr	r3, [pc, #32]	; (8008998 <find_volume+0x494>)
 8008978:	881a      	ldrh	r2, [r3, #0]
 800897a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800897c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800897e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008980:	f7fe fdec 	bl	800755c <clear_lock>
#endif
	return FR_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3758      	adds	r7, #88	; 0x58
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	41615252 	.word	0x41615252
 8008994:	61417272 	.word	0x61417272
 8008998:	24000530 	.word	0x24000530

0800899c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80089a6:	2309      	movs	r3, #9
 80089a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d01c      	beq.n	80089ea <validate+0x4e>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d018      	beq.n	80089ea <validate+0x4e>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d013      	beq.n	80089ea <validate+0x4e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	889a      	ldrh	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	88db      	ldrh	r3, [r3, #6]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d10c      	bne.n	80089ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	785b      	ldrb	r3, [r3, #1]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe fada 	bl	8006f90 <disk_status>
 80089dc:	4603      	mov	r3, r0
 80089de:	f003 0301 	and.w	r3, r3, #1
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <validate+0x4e>
			res = FR_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d102      	bne.n	80089f6 <validate+0x5a>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	e000      	b.n	80089f8 <validate+0x5c>
 80089f6:	2300      	movs	r3, #0
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	6013      	str	r3, [r2, #0]
	return res;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	4613      	mov	r3, r2
 8008a14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a1a:	f107 0310 	add.w	r3, r7, #16
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7ff fcd5 	bl	80083ce <get_ldnumber>
 8008a24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	da01      	bge.n	8008a30 <f_mount+0x28>
 8008a2c:	230b      	movs	r3, #11
 8008a2e:	e02b      	b.n	8008a88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a30:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <f_mount+0x88>)
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a3a:	69bb      	ldr	r3, [r7, #24]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a40:	69b8      	ldr	r0, [r7, #24]
 8008a42:	f7fe fd8b 	bl	800755c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a46:	69bb      	ldr	r3, [r7, #24]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d002      	beq.n	8008a58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	490d      	ldr	r1, [pc, #52]	; (8008a90 <f_mount+0x88>)
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d002      	beq.n	8008a6e <f_mount+0x66>
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	d001      	beq.n	8008a72 <f_mount+0x6a>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	e00a      	b.n	8008a88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008a72:	f107 010c 	add.w	r1, r7, #12
 8008a76:	f107 0308 	add.w	r3, r7, #8
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f7ff fd41 	bl	8008504 <find_volume>
 8008a82:	4603      	mov	r3, r0
 8008a84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3720      	adds	r7, #32
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	2400052c 	.word	0x2400052c

08008a94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b098      	sub	sp, #96	; 0x60
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <f_open+0x18>
 8008aa8:	2309      	movs	r3, #9
 8008aaa:	e1ad      	b.n	8008e08 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ab2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ab4:	79fa      	ldrb	r2, [r7, #7]
 8008ab6:	f107 0110 	add.w	r1, r7, #16
 8008aba:	f107 0308 	add.w	r3, r7, #8
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fd20 	bl	8008504 <find_volume>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008aca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f040 8191 	bne.w	8008df6 <f_open+0x362>
		dj.obj.fs = fs;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ad8:	68ba      	ldr	r2, [r7, #8]
 8008ada:	f107 0314 	add.w	r3, r7, #20
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fc03 	bl	80082ec <follow_path>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008aec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d11a      	bne.n	8008b2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008af4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008af8:	b25b      	sxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	da03      	bge.n	8008b06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008afe:	2306      	movs	r3, #6
 8008b00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b04:	e011      	b.n	8008b2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	f023 0301 	bic.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	bf14      	ite	ne
 8008b10:	2301      	movne	r3, #1
 8008b12:	2300      	moveq	r3, #0
 8008b14:	b2db      	uxtb	r3, r3
 8008b16:	461a      	mov	r2, r3
 8008b18:	f107 0314 	add.w	r3, r7, #20
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe fbd4 	bl	80072cc <chk_lock>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	f003 031c 	and.w	r3, r3, #28
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d07f      	beq.n	8008c34 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d017      	beq.n	8008b6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	d10e      	bne.n	8008b62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b44:	f7fe fc1e 	bl	8007384 <enq_lock>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d006      	beq.n	8008b5c <f_open+0xc8>
 8008b4e:	f107 0314 	add.w	r3, r7, #20
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7ff fb03 	bl	800815e <dir_register>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	e000      	b.n	8008b5e <f_open+0xca>
 8008b5c:	2312      	movs	r3, #18
 8008b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008b62:	79fb      	ldrb	r3, [r7, #7]
 8008b64:	f043 0308 	orr.w	r3, r3, #8
 8008b68:	71fb      	strb	r3, [r7, #7]
 8008b6a:	e010      	b.n	8008b8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008b6c:	7ebb      	ldrb	r3, [r7, #26]
 8008b6e:	f003 0311 	and.w	r3, r3, #17
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <f_open+0xea>
					res = FR_DENIED;
 8008b76:	2307      	movs	r3, #7
 8008b78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b7c:	e007      	b.n	8008b8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d002      	beq.n	8008b8e <f_open+0xfa>
 8008b88:	2308      	movs	r3, #8
 8008b8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d168      	bne.n	8008c68 <f_open+0x1d4>
 8008b96:	79fb      	ldrb	r3, [r7, #7]
 8008b98:	f003 0308 	and.w	r3, r3, #8
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d063      	beq.n	8008c68 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008ba0:	f7fd ffc6 	bl	8006b30 <get_fattime>
 8008ba4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba8:	330e      	adds	r3, #14
 8008baa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7fe fae3 	bl	8007178 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb4:	3316      	adds	r3, #22
 8008bb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fe fadd 	bl	8007178 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc0:	330b      	adds	r3, #11
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff fa32 	bl	8008036 <ld_clust>
 8008bd2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008bd8:	2200      	movs	r2, #0
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fa4a 	bl	8008074 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	331c      	adds	r3, #28
 8008be4:	2100      	movs	r1, #0
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fac6 	bl	8007178 <st_dword>
					fs->wflag = 1;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d037      	beq.n	8008c68 <f_open+0x1d4>
						dw = fs->winsect;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008bfe:	f107 0314 	add.w	r3, r7, #20
 8008c02:	2200      	movs	r2, #0
 8008c04:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe ff5d 	bl	8007ac6 <remove_chain>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008c12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d126      	bne.n	8008c68 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe fd04 	bl	800762c <move_window>
 8008c24:	4603      	mov	r3, r0
 8008c26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c2e:	3a01      	subs	r2, #1
 8008c30:	60da      	str	r2, [r3, #12]
 8008c32:	e019      	b.n	8008c68 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008c34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d115      	bne.n	8008c68 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008c3c:	7ebb      	ldrb	r3, [r7, #26]
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <f_open+0x1ba>
					res = FR_NO_FILE;
 8008c46:	2304      	movs	r3, #4
 8008c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c4c:	e00c      	b.n	8008c68 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d007      	beq.n	8008c68 <f_open+0x1d4>
 8008c58:	7ebb      	ldrb	r3, [r7, #26]
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <f_open+0x1d4>
						res = FR_DENIED;
 8008c62:	2307      	movs	r3, #7
 8008c64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d128      	bne.n	8008cc2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c80:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008c8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf14      	ite	ne
 8008c9a:	2301      	movne	r3, #1
 8008c9c:	2300      	moveq	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f107 0314 	add.w	r3, r7, #20
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fe fb8d 	bl	80073c8 <inc_lock>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d102      	bne.n	8008cc2 <f_open+0x22e>
 8008cbc:	2302      	movs	r3, #2
 8008cbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8095 	bne.w	8008df6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd0:	4611      	mov	r1, r2
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff f9af 	bl	8008036 <ld_clust>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ce0:	331c      	adds	r3, #28
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fa0a 	bl	80070fc <ld_dword>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	88da      	ldrh	r2, [r3, #6]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	79fa      	ldrb	r2, [r7, #7]
 8008d06:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	3330      	adds	r3, #48	; 0x30
 8008d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fa74 	bl	8007212 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d2a:	79fb      	ldrb	r3, [r7, #7]
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d060      	beq.n	8008df6 <f_open+0x362>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d05c      	beq.n	8008df6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	68da      	ldr	r2, [r3, #12]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	895b      	ldrh	r3, [r3, #10]
 8008d48:	025b      	lsls	r3, r3, #9
 8008d4a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	657b      	str	r3, [r7, #84]	; 0x54
 8008d58:	e016      	b.n	8008d88 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fd1f 	bl	80077a2 <get_fat>
 8008d64:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d802      	bhi.n	8008d72 <f_open+0x2de>
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d78:	d102      	bne.n	8008d80 <f_open+0x2ec>
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d84:	1ad3      	subs	r3, r2, r3
 8008d86:	657b      	str	r3, [r7, #84]	; 0x54
 8008d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d103      	bne.n	8008d98 <f_open+0x304>
 8008d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d8e0      	bhi.n	8008d5a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d127      	bne.n	8008df6 <f_open+0x362>
 8008da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d022      	beq.n	8008df6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe fcd5 	bl	8007764 <clust2sect>
 8008dba:	6478      	str	r0, [r7, #68]	; 0x44
 8008dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d103      	bne.n	8008dca <f_open+0x336>
						res = FR_INT_ERR;
 8008dc2:	2302      	movs	r3, #2
 8008dc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008dc8:	e015      	b.n	8008df6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dcc:	0a5a      	lsrs	r2, r3, #9
 8008dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd0:	441a      	add	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	7858      	ldrb	r0, [r3, #1]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1a      	ldr	r2, [r3, #32]
 8008de4:	2301      	movs	r3, #1
 8008de6:	f7fe f913 	bl	8007010 <disk_read>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d002      	beq.n	8008df6 <f_open+0x362>
 8008df0:	2301      	movs	r3, #1
 8008df2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008df6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d002      	beq.n	8008e04 <f_open+0x370>
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3760      	adds	r7, #96	; 0x60
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	; 0x30
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	607a      	str	r2, [r7, #4]
 8008e1c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f107 0210 	add.w	r2, r7, #16
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7ff fdb3 	bl	800899c <validate>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d107      	bne.n	8008e54 <f_write+0x44>
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	7d5b      	ldrb	r3, [r3, #21]
 8008e48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008e4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <f_write+0x4a>
 8008e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e58:	e14b      	b.n	80090f2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	7d1b      	ldrb	r3, [r3, #20]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <f_write+0x5a>
 8008e66:	2307      	movs	r3, #7
 8008e68:	e143      	b.n	80090f2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	441a      	add	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	699b      	ldr	r3, [r3, #24]
 8008e76:	429a      	cmp	r2, r3
 8008e78:	f080 812d 	bcs.w	80090d6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	43db      	mvns	r3, r3
 8008e82:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008e84:	e127      	b.n	80090d6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f040 80e3 	bne.w	800905a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	0a5b      	lsrs	r3, r3, #9
 8008e9a:	693a      	ldr	r2, [r7, #16]
 8008e9c:	8952      	ldrh	r2, [r2, #10]
 8008e9e:	3a01      	subs	r2, #1
 8008ea0:	4013      	ands	r3, r2
 8008ea2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d143      	bne.n	8008f32 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10c      	bne.n	8008ecc <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d11a      	bne.n	8008ef4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe fe64 	bl	8007b90 <create_chain>
 8008ec8:	62b8      	str	r0, [r7, #40]	; 0x28
 8008eca:	e013      	b.n	8008ef4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d007      	beq.n	8008ee4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	4619      	mov	r1, r3
 8008eda:	68f8      	ldr	r0, [r7, #12]
 8008edc:	f7fe fef0 	bl	8007cc0 <clmt_clust>
 8008ee0:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ee2:	e007      	b.n	8008ef4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	69db      	ldr	r3, [r3, #28]
 8008eea:	4619      	mov	r1, r3
 8008eec:	4610      	mov	r0, r2
 8008eee:	f7fe fe4f 	bl	8007b90 <create_chain>
 8008ef2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	f000 80f2 	beq.w	80090e0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d104      	bne.n	8008f0c <f_write+0xfc>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2202      	movs	r2, #2
 8008f06:	755a      	strb	r2, [r3, #21]
 8008f08:	2302      	movs	r3, #2
 8008f0a:	e0f2      	b.n	80090f2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f12:	d104      	bne.n	8008f1e <f_write+0x10e>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	755a      	strb	r2, [r3, #21]
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e0e9      	b.n	80090f2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f22:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d102      	bne.n	8008f32 <f_write+0x122>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f30:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	7d1b      	ldrb	r3, [r3, #20]
 8008f36:	b25b      	sxtb	r3, r3
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da18      	bge.n	8008f6e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	7858      	ldrb	r0, [r3, #1]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6a1a      	ldr	r2, [r3, #32]
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f7fe f880 	bl	8007050 <disk_write>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d004      	beq.n	8008f60 <f_write+0x150>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	755a      	strb	r2, [r3, #21]
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	e0c8      	b.n	80090f2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	7d1b      	ldrb	r3, [r3, #20]
 8008f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	69db      	ldr	r3, [r3, #28]
 8008f74:	4619      	mov	r1, r3
 8008f76:	4610      	mov	r0, r2
 8008f78:	f7fe fbf4 	bl	8007764 <clust2sect>
 8008f7c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d104      	bne.n	8008f8e <f_write+0x17e>
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2202      	movs	r2, #2
 8008f88:	755a      	strb	r2, [r3, #21]
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e0b1      	b.n	80090f2 <f_write+0x2e2>
			sect += csect;
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	4413      	add	r3, r2
 8008f94:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	0a5b      	lsrs	r3, r3, #9
 8008f9a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d03c      	beq.n	800901c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	4413      	add	r3, r2
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	8952      	ldrh	r2, [r2, #10]
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d905      	bls.n	8008fbc <f_write+0x1ac>
					cc = fs->csize - csect;
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	895b      	ldrh	r3, [r3, #10]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	7858      	ldrb	r0, [r3, #1]
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	69f9      	ldr	r1, [r7, #28]
 8008fc6:	f7fe f843 	bl	8007050 <disk_write>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <f_write+0x1ca>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	755a      	strb	r2, [r3, #21]
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e08b      	b.n	80090f2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6a1a      	ldr	r2, [r3, #32]
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	6a3a      	ldr	r2, [r7, #32]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d915      	bls.n	8009014 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6a1a      	ldr	r2, [r3, #32]
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	1ad3      	subs	r3, r2, r3
 8008ff6:	025b      	lsls	r3, r3, #9
 8008ff8:	69fa      	ldr	r2, [r7, #28]
 8008ffa:	4413      	add	r3, r2
 8008ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009000:	4619      	mov	r1, r3
 8009002:	f7fe f8e5 	bl	80071d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	7d1b      	ldrb	r3, [r3, #20]
 800900a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800900e:	b2da      	uxtb	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	025b      	lsls	r3, r3, #9
 8009018:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800901a:	e03f      	b.n	800909c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	429a      	cmp	r2, r3
 8009024:	d016      	beq.n	8009054 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800902e:	429a      	cmp	r2, r3
 8009030:	d210      	bcs.n	8009054 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	7858      	ldrb	r0, [r3, #1]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800903c:	2301      	movs	r3, #1
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	f7fd ffe6 	bl	8007010 <disk_read>
 8009044:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009046:	2b00      	cmp	r3, #0
 8009048:	d004      	beq.n	8009054 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2201      	movs	r2, #1
 800904e:	755a      	strb	r2, [r3, #21]
 8009050:	2301      	movs	r3, #1
 8009052:	e04e      	b.n	80090f2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009062:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8009066:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	429a      	cmp	r2, r3
 800906e:	d901      	bls.n	8009074 <f_write+0x264>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009082:	4413      	add	r3, r2
 8009084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009086:	69f9      	ldr	r1, [r7, #28]
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe f8a1 	bl	80071d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	7d1b      	ldrb	r3, [r3, #20]
 8009092:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	4413      	add	r3, r2
 80090a2:	61fb      	str	r3, [r7, #28]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	699a      	ldr	r2, [r3, #24]
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	441a      	add	r2, r3
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	619a      	str	r2, [r3, #24]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68da      	ldr	r2, [r3, #12]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	bf38      	it	cc
 80090bc:	461a      	movcc	r2, r3
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	681a      	ldr	r2, [r3, #0]
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	441a      	add	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	601a      	str	r2, [r3, #0]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f47f aed4 	bne.w	8008e86 <f_write+0x76>
 80090de:	e000      	b.n	80090e2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80090e0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	7d1b      	ldrb	r3, [r3, #20]
 80090e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090ea:	b2da      	uxtb	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80090f0:	2300      	movs	r3, #0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3730      	adds	r7, #48	; 0x30
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}

080090fa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b086      	sub	sp, #24
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f107 0208 	add.w	r2, r7, #8
 8009108:	4611      	mov	r1, r2
 800910a:	4618      	mov	r0, r3
 800910c:	f7ff fc46 	bl	800899c <validate>
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009114:	7dfb      	ldrb	r3, [r7, #23]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d168      	bne.n	80091ec <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7d1b      	ldrb	r3, [r3, #20]
 800911e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009122:	2b00      	cmp	r3, #0
 8009124:	d062      	beq.n	80091ec <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	7d1b      	ldrb	r3, [r3, #20]
 800912a:	b25b      	sxtb	r3, r3
 800912c:	2b00      	cmp	r3, #0
 800912e:	da15      	bge.n	800915c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	7858      	ldrb	r0, [r3, #1]
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a1a      	ldr	r2, [r3, #32]
 800913e:	2301      	movs	r3, #1
 8009140:	f7fd ff86 	bl	8007050 <disk_write>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d001      	beq.n	800914e <f_sync+0x54>
 800914a:	2301      	movs	r3, #1
 800914c:	e04f      	b.n	80091ee <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	7d1b      	ldrb	r3, [r3, #20]
 8009152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009156:	b2da      	uxtb	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800915c:	f7fd fce8 	bl	8006b30 <get_fattime>
 8009160:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fa5e 	bl	800762c <move_window>
 8009170:	4603      	mov	r3, r0
 8009172:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009174:	7dfb      	ldrb	r3, [r7, #23]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d138      	bne.n	80091ec <f_sync+0xf2>
					dir = fp->dir_ptr;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800917e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	330b      	adds	r3, #11
 8009184:	781a      	ldrb	r2, [r3, #0]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	330b      	adds	r3, #11
 800918a:	f042 0220 	orr.w	r2, r2, #32
 800918e:	b2d2      	uxtb	r2, r2
 8009190:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	461a      	mov	r2, r3
 800919c:	68f9      	ldr	r1, [r7, #12]
 800919e:	f7fe ff69 	bl	8008074 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	f103 021c 	add.w	r2, r3, #28
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7fd ffe2 	bl	8007178 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3316      	adds	r3, #22
 80091b8:	6939      	ldr	r1, [r7, #16]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f7fd ffdc 	bl	8007178 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3312      	adds	r3, #18
 80091c4:	2100      	movs	r1, #0
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7fd ffbb 	bl	8007142 <st_word>
					fs->wflag = 1;
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2201      	movs	r2, #1
 80091d0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7fe fa57 	bl	8007688 <sync_fs>
 80091da:	4603      	mov	r3, r0
 80091dc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	7d1b      	ldrb	r3, [r3, #20]
 80091e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff ff7b 	bl	80090fa <f_sync>
 8009204:	4603      	mov	r3, r0
 8009206:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009208:	7bfb      	ldrb	r3, [r7, #15]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d118      	bne.n	8009240 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f107 0208 	add.w	r2, r7, #8
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff fbc0 	bl	800899c <validate>
 800921c:	4603      	mov	r3, r0
 800921e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009220:	7bfb      	ldrb	r3, [r7, #15]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d10c      	bne.n	8009240 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe f95a 	bl	80074e4 <dec_lock>
 8009230:	4603      	mov	r3, r0
 8009232:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d102      	bne.n	8009240 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009240:	7bfb      	ldrb	r3, [r7, #15]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3710      	adds	r7, #16
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800925a:	2301      	movs	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009262:	4b1f      	ldr	r3, [pc, #124]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 8009264:	7a5b      	ldrb	r3, [r3, #9]
 8009266:	b2db      	uxtb	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d131      	bne.n	80092d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800926c:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 800926e:	7a5b      	ldrb	r3, [r3, #9]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	461a      	mov	r2, r3
 8009274:	4b1a      	ldr	r3, [pc, #104]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 8009276:	2100      	movs	r1, #0
 8009278:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800927a:	4b19      	ldr	r3, [pc, #100]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 800927c:	7a5b      	ldrb	r3, [r3, #9]
 800927e:	b2db      	uxtb	r3, r3
 8009280:	4a17      	ldr	r2, [pc, #92]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4413      	add	r3, r2
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800928a:	4b15      	ldr	r3, [pc, #84]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 800928c:	7a5b      	ldrb	r3, [r3, #9]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	461a      	mov	r2, r3
 8009292:	4b13      	ldr	r3, [pc, #76]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 8009294:	4413      	add	r3, r2
 8009296:	79fa      	ldrb	r2, [r7, #7]
 8009298:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800929a:	4b11      	ldr	r3, [pc, #68]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 800929c:	7a5b      	ldrb	r3, [r3, #9]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	1c5a      	adds	r2, r3, #1
 80092a2:	b2d1      	uxtb	r1, r2
 80092a4:	4a0e      	ldr	r2, [pc, #56]	; (80092e0 <FATFS_LinkDriverEx+0x94>)
 80092a6:	7251      	strb	r1, [r2, #9]
 80092a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80092aa:	7dbb      	ldrb	r3, [r7, #22]
 80092ac:	3330      	adds	r3, #48	; 0x30
 80092ae:	b2da      	uxtb	r2, r3
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	3301      	adds	r3, #1
 80092b8:	223a      	movs	r2, #58	; 0x3a
 80092ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	3302      	adds	r3, #2
 80092c0:	222f      	movs	r2, #47	; 0x2f
 80092c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	3303      	adds	r3, #3
 80092c8:	2200      	movs	r2, #0
 80092ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	24000554 	.word	0x24000554

080092e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80092ee:	2200      	movs	r2, #0
 80092f0:	6839      	ldr	r1, [r7, #0]
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff ffaa 	bl	800924c <FATFS_LinkDriverEx>
 80092f8:	4603      	mov	r3, r0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <memset>:
 8009302:	4402      	add	r2, r0
 8009304:	4603      	mov	r3, r0
 8009306:	4293      	cmp	r3, r2
 8009308:	d100      	bne.n	800930c <memset+0xa>
 800930a:	4770      	bx	lr
 800930c:	f803 1b01 	strb.w	r1, [r3], #1
 8009310:	e7f9      	b.n	8009306 <memset+0x4>
	...

08009314 <__libc_init_array>:
 8009314:	b570      	push	{r4, r5, r6, lr}
 8009316:	4d0d      	ldr	r5, [pc, #52]	; (800934c <__libc_init_array+0x38>)
 8009318:	4c0d      	ldr	r4, [pc, #52]	; (8009350 <__libc_init_array+0x3c>)
 800931a:	1b64      	subs	r4, r4, r5
 800931c:	10a4      	asrs	r4, r4, #2
 800931e:	2600      	movs	r6, #0
 8009320:	42a6      	cmp	r6, r4
 8009322:	d109      	bne.n	8009338 <__libc_init_array+0x24>
 8009324:	4d0b      	ldr	r5, [pc, #44]	; (8009354 <__libc_init_array+0x40>)
 8009326:	4c0c      	ldr	r4, [pc, #48]	; (8009358 <__libc_init_array+0x44>)
 8009328:	f000 f818 	bl	800935c <_init>
 800932c:	1b64      	subs	r4, r4, r5
 800932e:	10a4      	asrs	r4, r4, #2
 8009330:	2600      	movs	r6, #0
 8009332:	42a6      	cmp	r6, r4
 8009334:	d105      	bne.n	8009342 <__libc_init_array+0x2e>
 8009336:	bd70      	pop	{r4, r5, r6, pc}
 8009338:	f855 3b04 	ldr.w	r3, [r5], #4
 800933c:	4798      	blx	r3
 800933e:	3601      	adds	r6, #1
 8009340:	e7ee      	b.n	8009320 <__libc_init_array+0xc>
 8009342:	f855 3b04 	ldr.w	r3, [r5], #4
 8009346:	4798      	blx	r3
 8009348:	3601      	adds	r6, #1
 800934a:	e7f2      	b.n	8009332 <__libc_init_array+0x1e>
 800934c:	0800946c 	.word	0x0800946c
 8009350:	0800946c 	.word	0x0800946c
 8009354:	0800946c 	.word	0x0800946c
 8009358:	08009470 	.word	0x08009470

0800935c <_init>:
 800935c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935e:	bf00      	nop
 8009360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009362:	bc08      	pop	{r3}
 8009364:	469e      	mov	lr, r3
 8009366:	4770      	bx	lr

08009368 <_fini>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	bf00      	nop
 800936c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800936e:	bc08      	pop	{r3}
 8009370:	469e      	mov	lr, r3
 8009372:	4770      	bx	lr
