
swamplaunch_chip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9d8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800aca8  0800aca8  0001aca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b0c4  0800b0c4  0001b0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b0cc  0800b0cc  0001b0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b0d0  0800b0d0  0001b0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  24000000  0800b0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00004298  240001dc  0800b2b0  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004474  0800b2b0  00024474  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00018f89  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00003828  00000000  00000000  000391d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001308  00000000  00000000  0003ca00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e7e  00000000  00000000  0003dd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000359a8  00000000  00000000  0003eb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00018ed9  00000000  00000000  0007452e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014f21c  00000000  00000000  0008d407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005cac  00000000  00000000  001dc624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001e22d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001dc 	.word	0x240001dc
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ac90 	.word	0x0800ac90

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001e0 	.word	0x240001e0
 800030c:	0800ac90 	.word	0x0800ac90

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b970 	b.w	80006b8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9e08      	ldr	r6, [sp, #32]
 80003f6:	460d      	mov	r5, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	460f      	mov	r7, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4694      	mov	ip, r2
 8000404:	d965      	bls.n	80004d2 <__udivmoddi4+0xe2>
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	b143      	cbz	r3, 800041e <__udivmoddi4+0x2e>
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	f1c3 0220 	rsb	r2, r3, #32
 8000414:	409f      	lsls	r7, r3
 8000416:	fa20 f202 	lsr.w	r2, r0, r2
 800041a:	4317      	orrs	r7, r2
 800041c:	409c      	lsls	r4, r3
 800041e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000422:	fa1f f58c 	uxth.w	r5, ip
 8000426:	fbb7 f1fe 	udiv	r1, r7, lr
 800042a:	0c22      	lsrs	r2, r4, #16
 800042c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000430:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000434:	fb01 f005 	mul.w	r0, r1, r5
 8000438:	4290      	cmp	r0, r2
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x62>
 800043c:	eb1c 0202 	adds.w	r2, ip, r2
 8000440:	f101 37ff 	add.w	r7, r1, #4294967295
 8000444:	f080 811c 	bcs.w	8000680 <__udivmoddi4+0x290>
 8000448:	4290      	cmp	r0, r2
 800044a:	f240 8119 	bls.w	8000680 <__udivmoddi4+0x290>
 800044e:	3902      	subs	r1, #2
 8000450:	4462      	add	r2, ip
 8000452:	1a12      	subs	r2, r2, r0
 8000454:	b2a4      	uxth	r4, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000462:	fb00 f505 	mul.w	r5, r0, r5
 8000466:	42a5      	cmp	r5, r4
 8000468:	d90a      	bls.n	8000480 <__udivmoddi4+0x90>
 800046a:	eb1c 0404 	adds.w	r4, ip, r4
 800046e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000472:	f080 8107 	bcs.w	8000684 <__udivmoddi4+0x294>
 8000476:	42a5      	cmp	r5, r4
 8000478:	f240 8104 	bls.w	8000684 <__udivmoddi4+0x294>
 800047c:	4464      	add	r4, ip
 800047e:	3802      	subs	r0, #2
 8000480:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000484:	1b64      	subs	r4, r4, r5
 8000486:	2100      	movs	r1, #0
 8000488:	b11e      	cbz	r6, 8000492 <__udivmoddi4+0xa2>
 800048a:	40dc      	lsrs	r4, r3
 800048c:	2300      	movs	r3, #0
 800048e:	e9c6 4300 	strd	r4, r3, [r6]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0xbc>
 800049a:	2e00      	cmp	r6, #0
 800049c:	f000 80ed 	beq.w	800067a <__udivmoddi4+0x28a>
 80004a0:	2100      	movs	r1, #0
 80004a2:	e9c6 0500 	strd	r0, r5, [r6]
 80004a6:	4608      	mov	r0, r1
 80004a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ac:	fab3 f183 	clz	r1, r3
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d149      	bne.n	8000548 <__udivmoddi4+0x158>
 80004b4:	42ab      	cmp	r3, r5
 80004b6:	d302      	bcc.n	80004be <__udivmoddi4+0xce>
 80004b8:	4282      	cmp	r2, r0
 80004ba:	f200 80f8 	bhi.w	80006ae <__udivmoddi4+0x2be>
 80004be:	1a84      	subs	r4, r0, r2
 80004c0:	eb65 0203 	sbc.w	r2, r5, r3
 80004c4:	2001      	movs	r0, #1
 80004c6:	4617      	mov	r7, r2
 80004c8:	2e00      	cmp	r6, #0
 80004ca:	d0e2      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	e9c6 4700 	strd	r4, r7, [r6]
 80004d0:	e7df      	b.n	8000492 <__udivmoddi4+0xa2>
 80004d2:	b902      	cbnz	r2, 80004d6 <__udivmoddi4+0xe6>
 80004d4:	deff      	udf	#255	; 0xff
 80004d6:	fab2 f382 	clz	r3, r2
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f040 8090 	bne.w	8000600 <__udivmoddi4+0x210>
 80004e0:	1a8a      	subs	r2, r1, r2
 80004e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e6:	fa1f fe8c 	uxth.w	lr, ip
 80004ea:	2101      	movs	r1, #1
 80004ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f0:	fb07 2015 	mls	r0, r7, r5, r2
 80004f4:	0c22      	lsrs	r2, r4, #16
 80004f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fa:	fb0e f005 	mul.w	r0, lr, r5
 80004fe:	4290      	cmp	r0, r2
 8000500:	d908      	bls.n	8000514 <__udivmoddi4+0x124>
 8000502:	eb1c 0202 	adds.w	r2, ip, r2
 8000506:	f105 38ff 	add.w	r8, r5, #4294967295
 800050a:	d202      	bcs.n	8000512 <__udivmoddi4+0x122>
 800050c:	4290      	cmp	r0, r2
 800050e:	f200 80cb 	bhi.w	80006a8 <__udivmoddi4+0x2b8>
 8000512:	4645      	mov	r5, r8
 8000514:	1a12      	subs	r2, r2, r0
 8000516:	b2a4      	uxth	r4, r4
 8000518:	fbb2 f0f7 	udiv	r0, r2, r7
 800051c:	fb07 2210 	mls	r2, r7, r0, r2
 8000520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000524:	fb0e fe00 	mul.w	lr, lr, r0
 8000528:	45a6      	cmp	lr, r4
 800052a:	d908      	bls.n	800053e <__udivmoddi4+0x14e>
 800052c:	eb1c 0404 	adds.w	r4, ip, r4
 8000530:	f100 32ff 	add.w	r2, r0, #4294967295
 8000534:	d202      	bcs.n	800053c <__udivmoddi4+0x14c>
 8000536:	45a6      	cmp	lr, r4
 8000538:	f200 80bb 	bhi.w	80006b2 <__udivmoddi4+0x2c2>
 800053c:	4610      	mov	r0, r2
 800053e:	eba4 040e 	sub.w	r4, r4, lr
 8000542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000546:	e79f      	b.n	8000488 <__udivmoddi4+0x98>
 8000548:	f1c1 0720 	rsb	r7, r1, #32
 800054c:	408b      	lsls	r3, r1
 800054e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000552:	ea4c 0c03 	orr.w	ip, ip, r3
 8000556:	fa05 f401 	lsl.w	r4, r5, r1
 800055a:	fa20 f307 	lsr.w	r3, r0, r7
 800055e:	40fd      	lsrs	r5, r7
 8000560:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000564:	4323      	orrs	r3, r4
 8000566:	fbb5 f8f9 	udiv	r8, r5, r9
 800056a:	fa1f fe8c 	uxth.w	lr, ip
 800056e:	fb09 5518 	mls	r5, r9, r8, r5
 8000572:	0c1c      	lsrs	r4, r3, #16
 8000574:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000578:	fb08 f50e 	mul.w	r5, r8, lr
 800057c:	42a5      	cmp	r5, r4
 800057e:	fa02 f201 	lsl.w	r2, r2, r1
 8000582:	fa00 f001 	lsl.w	r0, r0, r1
 8000586:	d90b      	bls.n	80005a0 <__udivmoddi4+0x1b0>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000590:	f080 8088 	bcs.w	80006a4 <__udivmoddi4+0x2b4>
 8000594:	42a5      	cmp	r5, r4
 8000596:	f240 8085 	bls.w	80006a4 <__udivmoddi4+0x2b4>
 800059a:	f1a8 0802 	sub.w	r8, r8, #2
 800059e:	4464      	add	r4, ip
 80005a0:	1b64      	subs	r4, r4, r5
 80005a2:	b29d      	uxth	r5, r3
 80005a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005a8:	fb09 4413 	mls	r4, r9, r3, r4
 80005ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b4:	45a6      	cmp	lr, r4
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x1da>
 80005b8:	eb1c 0404 	adds.w	r4, ip, r4
 80005bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005c0:	d26c      	bcs.n	800069c <__udivmoddi4+0x2ac>
 80005c2:	45a6      	cmp	lr, r4
 80005c4:	d96a      	bls.n	800069c <__udivmoddi4+0x2ac>
 80005c6:	3b02      	subs	r3, #2
 80005c8:	4464      	add	r4, ip
 80005ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ce:	fba3 9502 	umull	r9, r5, r3, r2
 80005d2:	eba4 040e 	sub.w	r4, r4, lr
 80005d6:	42ac      	cmp	r4, r5
 80005d8:	46c8      	mov	r8, r9
 80005da:	46ae      	mov	lr, r5
 80005dc:	d356      	bcc.n	800068c <__udivmoddi4+0x29c>
 80005de:	d053      	beq.n	8000688 <__udivmoddi4+0x298>
 80005e0:	b156      	cbz	r6, 80005f8 <__udivmoddi4+0x208>
 80005e2:	ebb0 0208 	subs.w	r2, r0, r8
 80005e6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ea:	fa04 f707 	lsl.w	r7, r4, r7
 80005ee:	40ca      	lsrs	r2, r1
 80005f0:	40cc      	lsrs	r4, r1
 80005f2:	4317      	orrs	r7, r2
 80005f4:	e9c6 7400 	strd	r7, r4, [r6]
 80005f8:	4618      	mov	r0, r3
 80005fa:	2100      	movs	r1, #0
 80005fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000600:	f1c3 0120 	rsb	r1, r3, #32
 8000604:	fa02 fc03 	lsl.w	ip, r2, r3
 8000608:	fa20 f201 	lsr.w	r2, r0, r1
 800060c:	fa25 f101 	lsr.w	r1, r5, r1
 8000610:	409d      	lsls	r5, r3
 8000612:	432a      	orrs	r2, r5
 8000614:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000618:	fa1f fe8c 	uxth.w	lr, ip
 800061c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000620:	fb07 1510 	mls	r5, r7, r0, r1
 8000624:	0c11      	lsrs	r1, r2, #16
 8000626:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062a:	fb00 f50e 	mul.w	r5, r0, lr
 800062e:	428d      	cmp	r5, r1
 8000630:	fa04 f403 	lsl.w	r4, r4, r3
 8000634:	d908      	bls.n	8000648 <__udivmoddi4+0x258>
 8000636:	eb1c 0101 	adds.w	r1, ip, r1
 800063a:	f100 38ff 	add.w	r8, r0, #4294967295
 800063e:	d22f      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000640:	428d      	cmp	r5, r1
 8000642:	d92d      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000644:	3802      	subs	r0, #2
 8000646:	4461      	add	r1, ip
 8000648:	1b49      	subs	r1, r1, r5
 800064a:	b292      	uxth	r2, r2
 800064c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000650:	fb07 1115 	mls	r1, r7, r5, r1
 8000654:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000658:	fb05 f10e 	mul.w	r1, r5, lr
 800065c:	4291      	cmp	r1, r2
 800065e:	d908      	bls.n	8000672 <__udivmoddi4+0x282>
 8000660:	eb1c 0202 	adds.w	r2, ip, r2
 8000664:	f105 38ff 	add.w	r8, r5, #4294967295
 8000668:	d216      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 800066a:	4291      	cmp	r1, r2
 800066c:	d914      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800066e:	3d02      	subs	r5, #2
 8000670:	4462      	add	r2, ip
 8000672:	1a52      	subs	r2, r2, r1
 8000674:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000678:	e738      	b.n	80004ec <__udivmoddi4+0xfc>
 800067a:	4631      	mov	r1, r6
 800067c:	4630      	mov	r0, r6
 800067e:	e708      	b.n	8000492 <__udivmoddi4+0xa2>
 8000680:	4639      	mov	r1, r7
 8000682:	e6e6      	b.n	8000452 <__udivmoddi4+0x62>
 8000684:	4610      	mov	r0, r2
 8000686:	e6fb      	b.n	8000480 <__udivmoddi4+0x90>
 8000688:	4548      	cmp	r0, r9
 800068a:	d2a9      	bcs.n	80005e0 <__udivmoddi4+0x1f0>
 800068c:	ebb9 0802 	subs.w	r8, r9, r2
 8000690:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000694:	3b01      	subs	r3, #1
 8000696:	e7a3      	b.n	80005e0 <__udivmoddi4+0x1f0>
 8000698:	4645      	mov	r5, r8
 800069a:	e7ea      	b.n	8000672 <__udivmoddi4+0x282>
 800069c:	462b      	mov	r3, r5
 800069e:	e794      	b.n	80005ca <__udivmoddi4+0x1da>
 80006a0:	4640      	mov	r0, r8
 80006a2:	e7d1      	b.n	8000648 <__udivmoddi4+0x258>
 80006a4:	46d0      	mov	r8, sl
 80006a6:	e77b      	b.n	80005a0 <__udivmoddi4+0x1b0>
 80006a8:	3d02      	subs	r5, #2
 80006aa:	4462      	add	r2, ip
 80006ac:	e732      	b.n	8000514 <__udivmoddi4+0x124>
 80006ae:	4608      	mov	r0, r1
 80006b0:	e70a      	b.n	80004c8 <__udivmoddi4+0xd8>
 80006b2:	4464      	add	r4, ip
 80006b4:	3802      	subs	r0, #2
 80006b6:	e742      	b.n	800053e <__udivmoddi4+0x14e>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006bc:	b480      	push	{r7}
 80006be:	b085      	sub	sp, #20
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	60b9      	str	r1, [r7, #8]
 80006c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4a07      	ldr	r2, [pc, #28]	; (80006e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	4a06      	ldr	r2, [pc, #24]	; (80006ec <vApplicationGetIdleTaskMemory+0x30>)
 80006d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006da:	bf00      	nop
 80006dc:	3714      	adds	r7, #20
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	24000200 	.word	0x24000200
 80006ec:	240002a0 	.word	0x240002a0

080006f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006f0:	b5b0      	push	{r4, r5, r7, lr}
 80006f2:	b08e      	sub	sp, #56	; 0x38
 80006f4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_FREERTOS_Init+0x58>)
 80006f8:	f107 041c 	add.w	r4, r7, #28
 80006fc:	461d      	mov	r5, r3
 80006fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000702:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fa1c 	bl	8006b4e <osThreadCreate>
 8000716:	4603      	mov	r3, r0
 8000718:	4a0c      	ldr	r2, [pc, #48]	; (800074c <MX_FREERTOS_Init+0x5c>)
 800071a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, Task2_init, osPriorityNormal, 0, 128);
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_FREERTOS_Init+0x60>)
 800071e:	463c      	mov	r4, r7
 8000720:	461d      	mov	r5, r3
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800072e:	463b      	mov	r3, r7
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fa0b 	bl	8006b4e <osThreadCreate>
 8000738:	4603      	mov	r3, r0
 800073a:	4a06      	ldr	r2, [pc, #24]	; (8000754 <MX_FREERTOS_Init+0x64>)
 800073c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800073e:	bf00      	nop
 8000740:	3738      	adds	r7, #56	; 0x38
 8000742:	46bd      	mov	sp, r7
 8000744:	bdb0      	pop	{r4, r5, r7, pc}
 8000746:	bf00      	nop
 8000748:	0800acb4 	.word	0x0800acb4
 800074c:	240001f8 	.word	0x240001f8
 8000750:	0800acdc 	.word	0x0800acdc
 8000754:	240001fc 	.word	0x240001fc

08000758 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000760:	2001      	movs	r0, #1
 8000762:	f006 fa40 	bl	8006be6 <osDelay>
 8000766:	e7fb      	b.n	8000760 <StartDefaultTask+0x8>

08000768 <Task2_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2_init */
void Task2_init(void const * argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b0a4      	sub	sp, #144	; 0x90
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2_init */
	icm20948_init();
 8000770:	f000 f884 	bl	800087c <icm20948_init>
	char tx_buffer[100];

  /* Infinite loop */
  for(;;)
  {
	  icm20948_accel_read(&my_accel);
 8000774:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f8f3 	bl	8000964 <icm20948_accel_read>

	  x_val = my_accel.x;
 800077e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8000782:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000786:	ee17 3a90 	vmov	r3, s15
 800078a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  y_val = my_accel.y;
 800078e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8000792:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000796:	ee17 3a90 	vmov	r3, s15
 800079a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	  z_val = my_accel.z;
 800079e:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 80007a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007a6:	ee17 3a90 	vmov	r3, s15
 80007aa:	67fb      	str	r3, [r7, #124]	; 0x7c

	  sprintf(tx_buffer, "x: %d\ty: %d\tz: %d\n", x_val, y_val, z_val);
 80007ac:	f107 000c 	add.w	r0, r7, #12
 80007b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80007bc:	490a      	ldr	r1, [pc, #40]	; (80007e8 <Task2_init+0x80>)
 80007be:	f008 f93b 	bl	8008a38 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)tx_buffer, strlen(tx_buffer), 1000);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdf2 	bl	80003b0 <strlen>
 80007cc:	4603      	mov	r3, r0
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	f107 010c 	add.w	r1, r7, #12
 80007d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d8:	4804      	ldr	r0, [pc, #16]	; (80007ec <Task2_init+0x84>)
 80007da:	f004 ff80 	bl	80056de <HAL_UART_Transmit>
	  osDelay(10);
 80007de:	200a      	movs	r0, #10
 80007e0:	f006 fa01 	bl	8006be6 <osDelay>
	  icm20948_accel_read(&my_accel);
 80007e4:	e7c6      	b.n	8000774 <Task2_init+0xc>
 80007e6:	bf00      	nop
 80007e8:	0800acf8 	.word	0x0800acf8
 80007ec:	2400053c 	.word	0x2400053c

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_GPIO_Init+0x84>)
 8000808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080c:	4a19      	ldr	r2, [pc, #100]	; (8000874 <MX_GPIO_Init+0x84>)
 800080e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_GPIO_Init+0x84>)
 8000818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800081c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <MX_GPIO_Init+0x84>)
 8000826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_GPIO_Init+0x84>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_GPIO_Init+0x84>)
 8000836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	480b      	ldr	r0, [pc, #44]	; (8000878 <MX_GPIO_Init+0x88>)
 800084a:	f001 fbc3 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800084e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800085c:	2302      	movs	r3, #2
 800085e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_GPIO_Init+0x88>)
 8000868:	f001 fa0c 	bl	8001c84 <HAL_GPIO_Init>

}
 800086c:	bf00      	nop
 800086e:	3720      	adds	r7, #32
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58024400 	.word	0x58024400
 8000878:	58020400 	.word	0x58020400

0800087c <icm20948_init>:
static uint8_t* read_multiple_ak09916_reg(uint8_t reg, uint8_t len);


/* Main Functions */
void icm20948_init()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000880:	bf00      	nop
 8000882:	f000 f8b9 	bl	80009f8 <icm20948_who_am_i>
 8000886:	4603      	mov	r3, r0
 8000888:	f083 0301 	eor.w	r3, r3, #1
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1f7      	bne.n	8000882 <icm20948_init+0x6>

	icm20948_device_reset();
 8000892:	f000 f8c4 	bl	8000a1e <icm20948_device_reset>
	HAL_Delay(100);
 8000896:	2064      	movs	r0, #100	; 0x64
 8000898:	f001 f8ec 	bl	8001a74 <HAL_Delay>

	icm20948_wakeup();
 800089c:	f000 f8cb 	bl	8000a36 <icm20948_wakeup>

	icm20948_clock_source(1);
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 f8f9 	bl	8000a98 <icm20948_clock_source>
	icm20948_odr_align_enable();
 80008a6:	f000 f910 	bl	8000aca <icm20948_odr_align_enable>
	
	icm20948_spi_slave_enable();
 80008aa:	f000 f8de 	bl	8000a6a <icm20948_spi_slave_enable>
	
	icm20948_gyro_low_pass_filter(0);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f914 	bl	8000adc <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f92e 	bl	8000b16 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f948 	bl	8000b50 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 80008c0:	2000      	movs	r0, #0
 80008c2:	f000 f954 	bl	8000b6e <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 80008c6:	f000 f971 	bl	8000bac <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 80008ca:	f000 fa0b 	bl	8000ce4 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 80008ce:	2003      	movs	r0, #3
 80008d0:	f000 fb16 	bl	8000f00 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 80008d4:	2003      	movs	r0, #3
 80008d6:	f000 fb5d 	bl	8000f94 <icm20948_accel_full_scale_select>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}

080008de <icm20948_gyro_read>:
	ak09916_soft_reset();
	ak09916_operation_mode_setting(continuous_measurement_100hz);
}

void icm20948_gyro_read(axises* data)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 80008e6:	2206      	movs	r2, #6
 80008e8:	2133      	movs	r1, #51	; 0x33
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 fc1e 	bl	800112c <read_multiple_icm20948_reg>
 80008f0:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	021b      	lsls	r3, r3, #8
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	3301      	adds	r3, #1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21b      	sxth	r3, r3
 8000906:	ee07 3a90 	vmov	s15, r3
 800090a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3302      	adds	r3, #2
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	b21a      	sxth	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3303      	adds	r3, #3
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b21b      	sxth	r3, r3
 8000926:	4313      	orrs	r3, r2
 8000928:	b21b      	sxth	r3, r3
 800092a:	ee07 3a90 	vmov	s15, r3
 800092e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	3304      	adds	r3, #4
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	3305      	adds	r3, #5
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b21b      	sxth	r3, r3
 800094e:	ee07 3a90 	vmov	s15, r3
 8000952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}

08000964 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 800096c:	2206      	movs	r2, #6
 800096e:	212d      	movs	r1, #45	; 0x2d
 8000970:	2000      	movs	r0, #0
 8000972:	f000 fbdb 	bl	800112c <read_multiple_icm20948_reg>
 8000976:	60f8      	str	r0, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	b21a      	sxth	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3301      	adds	r3, #1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b21b      	sxth	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b21b      	sxth	r3, r3
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	edc3 7a00 	vstr	s15, [r3]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3302      	adds	r3, #2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3303      	adds	r3, #3
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	ee07 3a90 	vmov	s15, r3
 80009b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	edc3 7a01 	vstr	s15, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor; 
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	3304      	adds	r3, #4
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	021b      	lsls	r3, r3, #8
 80009c6:	b21a      	sxth	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3305      	adds	r3, #5
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	b21b      	sxth	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b21b      	sxth	r3, r3
 80009d4:	ee07 3a90 	vmov	s15, r3
 80009d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <icm20948_accel_read+0x90>)
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	edc3 7a02 	vstr	s15, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	240004a4 	.word	0x240004a4

080009f8 <icm20948_who_am_i>:
}	


/* Sub Functions */
bool icm20948_who_am_i()
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 80009fe:	2100      	movs	r1, #0
 8000a00:	2000      	movs	r0, #0
 8000a02:	f000 fb3f 	bl	8001084 <read_single_icm20948_reg>
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]

	if(icm20948_id == ICM20948_ID)
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2bea      	cmp	r3, #234	; 0xea
 8000a0e:	d101      	bne.n	8000a14 <icm20948_who_am_i+0x1c>
		return true;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <icm20948_who_am_i+0x1e>
	else
		return false;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <icm20948_device_reset>:
	else
		return false;
}

void icm20948_device_reset()
{
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000a22:	22c1      	movs	r2, #193	; 0xc1
 8000a24:	2106      	movs	r1, #6
 8000a26:	2000      	movs	r0, #0
 8000a28:	f000 fb5c 	bl	80010e4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000a2c:	2064      	movs	r0, #100	; 0x64
 8000a2e:	f001 f821 	bl	8001a74 <HAL_Delay>
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <icm20948_wakeup>:
	write_single_ak09916_reg(MAG_CNTL3, 0x01);
	HAL_Delay(100);
}

void icm20948_wakeup()
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000a3c:	2106      	movs	r1, #6
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f000 fb20 	bl	8001084 <read_single_icm20948_reg>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	new_val &= 0xBF;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a4e:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	461a      	mov	r2, r3
 8000a54:	2106      	movs	r1, #6
 8000a56:	2000      	movs	r0, #0
 8000a58:	f000 fb44 	bl	80010e4 <write_single_icm20948_reg>
	HAL_Delay(100);
 8000a5c:	2064      	movs	r0, #100	; 0x64
 8000a5e:	f001 f809 	bl	8001a74 <HAL_Delay>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000a70:	2103      	movs	r1, #3
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 fb06 	bl	8001084 <read_single_icm20948_reg>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71fb      	strb	r3, [r7, #7]
	new_val |= 0x10;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f043 0310 	orr.w	r3, r3, #16
 8000a82:	71fb      	strb	r3, [r7, #7]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	461a      	mov	r2, r3
 8000a88:	2103      	movs	r1, #3
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 fb2a 	bl	80010e4 <write_single_icm20948_reg>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);	
}

void icm20948_clock_source(uint8_t source)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000aa2:	2106      	movs	r1, #6
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f000 faed 	bl	8001084 <read_single_icm20948_reg>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
	new_val |= source;
 8000aae:	7bfa      	ldrb	r2, [r7, #15]
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	2106      	movs	r1, #6
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fb11 	bl	80010e4 <write_single_icm20948_reg>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2109      	movs	r1, #9
 8000ad2:	2020      	movs	r0, #32
 8000ad4:	f000 fb06 	bl	80010e4 <write_single_icm20948_reg>
}
 8000ad8:	bf00      	nop
 8000ada:	bd80      	pop	{r7, pc}

08000adc <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2020      	movs	r0, #32
 8000aea:	f000 facb 	bl	8001084 <read_single_icm20948_reg>
 8000aee:	4603      	mov	r3, r0
 8000af0:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	00db      	lsls	r3, r3, #3
 8000af6:	b25a      	sxtb	r2, r3
 8000af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	b25b      	sxtb	r3, r3
 8000b00:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000b02:	7bfb      	ldrb	r3, [r7, #15]
 8000b04:	461a      	mov	r2, r3
 8000b06:	2101      	movs	r1, #1
 8000b08:	2020      	movs	r0, #32
 8000b0a:	f000 faeb 	bl	80010e4 <write_single_icm20948_reg>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b084      	sub	sp, #16
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000b20:	2114      	movs	r1, #20
 8000b22:	2020      	movs	r0, #32
 8000b24:	f000 faae 	bl	8001084 <read_single_icm20948_reg>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	73fb      	strb	r3, [r7, #15]
	new_val |= config << 3;
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	73fb      	strb	r3, [r7, #15]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	2101      	movs	r1, #1
 8000b42:	2020      	movs	r0, #32
 8000b44:	f000 face 	bl	80010e4 <write_single_icm20948_reg>
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2020      	movs	r0, #32
 8000b62:	f000 fabf 	bl	80010e4 <write_single_icm20948_reg>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b084      	sub	sp, #16
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	80fb      	strh	r3, [r7, #6]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000b78:	88fb      	ldrh	r3, [r7, #6]
 8000b7a:	0a1b      	lsrs	r3, r3, #8
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	73fb      	strb	r3, [r7, #15]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	f003 030f 	and.w	r3, r3, #15
 8000b88:	73bb      	strb	r3, [r7, #14]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2110      	movs	r1, #16
 8000b90:	2020      	movs	r0, #32
 8000b92:	f000 faa7 	bl	80010e4 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000b96:	7bbb      	ldrb	r3, [r7, #14]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	2111      	movs	r1, #17
 8000b9c:	2020      	movs	r0, #32
 8000b9e:	f000 faa1 	bl	80010e4 <write_single_icm20948_reg>
}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <icm20948_gyro_calibration>:
	write_single_ak09916_reg(MAG_CNTL2, mode);
	HAL_Delay(100);
}

void icm20948_gyro_calibration()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
	uint8_t gyro_offset[6] = {0};
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000bca:	e031      	b.n	8000c30 <icm20948_gyro_calibration+0x84>
	{
		icm20948_gyro_read(&temp);
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fe84 	bl	80008de <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	ee07 3a90 	vmov	s15, r3
 8000bdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8000be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bec:	ee17 3a90 	vmov	r3, s15
 8000bf0:	60fb      	str	r3, [r7, #12]
		gyro_bias[1] += temp.y;
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	ee07 3a90 	vmov	s15, r3
 8000bf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c08:	ee17 3a90 	vmov	r3, s15
 8000c0c:	613b      	str	r3, [r7, #16]
		gyro_bias[2] += temp.z;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	ee07 3a90 	vmov	s15, r3
 8000c14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c18:	edd7 7a08 	vldr	s15, [r7, #32]
 8000c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c24:	ee17 3a90 	vmov	r3, s15
 8000c28:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < 100; i++)
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	2b63      	cmp	r3, #99	; 0x63
 8000c34:	ddca      	ble.n	8000bcc <icm20948_gyro_calibration+0x20>
	}

	gyro_bias[0] /= 100;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4a29      	ldr	r2, [pc, #164]	; (8000ce0 <icm20948_gyro_calibration+0x134>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1152      	asrs	r2, r2, #5
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	60fb      	str	r3, [r7, #12]
	gyro_bias[1] /= 100;
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4a25      	ldr	r2, [pc, #148]	; (8000ce0 <icm20948_gyro_calibration+0x134>)
 8000c4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c4e:	1152      	asrs	r2, r2, #5
 8000c50:	17db      	asrs	r3, r3, #31
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	613b      	str	r3, [r7, #16]
	gyro_bias[2] /= 100;
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <icm20948_gyro_calibration+0x134>)
 8000c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5e:	1152      	asrs	r2, r2, #5
 8000c60:	17db      	asrs	r3, r3, #31
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF; 
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	425b      	negs	r3, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	da00      	bge.n	8000c70 <icm20948_gyro_calibration+0xc4>
 8000c6e:	3303      	adds	r3, #3
 8000c70:	109b      	asrs	r3, r3, #2
 8000c72:	121b      	asrs	r3, r3, #8
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	713b      	strb	r3, [r7, #4]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF; 
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	da00      	bge.n	8000c82 <icm20948_gyro_calibration+0xd6>
 8000c80:	3303      	adds	r3, #3
 8000c82:	109b      	asrs	r3, r3, #2
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	717b      	strb	r3, [r7, #5]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	425b      	negs	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da00      	bge.n	8000c92 <icm20948_gyro_calibration+0xe6>
 8000c90:	3303      	adds	r3, #3
 8000c92:	109b      	asrs	r3, r3, #2
 8000c94:	121b      	asrs	r3, r3, #8
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	71bb      	strb	r3, [r7, #6]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	425b      	negs	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da00      	bge.n	8000ca4 <icm20948_gyro_calibration+0xf8>
 8000ca2:	3303      	adds	r3, #3
 8000ca4:	109b      	asrs	r3, r3, #2
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	71fb      	strb	r3, [r7, #7]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	425b      	negs	r3, r3
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da00      	bge.n	8000cb4 <icm20948_gyro_calibration+0x108>
 8000cb2:	3303      	adds	r3, #3
 8000cb4:	109b      	asrs	r3, r3, #2
 8000cb6:	121b      	asrs	r3, r3, #8
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	723b      	strb	r3, [r7, #8]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	425b      	negs	r3, r3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da00      	bge.n	8000cc6 <icm20948_gyro_calibration+0x11a>
 8000cc4:	3303      	adds	r3, #3
 8000cc6:	109b      	asrs	r3, r3, #2
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8000ccc:	1d3a      	adds	r2, r7, #4
 8000cce:	2306      	movs	r3, #6
 8000cd0:	2103      	movs	r1, #3
 8000cd2:	2020      	movs	r0, #32
 8000cd4:	f000 fa5a 	bl	800118c <write_multiple_icm20948_reg>
}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	51eb851f 	.word	0x51eb851f

08000ce4 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b090      	sub	sp, #64	; 0x40
 8000ce8:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;
	
	int32_t accel_bias[3] = {0};
 8000cea:	f107 0318 	add.w	r3, r7, #24
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
	int32_t accel_bias_reg[3] = {0};
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
	uint8_t accel_offset[6] = {0};
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	2300      	movs	r3, #0
 8000d08:	813b      	strh	r3, [r7, #8]

	for(int i = 0; i < 100; i++)
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d0e:	e031      	b.n	8000d74 <icm20948_accel_calibration+0x90>
	{
		icm20948_accel_read(&temp);
 8000d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fe25 	bl	8000964 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d30:	ee17 3a90 	vmov	r3, s15
 8000d34:	61bb      	str	r3, [r7, #24]
		accel_bias[1] += temp.y;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	ee07 3a90 	vmov	s15, r3
 8000d3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4c:	ee17 3a90 	vmov	r3, s15
 8000d50:	61fb      	str	r3, [r7, #28]
		accel_bias[2] += temp.z;
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	ee07 3a90 	vmov	s15, r3
 8000d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8000d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d68:	ee17 3a90 	vmov	r3, s15
 8000d6c:	623b      	str	r3, [r7, #32]
	for(int i = 0; i < 100; i++)
 8000d6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d70:	3301      	adds	r3, #1
 8000d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d76:	2b63      	cmp	r3, #99	; 0x63
 8000d78:	ddca      	ble.n	8000d10 <icm20948_accel_calibration+0x2c>
	}

	accel_bias[0] /= 100;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4a5e      	ldr	r2, [pc, #376]	; (8000ef8 <icm20948_accel_calibration+0x214>)
 8000d7e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d82:	1152      	asrs	r2, r2, #5
 8000d84:	17db      	asrs	r3, r3, #31
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	61bb      	str	r3, [r7, #24]
	accel_bias[1] /= 100;
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	4a5a      	ldr	r2, [pc, #360]	; (8000ef8 <icm20948_accel_calibration+0x214>)
 8000d8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000d92:	1152      	asrs	r2, r2, #5
 8000d94:	17db      	asrs	r3, r3, #31
 8000d96:	1ad3      	subs	r3, r2, r3
 8000d98:	61fb      	str	r3, [r7, #28]
	accel_bias[2] /= 100;
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	4a56      	ldr	r2, [pc, #344]	; (8000ef8 <icm20948_accel_calibration+0x214>)
 8000d9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000da2:	1152      	asrs	r2, r2, #5
 8000da4:	17db      	asrs	r3, r3, #31
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	623b      	str	r3, [r7, #32]

	uint8_t mask_bit[3] = {0, 0, 0};
 8000daa:	4a54      	ldr	r2, [pc, #336]	; (8000efc <icm20948_accel_calibration+0x218>)
 8000dac:	463b      	mov	r3, r7
 8000dae:	6812      	ldr	r2, [r2, #0]
 8000db0:	4611      	mov	r1, r2
 8000db2:	8019      	strh	r1, [r3, #0]
 8000db4:	3302      	adds	r3, #2
 8000db6:	0c12      	lsrs	r2, r2, #16
 8000db8:	701a      	strb	r2, [r3, #0]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 8000dba:	2202      	movs	r2, #2
 8000dbc:	2114      	movs	r1, #20
 8000dbe:	2010      	movs	r0, #16
 8000dc0:	f000 f9b4 	bl	800112c <read_multiple_icm20948_reg>
 8000dc4:	63b8      	str	r0, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 8000dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000dce:	3201      	adds	r2, #1
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
	mask_bit[0] = temp2[1] & 0x01;
 8000dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dd8:	3301      	adds	r3, #1
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	703b      	strb	r3, [r7, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8000de4:	2202      	movs	r2, #2
 8000de6:	2117      	movs	r1, #23
 8000de8:	2010      	movs	r0, #16
 8000dea:	f000 f99f 	bl	800112c <read_multiple_icm20948_reg>
 8000dee:	6378      	str	r0, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 8000df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	021b      	lsls	r3, r3, #8
 8000df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000df8:	3201      	adds	r2, #1
 8000dfa:	7812      	ldrb	r2, [r2, #0]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
	mask_bit[1] = temp3[1] & 0x01;
 8000e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e02:	3301      	adds	r3, #1
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	707b      	strb	r3, [r7, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8000e0e:	2202      	movs	r2, #2
 8000e10:	211a      	movs	r1, #26
 8000e12:	2010      	movs	r0, #16
 8000e14:	f000 f98a 	bl	800112c <read_multiple_icm20948_reg>
 8000e18:	6338      	str	r0, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8000e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e22:	3201      	adds	r2, #1
 8000e24:	7812      	ldrb	r2, [r2, #0]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	617b      	str	r3, [r7, #20]
	mask_bit[2] = temp4[1] & 0x01;
 8000e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	70bb      	strb	r3, [r7, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da00      	bge.n	8000e42 <icm20948_accel_calibration+0x15e>
 8000e40:	3307      	adds	r3, #7
 8000e42:	10db      	asrs	r3, r3, #3
 8000e44:	425b      	negs	r3, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	da00      	bge.n	8000e54 <icm20948_accel_calibration+0x170>
 8000e52:	3307      	adds	r3, #7
 8000e54:	10db      	asrs	r3, r3, #3
 8000e56:	425b      	negs	r3, r3
 8000e58:	4413      	add	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	da00      	bge.n	8000e66 <icm20948_accel_calibration+0x182>
 8000e64:	3307      	adds	r3, #7
 8000e66:	10db      	asrs	r3, r3, #3
 8000e68:	425b      	negs	r3, r3
 8000e6a:	4413      	add	r3, r2
 8000e6c:	617b      	str	r3, [r7, #20]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	121b      	asrs	r3, r3, #8
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	713b      	strb	r3, [r7, #4]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	717b      	strb	r3, [r7, #5]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 8000e82:	797a      	ldrb	r2, [r7, #5]
 8000e84:	783b      	ldrb	r3, [r7, #0]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	717b      	strb	r3, [r7, #5]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	121b      	asrs	r3, r3, #8
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	71bb      	strb	r3, [r7, #6]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	71fb      	strb	r3, [r7, #7]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 8000ea0:	79fa      	ldrb	r2, [r7, #7]
 8000ea2:	787b      	ldrb	r3, [r7, #1]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	71fb      	strb	r3, [r7, #7]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	121b      	asrs	r3, r3, #8
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	723b      	strb	r3, [r7, #8]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f023 0301 	bic.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	727b      	strb	r3, [r7, #9]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 8000ebe:	7a7a      	ldrb	r2, [r7, #9]
 8000ec0:	78bb      	ldrb	r3, [r7, #2]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	727b      	strb	r3, [r7, #9]
	
	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 8000ec8:	1d3a      	adds	r2, r7, #4
 8000eca:	2302      	movs	r3, #2
 8000ecc:	2114      	movs	r1, #20
 8000ece:	2010      	movs	r0, #16
 8000ed0:	f000 f95c 	bl	800118c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	1c9a      	adds	r2, r3, #2
 8000ed8:	2302      	movs	r3, #2
 8000eda:	2117      	movs	r1, #23
 8000edc:	2010      	movs	r0, #16
 8000ede:	f000 f955 	bl	800118c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	1d1a      	adds	r2, r3, #4
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	211a      	movs	r1, #26
 8000eea:	2010      	movs	r0, #16
 8000eec:	f000 f94e 	bl	800118c <write_multiple_icm20948_reg>
}
 8000ef0:	bf00      	nop
 8000ef2:	3740      	adds	r7, #64	; 0x40
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	51eb851f 	.word	0x51eb851f
 8000efc:	0800ad0c 	.word	0x0800ad0c

08000f00 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 f8b9 	bl	8001084 <read_single_icm20948_reg>
 8000f12:	4603      	mov	r3, r0
 8000f14:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d827      	bhi.n	8000f6c <icm20948_gyro_full_scale_select+0x6c>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <icm20948_gyro_full_scale_select+0x24>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f35 	.word	0x08000f35
 8000f28:	08000f3d 	.word	0x08000f3d
 8000f2c:	08000f4d 	.word	0x08000f4d
 8000f30:	08000f5d 	.word	0x08000f5d
	{
		case _250dps :
			new_val |= 0x00;
			gyro_scale_factor = 131.0;
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <icm20948_gyro_full_scale_select+0x80>)
 8000f36:	4a13      	ldr	r2, [pc, #76]	; (8000f84 <icm20948_gyro_full_scale_select+0x84>)
 8000f38:	601a      	str	r2, [r3, #0]
			break;
 8000f3a:	e017      	b.n	8000f6c <icm20948_gyro_full_scale_select+0x6c>
		case _500dps :
			new_val |= 0x02;
 8000f3c:	7bfb      	ldrb	r3, [r7, #15]
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 65.5;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <icm20948_gyro_full_scale_select+0x80>)
 8000f46:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <icm20948_gyro_full_scale_select+0x88>)
 8000f48:	601a      	str	r2, [r3, #0]
			break;
 8000f4a:	e00f      	b.n	8000f6c <icm20948_gyro_full_scale_select+0x6c>
		case _1000dps :
			new_val |= 0x04;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 32.8;
 8000f54:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <icm20948_gyro_full_scale_select+0x80>)
 8000f56:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <icm20948_gyro_full_scale_select+0x8c>)
 8000f58:	601a      	str	r2, [r3, #0]
			break;
 8000f5a:	e007      	b.n	8000f6c <icm20948_gyro_full_scale_select+0x6c>
		case _2000dps :
			new_val |= 0x06;
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	f043 0306 	orr.w	r3, r3, #6
 8000f62:	73fb      	strb	r3, [r7, #15]
			gyro_scale_factor = 16.4;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <icm20948_gyro_full_scale_select+0x80>)
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <icm20948_gyro_full_scale_select+0x90>)
 8000f68:	601a      	str	r2, [r3, #0]
			break;
 8000f6a:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	2101      	movs	r1, #1
 8000f72:	2020      	movs	r0, #32
 8000f74:	f000 f8b6 	bl	80010e4 <write_single_icm20948_reg>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	240004a0 	.word	0x240004a0
 8000f84:	43030000 	.word	0x43030000
 8000f88:	42830000 	.word	0x42830000
 8000f8c:	42033333 	.word	0x42033333
 8000f90:	41833333 	.word	0x41833333

08000f94 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000f9e:	2114      	movs	r1, #20
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f000 f86f 	bl	8001084 <read_single_icm20948_reg>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
	
	switch(full_scale)
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d82b      	bhi.n	8001008 <icm20948_accel_full_scale_select+0x74>
 8000fb0:	a201      	add	r2, pc, #4	; (adr r2, 8000fb8 <icm20948_accel_full_scale_select+0x24>)
 8000fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fb6:	bf00      	nop
 8000fb8:	08000fc9 	.word	0x08000fc9
 8000fbc:	08000fd3 	.word	0x08000fd3
 8000fc0:	08000fe5 	.word	0x08000fe5
 8000fc4:	08000ff7 	.word	0x08000ff7
	{
		case _2g :
			new_val |= 0x00;
			accel_scale_factor = 16384;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <icm20948_accel_full_scale_select+0x88>)
 8000fca:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8000fce:	601a      	str	r2, [r3, #0]
			break;
 8000fd0:	e01a      	b.n	8001008 <icm20948_accel_full_scale_select+0x74>
		case _4g :
			new_val |= 0x02;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 8192;
 8000fda:	4b10      	ldr	r3, [pc, #64]	; (800101c <icm20948_accel_full_scale_select+0x88>)
 8000fdc:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8000fe0:	601a      	str	r2, [r3, #0]
			break;
 8000fe2:	e011      	b.n	8001008 <icm20948_accel_full_scale_select+0x74>
		case _8g :
			new_val |= 0x04;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 0304 	orr.w	r3, r3, #4
 8000fea:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 4096;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <icm20948_accel_full_scale_select+0x88>)
 8000fee:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8000ff2:	601a      	str	r2, [r3, #0]
			break;
 8000ff4:	e008      	b.n	8001008 <icm20948_accel_full_scale_select+0x74>
		case _16g :
			new_val |= 0x06;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	f043 0306 	orr.w	r3, r3, #6
 8000ffc:	73fb      	strb	r3, [r7, #15]
			accel_scale_factor = 2048;
 8000ffe:	4b07      	ldr	r3, [pc, #28]	; (800101c <icm20948_accel_full_scale_select+0x88>)
 8001000:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8001004:	601a      	str	r2, [r3, #0]
			break;
 8001006:	bf00      	nop
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	461a      	mov	r2, r3
 800100c:	2114      	movs	r1, #20
 800100e:	2020      	movs	r0, #32
 8001010:	f000 f868 	bl	80010e4 <write_single_icm20948_reg>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	240004a4 	.word	0x240004a4

08001020 <cs_high>:


/* Static Functions */
static void cs_high()
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);	
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800102a:	4802      	ldr	r0, [pc, #8]	; (8001034 <cs_high+0x14>)
 800102c:	f000 ffd2 	bl	8001fd4 <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	58020400 	.word	0x58020400

08001038 <cs_low>:

static void cs_low()
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001042:	4802      	ldr	r0, [pc, #8]	; (800104c <cs_low+0x14>)
 8001044:	f000 ffc6 	bl	8001fd4 <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	58020400 	.word	0x58020400

08001050 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 800105a:	237f      	movs	r3, #127	; 0x7f
 800105c:	733b      	strb	r3, [r7, #12]
	write_reg[1] = ub;
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	737b      	strb	r3, [r7, #13]

	cs_low();
 8001062:	f7ff ffe9 	bl	8001038 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8001066:	f107 010c 	add.w	r1, r7, #12
 800106a:	230a      	movs	r3, #10
 800106c:	2202      	movs	r2, #2
 800106e:	4804      	ldr	r0, [pc, #16]	; (8001080 <select_user_bank+0x30>)
 8001070:	f003 fe70 	bl	8004d54 <HAL_SPI_Transmit>
	cs_high();
 8001074:	f7ff ffd4 	bl	8001020 <cs_high>
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	240004b0 	.word	0x240004b0

08001084 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	460a      	mov	r2, r1
 800108e:	71fb      	strb	r3, [r7, #7]
 8001090:	4613      	mov	r3, r2
 8001092:	71bb      	strb	r3, [r7, #6]
	uint8_t read_reg = READ | reg;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800109a:	b2db      	uxtb	r3, r3
 800109c:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_val = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	73bb      	strb	r3, [r7, #14]
	select_user_bank(ub);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ffd3 	bl	8001050 <select_user_bank>

	cs_low();
 80010aa:	f7ff ffc5 	bl	8001038 <cs_low>

	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 100000);
 80010ae:	f107 010f 	add.w	r1, r7, #15
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <read_single_icm20948_reg+0x58>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <read_single_icm20948_reg+0x5c>)
 80010b8:	f003 fe4c 	bl	8004d54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 80010bc:	f107 010e 	add.w	r1, r7, #14
 80010c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c4:	2201      	movs	r2, #1
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <read_single_icm20948_reg+0x5c>)
 80010c8:	f004 f840 	bl	800514c <HAL_SPI_Receive>

//	HAL_SPI_TransmitReceive(ICM20948_SPI, &read_reg, &reg_val, 1, HAL_MAX_DELAY);

	cs_high();
 80010cc:	f7ff ffa8 	bl	8001020 <cs_high>

	return reg_val;
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	000186a0 	.word	0x000186a0
 80010e0:	240004b0 	.word	0x240004b0

080010e4 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	460b      	mov	r3, r1
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	4613      	mov	r3, r2
 80010f4:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80010f6:	79bb      	ldrb	r3, [r7, #6]
 80010f8:	733b      	strb	r3, [r7, #12]
	write_reg[1] = val;
 80010fa:	797b      	ldrb	r3, [r7, #5]
 80010fc:	737b      	strb	r3, [r7, #13]

	select_user_bank(ub);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff ffa5 	bl	8001050 <select_user_bank>

	cs_low();
 8001106:	f7ff ff97 	bl	8001038 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800110a:	f107 010c 	add.w	r1, r7, #12
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	2202      	movs	r2, #2
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <write_single_icm20948_reg+0x44>)
 8001116:	f003 fe1d 	bl	8004d54 <HAL_SPI_Transmit>
	cs_high();
 800111a:	f7ff ff81 	bl	8001020 <cs_high>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	240004b0 	.word	0x240004b0

0800112c <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	460b      	mov	r3, r1
 8001138:	71bb      	strb	r3, [r7, #6]
 800113a:	4613      	mov	r3, r2
 800113c:	717b      	strb	r3, [r7, #5]
	uint8_t read_reg = READ | reg;
 800113e:	79bb      	ldrb	r3, [r7, #6]
 8001140:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001144:	b2db      	uxtb	r3, r3
 8001146:	73fb      	strb	r3, [r7, #15]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff80 	bl	8001050 <select_user_bank>

	cs_low();
 8001150:	f7ff ff72 	bl	8001038 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8001154:	f107 010f 	add.w	r1, r7, #15
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	2201      	movs	r2, #1
 800115e:	4809      	ldr	r0, [pc, #36]	; (8001184 <read_multiple_icm20948_reg+0x58>)
 8001160:	f003 fdf8 	bl	8004d54 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 8001164:	797b      	ldrb	r3, [r7, #5]
 8001166:	b29a      	uxth	r2, r3
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	4906      	ldr	r1, [pc, #24]	; (8001188 <read_multiple_icm20948_reg+0x5c>)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <read_multiple_icm20948_reg+0x58>)
 8001170:	f003 ffec 	bl	800514c <HAL_SPI_Receive>
	cs_high();
 8001174:	f7ff ff54 	bl	8001020 <cs_high>

	return reg_val;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <read_multiple_icm20948_reg+0x5c>)
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	240004b0 	.word	0x240004b0
 8001188:	240004a8 	.word	0x240004a8

0800118c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	603a      	str	r2, [r7, #0]
 8001194:	461a      	mov	r2, r3
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
 800119a:	460b      	mov	r3, r1
 800119c:	71bb      	strb	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]
	uint8_t write_reg = WRITE | reg;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	73fb      	strb	r3, [r7, #15]
	select_user_bank(ub);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff51 	bl	8001050 <select_user_bank>

	cs_low();
 80011ae:	f7ff ff43 	bl	8001038 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 80011b2:	f107 010f 	add.w	r1, r7, #15
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	2201      	movs	r2, #1
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <write_multiple_icm20948_reg+0x54>)
 80011be:	f003 fdc9 	bl	8004d54 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	6839      	ldr	r1, [r7, #0]
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <write_multiple_icm20948_reg+0x54>)
 80011ce:	f003 fdc1 	bl	8004d54 <HAL_SPI_Transmit>
	cs_high();
 80011d2:	f7ff ff25 	bl	8001020 <cs_high>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	240004b0 	.word	0x240004b0

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f000 fbb2 	bl	8001950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f80c 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f7ff fafe 	bl	80007f0 <MX_GPIO_Init>
  MX_SPI2_Init();
 80011f4:	f000 f87c 	bl	80012f0 <MX_SPI2_Init>
  MX_UART5_Init();
 80011f8:	f000 facc 	bl	8001794 <MX_UART5_Init>
//  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80011fc:	f7ff fa78 	bl	80006f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001200:	f005 fc9e 	bl	8006b40 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // OS takes over
  // this while is never reached
  while (1)
 8001204:	e7fe      	b.n	8001204 <main+0x20>
	...

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b09c      	sub	sp, #112	; 0x70
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001212:	224c      	movs	r2, #76	; 0x4c
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f007 fc71 	bl	8008afe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2220      	movs	r2, #32
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f007 fc6b 	bl	8008afe <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001228:	2002      	movs	r0, #2
 800122a:	f000 feed 	bl	8002008 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <SystemClock_Config+0xd8>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <SystemClock_Config+0xd8>)
 8001238:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800123c:	6193      	str	r3, [r2, #24]
 800123e:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <SystemClock_Config+0xd8>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800124a:	bf00      	nop
 800124c:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <SystemClock_Config+0xd8>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001254:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001258:	d1f8      	bne.n	800124c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800125a:	2301      	movs	r3, #1
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800125e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001268:	2302      	movs	r3, #2
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8001270:	2322      	movs	r3, #34	; 0x22
 8001272:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001278:	2303      	movs	r3, #3
 800127a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001280:	230c      	movs	r3, #12
 8001282:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001284:	2300      	movs	r3, #0
 8001286:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4618      	mov	r0, r3
 8001292:	f000 ff13 	bl	80020bc <HAL_RCC_OscConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800129c:	f000 f822 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a0:	233f      	movs	r3, #63	; 0x3f
 80012a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a4:	2303      	movs	r3, #3
 80012a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012ac:	2308      	movs	r3, #8
 80012ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012b0:	2340      	movs	r3, #64	; 0x40
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012be:	2340      	movs	r3, #64	; 0x40
 80012c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2103      	movs	r1, #3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f001 fad2 	bl	8002870 <HAL_RCC_ClockConfig>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80012d2:	f000 f807 	bl	80012e4 <Error_Handler>
  }
}
 80012d6:	bf00      	nop
 80012d8:	3770      	adds	r7, #112	; 0x70
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024800 	.word	0x58024800

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <MX_SPI2_Init+0xac>)
 80012f6:	4a2a      	ldr	r2, [pc, #168]	; (80013a0 <MX_SPI2_Init+0xb0>)
 80012f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012fa:	4b28      	ldr	r3, [pc, #160]	; (800139c <MX_SPI2_Init+0xac>)
 80012fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001300:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_SPI2_Init+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <MX_SPI2_Init+0xac>)
 800130a:	2207      	movs	r2, #7
 800130c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_SPI2_Init+0xac>)
 8001310:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001314:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_SPI2_Init+0xac>)
 8001318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800131c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_SPI2_Init+0xac>)
 8001320:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001324:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001326:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_SPI2_Init+0xac>)
 8001328:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800132c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_SPI2_Init+0xac>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_SPI2_Init+0xac>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_SPI2_Init+0xac>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_SPI2_Init+0xac>)
 8001342:	2200      	movs	r2, #0
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_SPI2_Init+0xac>)
 8001348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_SPI2_Init+0xac>)
 8001350:	2200      	movs	r2, #0
 8001352:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_SPI2_Init+0xac>)
 8001356:	2200      	movs	r2, #0
 8001358:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <MX_SPI2_Init+0xac>)
 800135c:	2200      	movs	r2, #0
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001360:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_SPI2_Init+0xac>)
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <MX_SPI2_Init+0xac>)
 8001368:	2200      	movs	r2, #0
 800136a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <MX_SPI2_Init+0xac>)
 800136e:	2200      	movs	r2, #0
 8001370:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_SPI2_Init+0xac>)
 8001374:	2200      	movs	r2, #0
 8001376:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <MX_SPI2_Init+0xac>)
 800137a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800137e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_SPI2_Init+0xac>)
 8001382:	2200      	movs	r2, #0
 8001384:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_SPI2_Init+0xac>)
 8001388:	f003 fbc0 	bl	8004b0c <HAL_SPI_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_SPI2_Init+0xa6>
  {
    Error_Handler();
 8001392:	f7ff ffa7 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	240004b0 	.word	0x240004b0
 80013a0:	40003800 	.word	0x40003800

080013a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b8      	sub	sp, #224	; 0xe0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	22b8      	movs	r2, #184	; 0xb8
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f007 fb9a 	bl	8008afe <memset>
  if(spiHandle->Instance==SPI2)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a2f      	ldr	r2, [pc, #188]	; (800148c <HAL_SPI_MspInit+0xe8>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d156      	bne.n	8001482 <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80013d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80013e4:	230c      	movs	r3, #12
 80013e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013f4:	23c0      	movs	r3, #192	; 0xc0
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001404:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001406:	f107 0310 	add.w	r3, r7, #16
 800140a:	4618      	mov	r0, r3
 800140c:	f001 fdbc 	bl	8002f88 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_SPI_MspInit+0x76>
    {
      Error_Handler();
 8001416:	f7ff ff65 	bl	80012e4 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800141a:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_SPI_MspInit+0xec>)
 800141c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001420:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <HAL_SPI_MspInit+0xec>)
 8001422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001426:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_SPI_MspInit+0xec>)
 800142c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_SPI_MspInit+0xec>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <HAL_SPI_MspInit+0xec>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_SPI_MspInit+0xec>)
 800144a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60bb      	str	r3, [r7, #8]
 8001454:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001456:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800145a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001470:	2305      	movs	r3, #5
 8001472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_SPI_MspInit+0xf0>)
 800147e:	f000 fc01 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	37e0      	adds	r7, #224	; 0xe0
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40003800 	.word	0x40003800
 8001490:	58024400 	.word	0x58024400
 8001494:	58020400 	.word	0x58020400

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_MspInit+0x38>)
 80014a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014a4:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <HAL_MspInit+0x38>)
 80014a6:	f043 0302 	orr.w	r3, r3, #2
 80014aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_MspInit+0x38>)
 80014b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	210f      	movs	r1, #15
 80014c0:	f06f 0001 	mvn.w	r0, #1
 80014c4:	f000 fbb7 	bl	8001c36 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	58024400 	.word	0x58024400

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <NMI_Handler+0x4>

080014da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014de:	e7fe      	b.n	80014de <HardFault_Handler+0x4>

080014e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler+0x4>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ea:	e7fe      	b.n	80014ea <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	e7fe      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001504:	f000 fa96 	bl	8001a34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001508:	f006 f91c 	bl	8007744 <xTaskGetSchedulerState>
 800150c:	4603      	mov	r3, r0
 800150e:	2b01      	cmp	r3, #1
 8001510:	d001      	beq.n	8001516 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001512:	f006 fb59 	bl	8007bc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}

0800151a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151a:	b480      	push	{r7}
 800151c:	af00      	add	r7, sp, #0
  return 1;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_kill>:

int _kill(int pid, int sig)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001534:	f007 fb8c 	bl	8008c50 <__errno>
 8001538:	4603      	mov	r3, r0
 800153a:	2216      	movs	r2, #22
 800153c:	601a      	str	r2, [r3, #0]
  return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_exit>:

void _exit (int status)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001552:	f04f 31ff 	mov.w	r1, #4294967295
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffe7 	bl	800152a <_kill>
  while (1) {}    /* Make sure we hang here */
 800155c:	e7fe      	b.n	800155c <_exit+0x12>

0800155e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e00a      	b.n	8001586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001570:	f3af 8000 	nop.w
 8001574:	4601      	mov	r1, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	60ba      	str	r2, [r7, #8]
 800157c:	b2ca      	uxtb	r2, r1
 800157e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	dbf0      	blt.n	8001570 <_read+0x12>
  }

  return len;
 800158e:	687b      	ldr	r3, [r7, #4]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e009      	b.n	80015be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	60ba      	str	r2, [r7, #8]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	3301      	adds	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dbf1      	blt.n	80015aa <_write+0x12>
  }
  return len;
 80015c6:	687b      	ldr	r3, [r7, #4]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <_close>:

int _close(int file)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015f8:	605a      	str	r2, [r3, #4]
  return 0;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_isatty>:

int _isatty(int file)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001610:	2301      	movs	r3, #1
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <_sbrk+0x5c>)
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <_sbrk+0x60>)
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800164c:	4b13      	ldr	r3, [pc, #76]	; (800169c <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001654:	4b11      	ldr	r3, [pc, #68]	; (800169c <_sbrk+0x64>)
 8001656:	4a12      	ldr	r2, [pc, #72]	; (80016a0 <_sbrk+0x68>)
 8001658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <_sbrk+0x64>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4413      	add	r3, r2
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d207      	bcs.n	8001678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001668:	f007 faf2 	bl	8008c50 <__errno>
 800166c:	4603      	mov	r3, r0
 800166e:	220c      	movs	r2, #12
 8001670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001672:	f04f 33ff 	mov.w	r3, #4294967295
 8001676:	e009      	b.n	800168c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001678:	4b08      	ldr	r3, [pc, #32]	; (800169c <_sbrk+0x64>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800167e:	4b07      	ldr	r3, [pc, #28]	; (800169c <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <_sbrk+0x64>)
 8001688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168a:	68fb      	ldr	r3, [r7, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	24050000 	.word	0x24050000
 8001698:	00000400 	.word	0x00000400
 800169c:	24000538 	.word	0x24000538
 80016a0:	24004478 	.word	0x24004478

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016a8:	4b32      	ldr	r3, [pc, #200]	; (8001774 <SystemInit+0xd0>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ae:	4a31      	ldr	r2, [pc, #196]	; (8001774 <SystemInit+0xd0>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016b8:	4b2f      	ldr	r3, [pc, #188]	; (8001778 <SystemInit+0xd4>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 030f 	and.w	r3, r3, #15
 80016c0:	2b06      	cmp	r3, #6
 80016c2:	d807      	bhi.n	80016d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <SystemInit+0xd4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 030f 	bic.w	r3, r3, #15
 80016cc:	4a2a      	ldr	r2, [pc, #168]	; (8001778 <SystemInit+0xd4>)
 80016ce:	f043 0307 	orr.w	r3, r3, #7
 80016d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80016d4:	4b29      	ldr	r3, [pc, #164]	; (800177c <SystemInit+0xd8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <SystemInit+0xd8>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <SystemInit+0xd8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80016e6:	4b25      	ldr	r3, [pc, #148]	; (800177c <SystemInit+0xd8>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4924      	ldr	r1, [pc, #144]	; (800177c <SystemInit+0xd8>)
 80016ec:	4b24      	ldr	r3, [pc, #144]	; (8001780 <SystemInit+0xdc>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <SystemInit+0xd4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016fe:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <SystemInit+0xd4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f023 030f 	bic.w	r3, r3, #15
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <SystemInit+0xd4>)
 8001708:	f043 0307 	orr.w	r3, r3, #7
 800170c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800170e:	4b1b      	ldr	r3, [pc, #108]	; (800177c <SystemInit+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <SystemInit+0xd8>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <SystemInit+0xd8>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <SystemInit+0xd8>)
 8001722:	4a18      	ldr	r2, [pc, #96]	; (8001784 <SystemInit+0xe0>)
 8001724:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001726:	4b15      	ldr	r3, [pc, #84]	; (800177c <SystemInit+0xd8>)
 8001728:	4a17      	ldr	r2, [pc, #92]	; (8001788 <SystemInit+0xe4>)
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <SystemInit+0xd8>)
 800172e:	4a17      	ldr	r2, [pc, #92]	; (800178c <SystemInit+0xe8>)
 8001730:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001732:	4b12      	ldr	r3, [pc, #72]	; (800177c <SystemInit+0xd8>)
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <SystemInit+0xd8>)
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <SystemInit+0xe8>)
 800173c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <SystemInit+0xd8>)
 8001740:	2200      	movs	r2, #0
 8001742:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <SystemInit+0xd8>)
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <SystemInit+0xe8>)
 8001748:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <SystemInit+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <SystemInit+0xd8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a09      	ldr	r2, [pc, #36]	; (800177c <SystemInit+0xd8>)
 8001756:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <SystemInit+0xd8>)
 800175e:	2200      	movs	r2, #0
 8001760:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <SystemInit+0xec>)
 8001764:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001768:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00
 8001778:	52002000 	.word	0x52002000
 800177c:	58024400 	.word	0x58024400
 8001780:	eaf6ed7f 	.word	0xeaf6ed7f
 8001784:	02020200 	.word	0x02020200
 8001788:	01ff0000 	.word	0x01ff0000
 800178c:	01010280 	.word	0x01010280
 8001790:	52004000 	.word	0x52004000

08001794 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <MX_UART5_Init+0x90>)
 800179a:	4a23      	ldr	r2, [pc, #140]	; (8001828 <MX_UART5_Init+0x94>)
 800179c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <MX_UART5_Init+0x90>)
 80017a0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <MX_UART5_Init+0x90>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <MX_UART5_Init+0x90>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <MX_UART5_Init+0x90>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <MX_UART5_Init+0x90>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b19      	ldr	r3, [pc, #100]	; (8001824 <MX_UART5_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <MX_UART5_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <MX_UART5_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <MX_UART5_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_UART5_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <MX_UART5_Init+0x90>)
 80017de:	f003 ff2e 	bl	800563e <HAL_UART_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80017e8:	f7ff fd7c 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ec:	2100      	movs	r1, #0
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_UART5_Init+0x90>)
 80017f0:	f005 f8c3 	bl	800697a <HAL_UARTEx_SetTxFifoThreshold>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80017fa:	f7ff fd73 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	4808      	ldr	r0, [pc, #32]	; (8001824 <MX_UART5_Init+0x90>)
 8001802:	f005 f8f8 	bl	80069f6 <HAL_UARTEx_SetRxFifoThreshold>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800180c:	f7ff fd6a 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <MX_UART5_Init+0x90>)
 8001812:	f005 f879 	bl	8006908 <HAL_UARTEx_DisableFifoMode>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800181c:	f7ff fd62 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001820:	bf00      	nop
 8001822:	bd80      	pop	{r7, pc}
 8001824:	2400053c 	.word	0x2400053c
 8001828:	40005000 	.word	0x40005000

0800182c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0b8      	sub	sp, #224	; 0xe0
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0310 	add.w	r3, r7, #16
 8001848:	22b8      	movs	r2, #184	; 0xb8
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f007 f956 	bl	8008afe <memset>
  if(uartHandle->Instance==UART5)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a26      	ldr	r2, [pc, #152]	; (80018f0 <HAL_UART_MspInit+0xc4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d145      	bne.n	80018e8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800185c:	f04f 0202 	mov.w	r2, #2
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001868:	2300      	movs	r3, #0
 800186a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fb88 	bl	8002f88 <HAL_RCCEx_PeriphCLKConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800187e:	f7ff fd31 	bl	80012e4 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <HAL_UART_MspInit+0xc8>)
 8001884:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001888:	4a1a      	ldr	r2, [pc, #104]	; (80018f4 <HAL_UART_MspInit+0xc8>)
 800188a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800188e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_UART_MspInit+0xc8>)
 8001894:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <HAL_UART_MspInit+0xc8>)
 80018a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <HAL_UART_MspInit+0xc8>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <HAL_UART_MspInit+0xc8>)
 80018b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PB5     ------> UART5_RX
    PB6     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80018be:	2360      	movs	r3, #96	; 0x60
 80018c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80018d6:	230e      	movs	r3, #14
 80018d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e0:	4619      	mov	r1, r3
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <HAL_UART_MspInit+0xcc>)
 80018e4:	f000 f9ce 	bl	8001c84 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80018e8:	bf00      	nop
 80018ea:	37e0      	adds	r7, #224	; 0xe0
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40005000 	.word	0x40005000
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58020400 	.word	0x58020400

080018fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001934 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001900:	f7ff fed0 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001904:	480c      	ldr	r0, [pc, #48]	; (8001938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001906:	490d      	ldr	r1, [pc, #52]	; (800193c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001908:	4a0d      	ldr	r2, [pc, #52]	; (8001940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800190c:	e002      	b.n	8001914 <LoopCopyDataInit>

0800190e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001912:	3304      	adds	r3, #4

08001914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001918:	d3f9      	bcc.n	800190e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800191a:	4a0a      	ldr	r2, [pc, #40]	; (8001944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800191c:	4c0a      	ldr	r4, [pc, #40]	; (8001948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001920:	e001      	b.n	8001926 <LoopFillZerobss>

08001922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001924:	3204      	adds	r2, #4

08001926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001928:	d3fb      	bcc.n	8001922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800192a:	f007 f997 	bl	8008c5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800192e:	f7ff fc59 	bl	80011e4 <main>
  bx  lr
 8001932:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001938:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800193c:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 8001940:	0800b0d4 	.word	0x0800b0d4
  ldr r2, =_sbss
 8001944:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 8001948:	24004474 	.word	0x24004474

0800194c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800194c:	e7fe      	b.n	800194c <ADC3_IRQHandler>
	...

08001950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001956:	2003      	movs	r0, #3
 8001958:	f000 f962 	bl	8001c20 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800195c:	f001 f93e 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8001960:	4602      	mov	r2, r0
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_Init+0x68>)
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	0a1b      	lsrs	r3, r3, #8
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	4913      	ldr	r1, [pc, #76]	; (80019bc <HAL_Init+0x6c>)
 800196e:	5ccb      	ldrb	r3, [r1, r3]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	fa22 f303 	lsr.w	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <HAL_Init+0x68>)
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	4a0e      	ldr	r2, [pc, #56]	; (80019bc <HAL_Init+0x6c>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	f003 031f 	and.w	r3, r3, #31
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_Init+0x70>)
 8001992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_Init+0x74>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800199a:	200f      	movs	r0, #15
 800199c:	f000 f814 	bl	80019c8 <HAL_InitTick>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e002      	b.n	80019b0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80019aa:	f7ff fd75 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	58024400 	.word	0x58024400
 80019bc:	0800ad18 	.word	0x0800ad18
 80019c0:	24000004 	.word	0x24000004
 80019c4:	24000000 	.word	0x24000000

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <HAL_InitTick+0x60>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e021      	b.n	8001a20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_InitTick+0x64>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_InitTick+0x60>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f939 	bl	8001c6a <HAL_SYSTICK_Config>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e00e      	b.n	8001a20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	d80a      	bhi.n	8001a1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a10:	f000 f911 	bl	8001c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a14:	4a06      	ldr	r2, [pc, #24]	; (8001a30 <HAL_InitTick+0x68>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e000      	b.n	8001a20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	2400000c 	.word	0x2400000c
 8001a2c:	24000000 	.word	0x24000000
 8001a30:	24000008 	.word	0x24000008

08001a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_IncTick+0x20>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_IncTick+0x24>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4413      	add	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_IncTick+0x24>)
 8001a46:	6013      	str	r3, [r2, #0]
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2400000c 	.word	0x2400000c
 8001a58:	240005d0 	.word	0x240005d0

08001a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_GetTick+0x14>)
 8001a62:	681b      	ldr	r3, [r3, #0]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	240005d0 	.word	0x240005d0

08001a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a7c:	f7ff ffee 	bl	8001a5c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8c:	d005      	beq.n	8001a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <HAL_Delay+0x44>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4413      	add	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a9a:	bf00      	nop
 8001a9c:	f7ff ffde 	bl	8001a5c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d8f7      	bhi.n	8001a9c <HAL_Delay+0x28>
  {
  }
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2400000c 	.word	0x2400000c

08001abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad2:	68ba      	ldr	r2, [r7, #8]
 8001ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aea:	4a04      	ldr	r2, [pc, #16]	; (8001afc <__NVIC_SetPriorityGrouping+0x40>)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	60d3      	str	r3, [r2, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000ed00 	.word	0xe000ed00
 8001b00:	05fa0000 	.word	0x05fa0000

08001b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b08:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <__NVIC_GetPriorityGrouping+0x18>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	f003 0307 	and.w	r3, r3, #7
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	6039      	str	r1, [r7, #0]
 8001b2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	db0a      	blt.n	8001b4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	490c      	ldr	r1, [pc, #48]	; (8001b6c <__NVIC_SetPriority+0x4c>)
 8001b3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b3e:	0112      	lsls	r2, r2, #4
 8001b40:	b2d2      	uxtb	r2, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b48:	e00a      	b.n	8001b60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4908      	ldr	r1, [pc, #32]	; (8001b70 <__NVIC_SetPriority+0x50>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	f003 030f 	and.w	r3, r3, #15
 8001b56:	3b04      	subs	r3, #4
 8001b58:	0112      	lsls	r2, r2, #4
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	761a      	strb	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	; 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f1c3 0307 	rsb	r3, r3, #7
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	bf28      	it	cs
 8001b92:	2304      	movcs	r3, #4
 8001b94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	2b06      	cmp	r3, #6
 8001b9c:	d902      	bls.n	8001ba4 <NVIC_EncodePriority+0x30>
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3b03      	subs	r3, #3
 8001ba2:	e000      	b.n	8001ba6 <NVIC_EncodePriority+0x32>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bc6:	43d9      	mvns	r1, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bcc:	4313      	orrs	r3, r2
         );
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3724      	adds	r7, #36	; 0x24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bec:	d301      	bcc.n	8001bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e00f      	b.n	8001c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <SysTick_Config+0x40>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bfa:	210f      	movs	r1, #15
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f7ff ff8e 	bl	8001b20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c04:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <SysTick_Config+0x40>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <SysTick_Config+0x40>)
 8001c0c:	2207      	movs	r2, #7
 8001c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	e000e010 	.word	0xe000e010

08001c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff ff47 	bl	8001abc <__NVIC_SetPriorityGrouping>
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
 8001c42:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c44:	f7ff ff5e 	bl	8001b04 <__NVIC_GetPriorityGrouping>
 8001c48:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	6978      	ldr	r0, [r7, #20]
 8001c50:	f7ff ff90 	bl	8001b74 <NVIC_EncodePriority>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff ff5f 	bl	8001b20 <__NVIC_SetPriority>
}
 8001c62:	bf00      	nop
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ffb2 	bl	8001bdc <SysTick_Config>
 8001c78:	4603      	mov	r3, r0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c92:	4b86      	ldr	r3, [pc, #536]	; (8001eac <HAL_GPIO_Init+0x228>)
 8001c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c96:	e18c      	b.n	8001fb2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 817e 	beq.w	8001fac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d005      	beq.n	8001cc8 <HAL_GPIO_Init+0x44>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 0303 	and.w	r3, r3, #3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d130      	bne.n	8001d2a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	091b      	lsrs	r3, r3, #4
 8001d14:	f003 0201 	and.w	r2, r3, #1
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d017      	beq.n	8001d66 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d123      	bne.n	8001dba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	08da      	lsrs	r2, r3, #3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	3208      	adds	r2, #8
 8001d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	220f      	movs	r2, #15
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	08da      	lsrs	r2, r3, #3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3208      	adds	r2, #8
 8001db4:	69b9      	ldr	r1, [r7, #24]
 8001db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f003 0203 	and.w	r2, r3, #3
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80d8 	beq.w	8001fac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_GPIO_Init+0x22c>)
 8001dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e02:	4a2b      	ldr	r2, [pc, #172]	; (8001eb0 <HAL_GPIO_Init+0x22c>)
 8001e04:	f043 0302 	orr.w	r3, r3, #2
 8001e08:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e0c:	4b28      	ldr	r3, [pc, #160]	; (8001eb0 <HAL_GPIO_Init+0x22c>)
 8001e0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a26      	ldr	r2, [pc, #152]	; (8001eb4 <HAL_GPIO_Init+0x230>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_GPIO_Init+0x234>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d04a      	beq.n	8001edc <HAL_GPIO_Init+0x258>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_GPIO_Init+0x238>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d02b      	beq.n	8001ea6 <HAL_GPIO_Init+0x222>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <HAL_GPIO_Init+0x23c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d025      	beq.n	8001ea2 <HAL_GPIO_Init+0x21e>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <HAL_GPIO_Init+0x240>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d01f      	beq.n	8001e9e <HAL_GPIO_Init+0x21a>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a19      	ldr	r2, [pc, #100]	; (8001ec8 <HAL_GPIO_Init+0x244>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d019      	beq.n	8001e9a <HAL_GPIO_Init+0x216>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_GPIO_Init+0x248>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d013      	beq.n	8001e96 <HAL_GPIO_Init+0x212>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a17      	ldr	r2, [pc, #92]	; (8001ed0 <HAL_GPIO_Init+0x24c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00d      	beq.n	8001e92 <HAL_GPIO_Init+0x20e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a16      	ldr	r2, [pc, #88]	; (8001ed4 <HAL_GPIO_Init+0x250>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d007      	beq.n	8001e8e <HAL_GPIO_Init+0x20a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_GPIO_Init+0x254>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_GPIO_Init+0x206>
 8001e86:	2309      	movs	r3, #9
 8001e88:	e029      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	e027      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e025      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e023      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e021      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e01f      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e01d      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e01b      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e019      	b.n	8001ede <HAL_GPIO_Init+0x25a>
 8001eaa:	bf00      	nop
 8001eac:	58000080 	.word	0x58000080
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	58000400 	.word	0x58000400
 8001eb8:	58020000 	.word	0x58020000
 8001ebc:	58020400 	.word	0x58020400
 8001ec0:	58020800 	.word	0x58020800
 8001ec4:	58020c00 	.word	0x58020c00
 8001ec8:	58021000 	.word	0x58021000
 8001ecc:	58021400 	.word	0x58021400
 8001ed0:	58021800 	.word	0x58021800
 8001ed4:	58021c00 	.word	0x58021c00
 8001ed8:	58022400 	.word	0x58022400
 8001edc:	2300      	movs	r3, #0
 8001ede:	69fa      	ldr	r2, [r7, #28]
 8001ee0:	f002 0203 	and.w	r2, r2, #3
 8001ee4:	0092      	lsls	r2, r2, #2
 8001ee6:	4093      	lsls	r3, r2
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eee:	4938      	ldr	r1, [pc, #224]	; (8001fd0 <HAL_GPIO_Init+0x34c>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d003      	beq.n	8001f50 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f47f ae6b 	bne.w	8001c98 <HAL_GPIO_Init+0x14>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	3724      	adds	r7, #36	; 0x24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	58000400 	.word	0x58000400

08001fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fe4:	787b      	ldrb	r3, [r7, #1]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ff0:	e003      	b.n	8001ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
	...

08002008 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002010:	4b29      	ldr	r3, [pc, #164]	; (80020b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	2b06      	cmp	r3, #6
 800201a:	d00a      	beq.n	8002032 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800201c:	4b26      	ldr	r3, [pc, #152]	; (80020b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e03f      	b.n	80020ae <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e03d      	b.n	80020ae <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002032:	4b21      	ldr	r3, [pc, #132]	; (80020b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800203a:	491f      	ldr	r1, [pc, #124]	; (80020b8 <HAL_PWREx_ConfigSupply+0xb0>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4313      	orrs	r3, r2
 8002040:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002042:	f7ff fd0b 	bl	8001a5c <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002048:	e009      	b.n	800205e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800204a:	f7ff fd07 	bl	8001a5c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002058:	d901      	bls.n	800205e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e027      	b.n	80020ae <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800206a:	d1ee      	bne.n	800204a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b1e      	cmp	r3, #30
 8002070:	d008      	beq.n	8002084 <HAL_PWREx_ConfigSupply+0x7c>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b2e      	cmp	r3, #46	; 0x2e
 8002076:	d005      	beq.n	8002084 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b1d      	cmp	r3, #29
 800207c:	d002      	beq.n	8002084 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2b2d      	cmp	r3, #45	; 0x2d
 8002082:	d113      	bne.n	80020ac <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002084:	f7ff fcea 	bl	8001a5c <HAL_GetTick>
 8002088:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800208a:	e009      	b.n	80020a0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800208c:	f7ff fce6 	bl	8001a5c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800209a:	d901      	bls.n	80020a0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e006      	b.n	80020ae <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <HAL_PWREx_ConfigSupply+0xb0>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0311 	and.w	r3, r3, #17
 80020a8:	2b11      	cmp	r3, #17
 80020aa:	d1ef      	bne.n	800208c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3710      	adds	r7, #16
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024800 	.word	0x58024800

080020bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e3c8      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8087 	beq.w	80021ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020dc:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020e6:	4b86      	ldr	r3, [pc, #536]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80020e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d007      	beq.n	8002102 <HAL_RCC_OscConfig+0x46>
 80020f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f4:	2b18      	cmp	r3, #24
 80020f6:	d110      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d10b      	bne.n	800211a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002102:	4b7f      	ldr	r3, [pc, #508]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d06c      	beq.n	80021e8 <HAL_RCC_OscConfig+0x12c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d168      	bne.n	80021e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e3a2      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x76>
 8002124:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a75      	ldr	r2, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	e02e      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x98>
 800213a:	4b71      	ldr	r3, [pc, #452]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a70      	ldr	r2, [pc, #448]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6d      	ldr	r2, [pc, #436]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e01d      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0xbc>
 800215e:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a67      	ldr	r2, [pc, #412]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b65      	ldr	r3, [pc, #404]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a64      	ldr	r2, [pc, #400]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e00b      	b.n	8002190 <HAL_RCC_OscConfig+0xd4>
 8002178:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a60      	ldr	r2, [pc, #384]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800217e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b5e      	ldr	r3, [pc, #376]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a5d      	ldr	r2, [pc, #372]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800218a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800218e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d013      	beq.n	80021c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff fc60 	bl	8001a5c <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fc5c 	bl	8001a5c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e356      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0xe4>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c0:	f7ff fc4c 	bl	8001a5c <HAL_GetTick>
 80021c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fc48 	bl	8001a5c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e342      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021da:	4b49      	ldr	r3, [pc, #292]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x10c>
 80021e6:	e000      	b.n	80021ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 808c 	beq.w	8002310 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021f8:	4b41      	ldr	r3, [pc, #260]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002200:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_RCC_OscConfig+0x162>
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	2b18      	cmp	r3, #24
 8002212:	d137      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c8>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d132      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221e:	4b38      	ldr	r3, [pc, #224]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x17a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e314      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0219 	bic.w	r2, r3, #25
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	492f      	ldr	r1, [pc, #188]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff fc08 	bl	8001a5c <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff fc04 	bl	8001a5c <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e2fe      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002262:	4b27      	ldr	r3, [pc, #156]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	061b      	lsls	r3, r3, #24
 800227c:	4920      	ldr	r1, [pc, #128]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002282:	e045      	b.n	8002310 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d026      	beq.n	80022da <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800228c:	4b1c      	ldr	r3, [pc, #112]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 0219 	bic.w	r2, r3, #25
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4919      	ldr	r1, [pc, #100]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7ff fbdd 	bl	8001a5c <HAL_GetTick>
 80022a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7ff fbd9 	bl	8001a5c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e2d3      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b8:	4b11      	ldr	r3, [pc, #68]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0304 	and.w	r3, r3, #4
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	490b      	ldr	r1, [pc, #44]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	e01a      	b.n	8002310 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_RCC_OscConfig+0x244>)
 80022e0:	f023 0301 	bic.w	r3, r3, #1
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7ff fbb9 	bl	8001a5c <HAL_GetTick>
 80022ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7ff fbb5 	bl	8001a5c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d903      	bls.n	8002304 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e2af      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
 8002300:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002304:	4b96      	ldr	r3, [pc, #600]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ee      	bne.n	80022ee <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d06a      	beq.n	80023f2 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800231c:	4b90      	ldr	r3, [pc, #576]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002324:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002326:	4b8e      	ldr	r3, [pc, #568]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d007      	beq.n	8002342 <HAL_RCC_OscConfig+0x286>
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b18      	cmp	r3, #24
 8002336:	d11b      	bne.n	8002370 <HAL_RCC_OscConfig+0x2b4>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b01      	cmp	r3, #1
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002342:	4b87      	ldr	r3, [pc, #540]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x29e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e282      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800235a:	4b81      	ldr	r3, [pc, #516]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	497d      	ldr	r1, [pc, #500]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800236e:	e040      	b.n	80023f2 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	69db      	ldr	r3, [r3, #28]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d023      	beq.n	80023c0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002378:	4b79      	ldr	r3, [pc, #484]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a78      	ldr	r2, [pc, #480]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800237e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7ff fb6a 	bl	8001a5c <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800238c:	f7ff fb66 	bl	8001a5c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e260      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800239e:	4b70      	ldr	r3, [pc, #448]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0f0      	beq.n	800238c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023aa:	4b6d      	ldr	r3, [pc, #436]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	061b      	lsls	r3, r3, #24
 80023b8:	4969      	ldr	r1, [pc, #420]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60cb      	str	r3, [r1, #12]
 80023be:	e018      	b.n	80023f2 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023c0:	4b67      	ldr	r3, [pc, #412]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a66      	ldr	r2, [pc, #408]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80023c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7ff fb46 	bl	8001a5c <HAL_GetTick>
 80023d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023d4:	f7ff fb42 	bl	8001a5c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e23c      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023e6:	4b5e      	ldr	r3, [pc, #376]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0308 	and.w	r3, r3, #8
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d036      	beq.n	800246c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	695b      	ldr	r3, [r3, #20]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d019      	beq.n	800243a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002406:	4b56      	ldr	r3, [pc, #344]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	4a55      	ldr	r2, [pc, #340]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7ff fb23 	bl	8001a5c <HAL_GetTick>
 8002416:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7ff fb1f 	bl	8001a5c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e219      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800242c:	4b4c      	ldr	r3, [pc, #304]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800242e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x35e>
 8002438:	e018      	b.n	800246c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243a:	4b49      	ldr	r3, [pc, #292]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	4a48      	ldr	r2, [pc, #288]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002446:	f7ff fb09 	bl	8001a5c <HAL_GetTick>
 800244a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244e:	f7ff fb05 	bl	8001a5c <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e1ff      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002460:	4b3f      	ldr	r3, [pc, #252]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d036      	beq.n	80024e6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d019      	beq.n	80024b4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002480:	4b37      	ldr	r3, [pc, #220]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a36      	ldr	r2, [pc, #216]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002486:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800248a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800248c:	f7ff fae6 	bl	8001a5c <HAL_GetTick>
 8002490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002494:	f7ff fae2 	bl	8001a5c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e1dc      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024a6:	4b2e      	ldr	r3, [pc, #184]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0x3d8>
 80024b2:	e018      	b.n	80024e6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024b4:	4b2a      	ldr	r3, [pc, #168]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a29      	ldr	r2, [pc, #164]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80024ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024c0:	f7ff facc 	bl	8001a5c <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024c8:	f7ff fac8 	bl	8001a5c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e1c2      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024da:	4b21      	ldr	r3, [pc, #132]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 8086 	beq.w	8002600 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	; (8002564 <HAL_RCC_OscConfig+0x4a8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a1a      	ldr	r2, [pc, #104]	; (8002564 <HAL_RCC_OscConfig+0x4a8>)
 80024fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002500:	f7ff faac 	bl	8001a5c <HAL_GetTick>
 8002504:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002508:	f7ff faa8 	bl	8001a5c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1a2      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800251a:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_OscConfig+0x4a8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d106      	bne.n	800253c <HAL_RCC_OscConfig+0x480>
 800252e:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002532:	4a0b      	ldr	r2, [pc, #44]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	; 0x70
 800253a:	e032      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e6>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d111      	bne.n	8002568 <HAL_RCC_OscConfig+0x4ac>
 8002544:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002548:	4a05      	ldr	r2, [pc, #20]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 800254a:	f023 0301 	bic.w	r3, r3, #1
 800254e:	6713      	str	r3, [r2, #112]	; 0x70
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	4a02      	ldr	r2, [pc, #8]	; (8002560 <HAL_RCC_OscConfig+0x4a4>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6713      	str	r3, [r2, #112]	; 0x70
 800255c:	e021      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e6>
 800255e:	bf00      	nop
 8002560:	58024400 	.word	0x58024400
 8002564:	58024800 	.word	0x58024800
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d10c      	bne.n	800258a <HAL_RCC_OscConfig+0x4ce>
 8002570:	4b83      	ldr	r3, [pc, #524]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a82      	ldr	r2, [pc, #520]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002576:	f043 0304 	orr.w	r3, r3, #4
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	4b80      	ldr	r3, [pc, #512]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800257e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002580:	4a7f      	ldr	r2, [pc, #508]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002582:	f043 0301 	orr.w	r3, r3, #1
 8002586:	6713      	str	r3, [r2, #112]	; 0x70
 8002588:	e00b      	b.n	80025a2 <HAL_RCC_OscConfig+0x4e6>
 800258a:	4b7d      	ldr	r3, [pc, #500]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	4a7c      	ldr	r2, [pc, #496]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002590:	f023 0301 	bic.w	r3, r3, #1
 8002594:	6713      	str	r3, [r2, #112]	; 0x70
 8002596:	4b7a      	ldr	r3, [pc, #488]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259a:	4a79      	ldr	r2, [pc, #484]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800259c:	f023 0304 	bic.w	r3, r3, #4
 80025a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d015      	beq.n	80025d6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7ff fa57 	bl	8001a5c <HAL_GetTick>
 80025ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025b0:	e00a      	b.n	80025c8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b2:	f7ff fa53 	bl	8001a5c <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e14b      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025c8:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025cc:	f003 0302 	and.w	r3, r3, #2
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0ee      	beq.n	80025b2 <HAL_RCC_OscConfig+0x4f6>
 80025d4:	e014      	b.n	8002600 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d6:	f7ff fa41 	bl	8001a5c <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025dc:	e00a      	b.n	80025f4 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7ff fa3d 	bl	8001a5c <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e135      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025f4:	4b62      	ldr	r3, [pc, #392]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1ee      	bne.n	80025de <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 812a 	beq.w	800285e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800260a:	4b5d      	ldr	r3, [pc, #372]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002612:	2b18      	cmp	r3, #24
 8002614:	f000 80ba 	beq.w	800278c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2b02      	cmp	r3, #2
 800261e:	f040 8095 	bne.w	800274c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002622:	4b57      	ldr	r3, [pc, #348]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a56      	ldr	r2, [pc, #344]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002628:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800262c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262e:	f7ff fa15 	bl	8001a5c <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002636:	f7ff fa11 	bl	8001a5c <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e10b      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002648:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1f0      	bne.n	8002636 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	4b4a      	ldr	r3, [pc, #296]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002658:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCC_OscConfig+0x6c8>)
 800265a:	4013      	ands	r3, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	430a      	orrs	r2, r1
 8002668:	4945      	ldr	r1, [pc, #276]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800266a:	4313      	orrs	r3, r2
 800266c:	628b      	str	r3, [r1, #40]	; 0x28
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	3b01      	subs	r3, #1
 8002674:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800267c:	3b01      	subs	r3, #1
 800267e:	025b      	lsls	r3, r3, #9
 8002680:	b29b      	uxth	r3, r3
 8002682:	431a      	orrs	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	3b01      	subs	r3, #1
 800268a:	041b      	lsls	r3, r3, #16
 800268c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	3b01      	subs	r3, #1
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800269e:	4938      	ldr	r1, [pc, #224]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026a4:	4b36      	ldr	r3, [pc, #216]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	4a35      	ldr	r2, [pc, #212]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026aa:	f023 0301 	bic.w	r3, r3, #1
 80026ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026b0:	4b33      	ldr	r3, [pc, #204]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_RCC_OscConfig+0x6cc>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026bc:	00d2      	lsls	r2, r2, #3
 80026be:	4930      	ldr	r1, [pc, #192]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80026c4:	4b2e      	ldr	r3, [pc, #184]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c8:	f023 020c 	bic.w	r2, r3, #12
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	492b      	ldr	r1, [pc, #172]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80026d6:	4b2a      	ldr	r3, [pc, #168]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026da:	f023 0202 	bic.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4927      	ldr	r1, [pc, #156]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80026e8:	4b25      	ldr	r3, [pc, #148]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	4a24      	ldr	r2, [pc, #144]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026f4:	4b22      	ldr	r3, [pc, #136]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	4a21      	ldr	r2, [pc, #132]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 80026fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	4a1e      	ldr	r2, [pc, #120]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800270a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800270e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002718:	4b19      	ldr	r3, [pc, #100]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a18      	ldr	r2, [pc, #96]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800271e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002724:	f7ff f99a 	bl	8001a5c <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272c:	f7ff f996 	bl	8001a5c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e090      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800273e:	4b10      	ldr	r3, [pc, #64]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0x670>
 800274a:	e088      	b.n	800285e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274c:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0b      	ldr	r2, [pc, #44]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002758:	f7ff f980 	bl	8001a5c <HAL_GetTick>
 800275c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002760:	f7ff f97c 	bl	8001a5c <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e076      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002772:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCC_OscConfig+0x6c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1f0      	bne.n	8002760 <HAL_RCC_OscConfig+0x6a4>
 800277e:	e06e      	b.n	800285e <HAL_RCC_OscConfig+0x7a2>
 8002780:	58024400 	.word	0x58024400
 8002784:	fffffc0c 	.word	0xfffffc0c
 8002788:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800278c:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002792:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	2b01      	cmp	r3, #1
 800279e:	d031      	beq.n	8002804 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d12a      	bne.n	8002804 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d122      	bne.n	8002804 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d11a      	bne.n	8002804 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	0a5b      	lsrs	r3, r3, #9
 80027d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027da:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d111      	bne.n	8002804 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	0c1b      	lsrs	r3, r3, #16
 80027e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0e1b      	lsrs	r3, r3, #24
 80027f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002800:	429a      	cmp	r2, r3
 8002802:	d001      	beq.n	8002808 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e02b      	b.n	8002860 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 800280a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280c:	08db      	lsrs	r3, r3, #3
 800280e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002812:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	429a      	cmp	r2, r3
 800281c:	d01f      	beq.n	800285e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800281e:	4b12      	ldr	r3, [pc, #72]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	4a11      	ldr	r2, [pc, #68]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 8002824:	f023 0301 	bic.w	r3, r3, #1
 8002828:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800282a:	f7ff f917 	bl	8001a5c <HAL_GetTick>
 800282e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002830:	bf00      	nop
 8002832:	f7ff f913 	bl	8001a5c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	4293      	cmp	r3, r2
 800283c:	d0f9      	beq.n	8002832 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 8002840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_RCC_OscConfig+0x7b0>)
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800284a:	00d2      	lsls	r2, r2, #3
 800284c:	4906      	ldr	r1, [pc, #24]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002852:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_RCC_OscConfig+0x7ac>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3730      	adds	r7, #48	; 0x30
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	58024400 	.word	0x58024400
 800286c:	ffff0007 	.word	0xffff0007

08002870 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e19c      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b8a      	ldr	r3, [pc, #552]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b87      	ldr	r3, [pc, #540]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 020f 	bic.w	r2, r3, #15
 800289a:	4985      	ldr	r1, [pc, #532]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b83      	ldr	r3, [pc, #524]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e184      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d010      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691a      	ldr	r2, [r3, #16]
 80028c4:	4b7b      	ldr	r3, [pc, #492]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d908      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028d0:	4b78      	ldr	r3, [pc, #480]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	4975      	ldr	r1, [pc, #468]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d010      	beq.n	8002910 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	4b70      	ldr	r3, [pc, #448]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80028f4:	69db      	ldr	r3, [r3, #28]
 80028f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d908      	bls.n	8002910 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028fe:	4b6d      	ldr	r3, [pc, #436]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	496a      	ldr	r1, [pc, #424]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 800290c:	4313      	orrs	r3, r2
 800290e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0310 	and.w	r3, r3, #16
 8002918:	2b00      	cmp	r3, #0
 800291a:	d010      	beq.n	800293e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	4b64      	ldr	r3, [pc, #400]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002922:	69db      	ldr	r3, [r3, #28]
 8002924:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002928:	429a      	cmp	r2, r3
 800292a:	d908      	bls.n	800293e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800292c:	4b61      	ldr	r3, [pc, #388]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	495e      	ldr	r1, [pc, #376]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 800293a:	4313      	orrs	r3, r2
 800293c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d010      	beq.n	800296c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	4b59      	ldr	r3, [pc, #356]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002956:	429a      	cmp	r2, r3
 8002958:	d908      	bls.n	800296c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800295a:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	4953      	ldr	r1, [pc, #332]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002968:	4313      	orrs	r3, r2
 800296a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d010      	beq.n	800299a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4b4d      	ldr	r3, [pc, #308]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	429a      	cmp	r2, r3
 8002986:	d908      	bls.n	800299a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002988:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f023 020f 	bic.w	r2, r3, #15
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	4947      	ldr	r1, [pc, #284]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002996:	4313      	orrs	r3, r2
 8002998:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d055      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029a6:	4b43      	ldr	r3, [pc, #268]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	4940      	ldr	r1, [pc, #256]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029c0:	4b3c      	ldr	r3, [pc, #240]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d121      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0f6      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d107      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d115      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0ea      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029f0:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0de      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d101      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0d6      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a10:	4b28      	ldr	r3, [pc, #160]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	f023 0207 	bic.w	r2, r3, #7
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4925      	ldr	r1, [pc, #148]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a22:	f7ff f81b 	bl	8001a5c <HAL_GetTick>
 8002a26:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a28:	e00a      	b.n	8002a40 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a2a:	f7ff f817 	bl	8001a5c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e0be      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a40:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d1eb      	bne.n	8002a2a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d010      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d208      	bcs.n	8002a80 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	490e      	ldr	r1, [pc, #56]	; (8002ab4 <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d214      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 020f 	bic.w	r2, r3, #15
 8002a96:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <HAL_RCC_ClockConfig+0x240>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e086      	b.n	8002bbe <HAL_RCC_ClockConfig+0x34e>
 8002ab0:	52002000 	.word	0x52002000
 8002ab4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d010      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d208      	bcs.n	8002ae6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	4939      	ldr	r1, [pc, #228]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0308 	and.w	r3, r3, #8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d010      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695a      	ldr	r2, [r3, #20]
 8002af6:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d208      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	492e      	ldr	r1, [pc, #184]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699a      	ldr	r2, [r3, #24]
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d208      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0320 	and.w	r3, r3, #32
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d010      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d208      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	4917      	ldr	r1, [pc, #92]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b70:	f000 f834 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b74:	4602      	mov	r2, r0
 8002b76:	4b14      	ldr	r3, [pc, #80]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	4912      	ldr	r1, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x35c>)
 8002b82:	5ccb      	ldrb	r3, [r1, r3]
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCC_ClockConfig+0x358>)
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <HAL_RCC_ClockConfig+0x35c>)
 8002b98:	5cd3      	ldrb	r3, [r2, r3]
 8002b9a:	f003 031f 	and.w	r3, r3, #31
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x360>)
 8002ba6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ba8:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <HAL_RCC_ClockConfig+0x364>)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bae:	4b0a      	ldr	r3, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x368>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fe ff08 	bl	80019c8 <HAL_InitTick>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	0800ad18 	.word	0x0800ad18
 8002bd0:	24000004 	.word	0x24000004
 8002bd4:	24000000 	.word	0x24000000
 8002bd8:	24000008 	.word	0x24000008

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b089      	sub	sp, #36	; 0x24
 8002be0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002be2:	4bb3      	ldr	r3, [pc, #716]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bea:	2b18      	cmp	r3, #24
 8002bec:	f200 8155 	bhi.w	8002e9a <HAL_RCC_GetSysClockFreq+0x2be>
 8002bf0:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf6:	bf00      	nop
 8002bf8:	08002c5d 	.word	0x08002c5d
 8002bfc:	08002e9b 	.word	0x08002e9b
 8002c00:	08002e9b 	.word	0x08002e9b
 8002c04:	08002e9b 	.word	0x08002e9b
 8002c08:	08002e9b 	.word	0x08002e9b
 8002c0c:	08002e9b 	.word	0x08002e9b
 8002c10:	08002e9b 	.word	0x08002e9b
 8002c14:	08002e9b 	.word	0x08002e9b
 8002c18:	08002c83 	.word	0x08002c83
 8002c1c:	08002e9b 	.word	0x08002e9b
 8002c20:	08002e9b 	.word	0x08002e9b
 8002c24:	08002e9b 	.word	0x08002e9b
 8002c28:	08002e9b 	.word	0x08002e9b
 8002c2c:	08002e9b 	.word	0x08002e9b
 8002c30:	08002e9b 	.word	0x08002e9b
 8002c34:	08002e9b 	.word	0x08002e9b
 8002c38:	08002c89 	.word	0x08002c89
 8002c3c:	08002e9b 	.word	0x08002e9b
 8002c40:	08002e9b 	.word	0x08002e9b
 8002c44:	08002e9b 	.word	0x08002e9b
 8002c48:	08002e9b 	.word	0x08002e9b
 8002c4c:	08002e9b 	.word	0x08002e9b
 8002c50:	08002e9b 	.word	0x08002e9b
 8002c54:	08002e9b 	.word	0x08002e9b
 8002c58:	08002c8f 	.word	0x08002c8f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c5c:	4b94      	ldr	r3, [pc, #592]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d009      	beq.n	8002c7c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c68:	4b91      	ldr	r3, [pc, #580]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	4a90      	ldr	r2, [pc, #576]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c7a:	e111      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c7c:	4b8d      	ldr	r3, [pc, #564]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c7e:	61bb      	str	r3, [r7, #24]
      break;
 8002c80:	e10e      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c82:	4b8d      	ldr	r3, [pc, #564]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c84:	61bb      	str	r3, [r7, #24]
      break;
 8002c86:	e10b      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c88:	4b8c      	ldr	r3, [pc, #560]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c8a:	61bb      	str	r3, [r7, #24]
      break;
 8002c8c:	e108      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c8e:	4b88      	ldr	r3, [pc, #544]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c98:	4b85      	ldr	r3, [pc, #532]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ca4:	4b82      	ldr	r3, [pc, #520]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002cae:	4b80      	ldr	r3, [pc, #512]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	fb02 f303 	mul.w	r3, r2, r3
 8002cbe:	ee07 3a90 	vmov	s15, r3
 8002cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80e1 	beq.w	8002e94 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	f000 8083 	beq.w	8002de0 <HAL_RCC_GetSysClockFreq+0x204>
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	f200 80a1 	bhi.w	8002e24 <HAL_RCC_GetSysClockFreq+0x248>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_GetSysClockFreq+0x114>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d056      	beq.n	8002d9c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002cee:	e099      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cf0:	4b6f      	ldr	r3, [pc, #444]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02d      	beq.n	8002d58 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cfc:	4b6c      	ldr	r3, [pc, #432]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	08db      	lsrs	r3, r3, #3
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	4a6b      	ldr	r2, [pc, #428]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
 8002d0c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	ee07 3a90 	vmov	s15, r3
 8002d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d26:	4b62      	ldr	r3, [pc, #392]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2e:	ee07 3a90 	vmov	s15, r3
 8002d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d36:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d3a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d52:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d56:	e087      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d62:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002ec4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d6a:	4b51      	ldr	r3, [pc, #324]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d72:	ee07 3a90 	vmov	s15, r3
 8002d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d7e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d9a:	e065      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002ec8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dae:	4b40      	ldr	r3, [pc, #256]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dde:	e043      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002ecc <HAL_RCC_GetSysClockFreq+0x2f0>
 8002dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df2:	4b2f      	ldr	r3, [pc, #188]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e06:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e22:	e021      	b.n	8002e68 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002ec8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e36:	4b1e      	ldr	r3, [pc, #120]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002ec0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e66:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	0a5b      	lsrs	r3, r3, #9
 8002e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e72:	3301      	adds	r3, #1
 8002e74:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	ee07 3a90 	vmov	s15, r3
 8002e7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e80:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e8c:	ee17 3a90 	vmov	r3, s15
 8002e90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e92:	e005      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61bb      	str	r3, [r7, #24]
      break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e9c:	61bb      	str	r3, [r7, #24]
      break;
 8002e9e:	bf00      	nop
  }

  return sysclockfreq;
 8002ea0:	69bb      	ldr	r3, [r7, #24]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3724      	adds	r7, #36	; 0x24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	03d09000 	.word	0x03d09000
 8002eb8:	003d0900 	.word	0x003d0900
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	46000000 	.word	0x46000000
 8002ec4:	4c742400 	.word	0x4c742400
 8002ec8:	4a742400 	.word	0x4a742400
 8002ecc:	4b742400 	.word	0x4b742400

08002ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ed6:	f7ff fe81 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002eda:	4602      	mov	r2, r0
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	0a1b      	lsrs	r3, r3, #8
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	490f      	ldr	r1, [pc, #60]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002ee8:	5ccb      	ldrb	r3, [r1, r3]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_RCC_GetHCLKFreq+0x50>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <HAL_RCC_GetHCLKFreq+0x54>)
 8002efe:	5cd3      	ldrb	r3, [r2, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a07      	ldr	r2, [pc, #28]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f0c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f0e:	4a07      	ldr	r2, [pc, #28]	; (8002f2c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f16:	681b      	ldr	r3, [r3, #0]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	58024400 	.word	0x58024400
 8002f24:	0800ad18 	.word	0x0800ad18
 8002f28:	24000004 	.word	0x24000004
 8002f2c:	24000000 	.word	0x24000000

08002f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f34:	f7ff ffcc 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	091b      	lsrs	r3, r3, #4
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	4904      	ldr	r1, [pc, #16]	; (8002f58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f46:	5ccb      	ldrb	r3, [r1, r3]
 8002f48:	f003 031f 	and.w	r3, r3, #31
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	58024400 	.word	0x58024400
 8002f58:	0800ad18 	.word	0x0800ad18

08002f5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f60:	f7ff ffb6 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	4904      	ldr	r1, [pc, #16]	; (8002f84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f72:	5ccb      	ldrb	r3, [r1, r3]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	58024400 	.word	0x58024400
 8002f84:	0800ad18 	.word	0x0800ad18

08002f88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f8c:	b0c6      	sub	sp, #280	; 0x118
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f94:	2300      	movs	r3, #0
 8002f96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002fac:	2500      	movs	r5, #0
 8002fae:	ea54 0305 	orrs.w	r3, r4, r5
 8002fb2:	d049      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fbe:	d02f      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002fc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fc4:	d828      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fca:	d01a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002fcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fd0:	d822      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fda:	d007      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fdc:	e01c      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fde:	4bab      	ldr	r3, [pc, #684]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	4aaa      	ldr	r2, [pc, #680]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002fea:	e01a      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fc25 	bl	8004844 <RCCEx_PLL2_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003000:	e00f      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003006:	3328      	adds	r3, #40	; 0x28
 8003008:	2102      	movs	r1, #2
 800300a:	4618      	mov	r0, r3
 800300c:	f001 fccc 	bl	80049a8 <RCCEx_PLL3_Config>
 8003010:	4603      	mov	r3, r0
 8003012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003016:	e004      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800301e:	e000      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003026:	2b00      	cmp	r3, #0
 8003028:	d10a      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800302a:	4b98      	ldr	r3, [pc, #608]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003038:	4a94      	ldr	r2, [pc, #592]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800303a:	430b      	orrs	r3, r1
 800303c:	6513      	str	r3, [r2, #80]	; 0x50
 800303e:	e003      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003054:	f04f 0900 	mov.w	r9, #0
 8003058:	ea58 0309 	orrs.w	r3, r8, r9
 800305c:	d047      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800305e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003064:	2b04      	cmp	r3, #4
 8003066:	d82a      	bhi.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	08003085 	.word	0x08003085
 8003074:	08003093 	.word	0x08003093
 8003078:	080030a9 	.word	0x080030a9
 800307c:	080030c7 	.word	0x080030c7
 8003080:	080030c7 	.word	0x080030c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	4a80      	ldr	r2, [pc, #512]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800308a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800308e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003090:	e01a      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003096:	3308      	adds	r3, #8
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fbd2 	bl	8004844 <RCCEx_PLL2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030a6:	e00f      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030ac:	3328      	adds	r3, #40	; 0x28
 80030ae:	2100      	movs	r1, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 fc79 	bl	80049a8 <RCCEx_PLL3_Config>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030bc:	e004      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80030c4:	e000      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80030c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10a      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030d0:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d4:	f023 0107 	bic.w	r1, r3, #7
 80030d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4a6b      	ldr	r2, [pc, #428]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6513      	str	r3, [r2, #80]	; 0x50
 80030e4:	e003      	b.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80030ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80030fa:	f04f 0b00 	mov.w	fp, #0
 80030fe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003102:	d05b      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003108:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800310c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003110:	d03b      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003112:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003116:	d834      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800311c:	d037      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800311e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003122:	d82e      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003124:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003128:	d033      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800312a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800312e:	d828      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003134:	d01a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003136:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800313a:	d822      	bhi.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d003      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003144:	d007      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003146:	e01c      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003148:	4b50      	ldr	r3, [pc, #320]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	4a4f      	ldr	r2, [pc, #316]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800314e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003154:	e01e      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800315a:	3308      	adds	r3, #8
 800315c:	2100      	movs	r1, #0
 800315e:	4618      	mov	r0, r3
 8003160:	f001 fb70 	bl	8004844 <RCCEx_PLL2_Config>
 8003164:	4603      	mov	r3, r0
 8003166:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800316a:	e013      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800316c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003170:	3328      	adds	r3, #40	; 0x28
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fc17 	bl	80049a8 <RCCEx_PLL3_Config>
 800317a:	4603      	mov	r3, r0
 800317c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003180:	e008      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003188:	e004      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800318a:	bf00      	nop
 800318c:	e002      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003194:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10b      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800319c:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80031a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031ac:	4a37      	ldr	r2, [pc, #220]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ae:	430b      	orrs	r3, r1
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
 80031b2:	e003      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80031b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80031bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80031c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80031d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80031d6:	460b      	mov	r3, r1
 80031d8:	4313      	orrs	r3, r2
 80031da:	d05d      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80031dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80031e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80031e8:	d03b      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80031ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80031ee:	d834      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031f4:	d037      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80031f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031fa:	d82e      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80031fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003200:	d033      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003202:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003206:	d828      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003208:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800320c:	d01a      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800320e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003212:	d822      	bhi.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800321c:	d007      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800321e:	e01c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a19      	ldr	r2, [pc, #100]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800322c:	e01e      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800322e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003232:	3308      	adds	r3, #8
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f001 fb04 	bl	8004844 <RCCEx_PLL2_Config>
 800323c:	4603      	mov	r3, r0
 800323e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003242:	e013      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003248:	3328      	adds	r3, #40	; 0x28
 800324a:	2100      	movs	r1, #0
 800324c:	4618      	mov	r0, r3
 800324e:	f001 fbab 	bl	80049a8 <RCCEx_PLL3_Config>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003258:	e008      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003260:	e004      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003262:	bf00      	nop
 8003264:	e002      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003266:	bf00      	nop
 8003268:	e000      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800326a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800327c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003280:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003284:	4a01      	ldr	r2, [pc, #4]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003286:	430b      	orrs	r3, r1
 8003288:	6593      	str	r3, [r2, #88]	; 0x58
 800328a:	e005      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800328c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003290:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003294:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800329c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80032a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80032a8:	2300      	movs	r3, #0
 80032aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80032ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d03a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80032b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	2b30      	cmp	r3, #48	; 0x30
 80032c0:	d01f      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80032c2:	2b30      	cmp	r3, #48	; 0x30
 80032c4:	d819      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032c6:	2b20      	cmp	r3, #32
 80032c8:	d00c      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d815      	bhi.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d019      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d111      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032d6:	4baa      	ldr	r3, [pc, #680]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	4aa9      	ldr	r2, [pc, #676]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80032dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032e2:	e011      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80032e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032e8:	3308      	adds	r3, #8
 80032ea:	2102      	movs	r1, #2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f001 faa9 	bl	8004844 <RCCEx_PLL2_Config>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80032f8:	e006      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003300:	e002      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003308:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10a      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003310:	4b9b      	ldr	r3, [pc, #620]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003314:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800331c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331e:	4a98      	ldr	r2, [pc, #608]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003320:	430b      	orrs	r3, r1
 8003322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003324:	e003      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003326:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800332a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800332e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800333a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800333e:	2300      	movs	r3, #0
 8003340:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003344:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003348:	460b      	mov	r3, r1
 800334a:	4313      	orrs	r3, r2
 800334c:	d051      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800334e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003358:	d035      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800335a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335e:	d82e      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003360:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003364:	d031      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003366:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800336a:	d828      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x436>
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003370:	d01a      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003376:	d822      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800337c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003380:	d007      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8003382:	e01c      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4b7e      	ldr	r3, [pc, #504]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a7d      	ldr	r2, [pc, #500]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003390:	e01c      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003396:	3308      	adds	r3, #8
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f001 fa52 	bl	8004844 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033a6:	e011      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ac:	3328      	adds	r3, #40	; 0x28
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f001 faf9 	bl	80049a8 <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80033bc:	e006      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80033c4:	e002      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033c6:	bf00      	nop
 80033c8:	e000      	b.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80033ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d10a      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80033d4:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80033dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e2:	4a67      	ldr	r2, [pc, #412]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6513      	str	r3, [r2, #80]	; 0x50
 80033e8:	e003      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80033f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80033fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003402:	2300      	movs	r3, #0
 8003404:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003408:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800340c:	460b      	mov	r3, r1
 800340e:	4313      	orrs	r3, r2
 8003410:	d053      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800341c:	d033      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800341e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003422:	d82c      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003424:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003428:	d02f      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800342a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800342e:	d826      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003430:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003434:	d02b      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003436:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800343a:	d820      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003440:	d012      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003442:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003446:	d81a      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d022      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800344c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003450:	d115      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003456:	3308      	adds	r3, #8
 8003458:	2101      	movs	r1, #1
 800345a:	4618      	mov	r0, r3
 800345c:	f001 f9f2 	bl	8004844 <RCCEx_PLL2_Config>
 8003460:	4603      	mov	r3, r0
 8003462:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003466:	e015      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003468:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800346c:	3328      	adds	r3, #40	; 0x28
 800346e:	2101      	movs	r1, #1
 8003470:	4618      	mov	r0, r3
 8003472:	f001 fa99 	bl	80049a8 <RCCEx_PLL3_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800347c:	e00a      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003484:	e006      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003486:	bf00      	nop
 8003488:	e004      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800348a:	bf00      	nop
 800348c:	e002      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10a      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800349c:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80034a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	4a35      	ldr	r2, [pc, #212]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6513      	str	r3, [r2, #80]	; 0x50
 80034b0:	e003      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80034b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80034c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ca:	2300      	movs	r3, #0
 80034cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80034d0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80034d4:	460b      	mov	r3, r1
 80034d6:	4313      	orrs	r3, r2
 80034d8:	d058      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80034da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e6:	d033      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80034e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034ec:	d82c      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f2:	d02f      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80034f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f8:	d826      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80034fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034fe:	d02b      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003500:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003504:	d820      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800350a:	d012      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800350c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003510:	d81a      	bhi.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d022      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351a:	d115      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800351c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003520:	3308      	adds	r3, #8
 8003522:	2101      	movs	r1, #1
 8003524:	4618      	mov	r0, r3
 8003526:	f001 f98d 	bl	8004844 <RCCEx_PLL2_Config>
 800352a:	4603      	mov	r3, r0
 800352c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003530:	e015      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003536:	3328      	adds	r3, #40	; 0x28
 8003538:	2101      	movs	r1, #1
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fa34 	bl	80049a8 <RCCEx_PLL3_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003546:	e00a      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800354e:	e006      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003550:	bf00      	nop
 8003552:	e004      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003554:	bf00      	nop
 8003556:	e002      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003558:	bf00      	nop
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800355c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10e      	bne.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800356e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003572:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003576:	4a02      	ldr	r2, [pc, #8]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003578:	430b      	orrs	r3, r1
 800357a:	6593      	str	r3, [r2, #88]	; 0x58
 800357c:	e006      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800357e:	bf00      	nop
 8003580:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003584:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003588:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003598:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800359c:	2300      	movs	r3, #0
 800359e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80035a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80035a6:	460b      	mov	r3, r1
 80035a8:	4313      	orrs	r3, r2
 80035aa:	d037      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80035ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035b6:	d00e      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80035b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035bc:	d816      	bhi.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x664>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d018      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035c6:	d111      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035c8:	4bc4      	ldr	r3, [pc, #784]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4ac3      	ldr	r2, [pc, #780]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80035ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035d4:	e00f      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035da:	3308      	adds	r3, #8
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 f930 	bl	8004844 <RCCEx_PLL2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80035ea:	e004      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035f2:	e000      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80035f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035fe:	4bb7      	ldr	r3, [pc, #732]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003602:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360c:	4ab3      	ldr	r2, [pc, #716]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800360e:	430b      	orrs	r3, r1
 8003610:	6513      	str	r3, [r2, #80]	; 0x50
 8003612:	e003      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003614:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003618:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800361c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003624:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800362c:	2300      	movs	r3, #0
 800362e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003632:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003636:	460b      	mov	r3, r1
 8003638:	4313      	orrs	r3, r2
 800363a:	d039      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800363c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003642:	2b03      	cmp	r3, #3
 8003644:	d81c      	bhi.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003646:	a201      	add	r2, pc, #4	; (adr r2, 800364c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364c:	08003689 	.word	0x08003689
 8003650:	0800365d 	.word	0x0800365d
 8003654:	0800366b 	.word	0x0800366b
 8003658:	08003689 	.word	0x08003689
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800365c:	4b9f      	ldr	r3, [pc, #636]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	4a9e      	ldr	r2, [pc, #632]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003666:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003668:	e00f      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800366a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800366e:	3308      	adds	r3, #8
 8003670:	2102      	movs	r1, #2
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f8e6 	bl	8004844 <RCCEx_PLL2_Config>
 8003678:	4603      	mov	r3, r0
 800367a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800367e:	e004      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003686:	e000      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003688:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003692:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	f023 0103 	bic.w	r1, r3, #3
 800369a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a0:	4a8e      	ldr	r2, [pc, #568]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036a2:	430b      	orrs	r3, r1
 80036a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a6:	e003      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80036ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80036bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c0:	2300      	movs	r3, #0
 80036c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f000 8099 	beq.w	8003804 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036d2:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a82      	ldr	r2, [pc, #520]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036de:	f7fe f9bd 	bl	8001a5c <HAL_GetTick>
 80036e2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e6:	e00b      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e8:	f7fe f9b8 	bl	8001a5c <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b64      	cmp	r3, #100	; 0x64
 80036f6:	d903      	bls.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80036fe:	e005      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003700:	4b77      	ldr	r3, [pc, #476]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0ed      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800370c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003710:	2b00      	cmp	r3, #0
 8003712:	d173      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003714:	4b71      	ldr	r3, [pc, #452]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003716:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003718:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003720:	4053      	eors	r3, r2
 8003722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800372a:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003736:	4b69      	ldr	r3, [pc, #420]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a68      	ldr	r2, [pc, #416]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800373c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a65      	ldr	r2, [pc, #404]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800374e:	4a63      	ldr	r2, [pc, #396]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003754:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800375a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800375e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003762:	d118      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fe f97a 	bl	8001a5c <HAL_GetTick>
 8003768:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800376c:	e00d      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe f975 	bl	8001a5c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003778:	1ad2      	subs	r2, r2, r3
 800377a:	f241 3388 	movw	r3, #5000	; 0x1388
 800377e:	429a      	cmp	r2, r3
 8003780:	d903      	bls.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003788:	e005      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800378a:	4b54      	ldr	r3, [pc, #336]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0eb      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003796:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800379a:	2b00      	cmp	r3, #0
 800379c:	d129      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ae:	d10e      	bne.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x846>
 80037b0:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80037b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037c0:	091a      	lsrs	r2, r3, #4
 80037c2:	4b48      	ldr	r3, [pc, #288]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	4a45      	ldr	r2, [pc, #276]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c8:	430b      	orrs	r3, r1
 80037ca:	6113      	str	r3, [r2, #16]
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x852>
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	4a42      	ldr	r2, [pc, #264]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80037d8:	6113      	str	r3, [r2, #16]
 80037da:	4b40      	ldr	r3, [pc, #256]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037dc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80037de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ea:	4a3c      	ldr	r2, [pc, #240]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6713      	str	r3, [r2, #112]	; 0x70
 80037f0:	e008      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80037f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80037fa:	e003      	b.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f002 0301 	and.w	r3, r2, #1
 8003810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003814:	2300      	movs	r3, #0
 8003816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800381a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800381e:	460b      	mov	r3, r1
 8003820:	4313      	orrs	r3, r2
 8003822:	f000 808f 	beq.w	8003944 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800382a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382c:	2b28      	cmp	r3, #40	; 0x28
 800382e:	d871      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800391d 	.word	0x0800391d
 800383c:	08003915 	.word	0x08003915
 8003840:	08003915 	.word	0x08003915
 8003844:	08003915 	.word	0x08003915
 8003848:	08003915 	.word	0x08003915
 800384c:	08003915 	.word	0x08003915
 8003850:	08003915 	.word	0x08003915
 8003854:	08003915 	.word	0x08003915
 8003858:	080038e9 	.word	0x080038e9
 800385c:	08003915 	.word	0x08003915
 8003860:	08003915 	.word	0x08003915
 8003864:	08003915 	.word	0x08003915
 8003868:	08003915 	.word	0x08003915
 800386c:	08003915 	.word	0x08003915
 8003870:	08003915 	.word	0x08003915
 8003874:	08003915 	.word	0x08003915
 8003878:	080038ff 	.word	0x080038ff
 800387c:	08003915 	.word	0x08003915
 8003880:	08003915 	.word	0x08003915
 8003884:	08003915 	.word	0x08003915
 8003888:	08003915 	.word	0x08003915
 800388c:	08003915 	.word	0x08003915
 8003890:	08003915 	.word	0x08003915
 8003894:	08003915 	.word	0x08003915
 8003898:	0800391d 	.word	0x0800391d
 800389c:	08003915 	.word	0x08003915
 80038a0:	08003915 	.word	0x08003915
 80038a4:	08003915 	.word	0x08003915
 80038a8:	08003915 	.word	0x08003915
 80038ac:	08003915 	.word	0x08003915
 80038b0:	08003915 	.word	0x08003915
 80038b4:	08003915 	.word	0x08003915
 80038b8:	0800391d 	.word	0x0800391d
 80038bc:	08003915 	.word	0x08003915
 80038c0:	08003915 	.word	0x08003915
 80038c4:	08003915 	.word	0x08003915
 80038c8:	08003915 	.word	0x08003915
 80038cc:	08003915 	.word	0x08003915
 80038d0:	08003915 	.word	0x08003915
 80038d4:	08003915 	.word	0x08003915
 80038d8:	0800391d 	.word	0x0800391d
 80038dc:	58024400 	.word	0x58024400
 80038e0:	58024800 	.word	0x58024800
 80038e4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038ec:	3308      	adds	r3, #8
 80038ee:	2101      	movs	r1, #1
 80038f0:	4618      	mov	r0, r3
 80038f2:	f000 ffa7 	bl	8004844 <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80038fc:	e00f      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003902:	3328      	adds	r3, #40	; 0x28
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f84e 	bl	80049a8 <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003912:	e004      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800391a:	e000      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800391c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003926:	4bbf      	ldr	r3, [pc, #764]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800392a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800392e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003932:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003934:	4abb      	ldr	r2, [pc, #748]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003936:	430b      	orrs	r3, r1
 8003938:	6553      	str	r3, [r2, #84]	; 0x54
 800393a:	e003      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f002 0302 	and.w	r3, r2, #2
 8003950:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003954:	2300      	movs	r3, #0
 8003956:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800395a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800395e:	460b      	mov	r3, r1
 8003960:	4313      	orrs	r3, r2
 8003962:	d041      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800396a:	2b05      	cmp	r3, #5
 800396c:	d824      	bhi.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800396e:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003974:	080039c1 	.word	0x080039c1
 8003978:	0800398d 	.word	0x0800398d
 800397c:	080039a3 	.word	0x080039a3
 8003980:	080039c1 	.word	0x080039c1
 8003984:	080039c1 	.word	0x080039c1
 8003988:	080039c1 	.word	0x080039c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800398c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003990:	3308      	adds	r3, #8
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 ff55 	bl	8004844 <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039a0:	e00f      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039a6:	3328      	adds	r3, #40	; 0x28
 80039a8:	2101      	movs	r1, #1
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 fffc 	bl	80049a8 <RCCEx_PLL3_Config>
 80039b0:	4603      	mov	r3, r0
 80039b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80039b6:	e004      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80039be:	e000      	b.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80039c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d10a      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039ca:	4b96      	ldr	r3, [pc, #600]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f023 0107 	bic.w	r1, r3, #7
 80039d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d8:	4a92      	ldr	r2, [pc, #584]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039da:	430b      	orrs	r3, r1
 80039dc:	6553      	str	r3, [r2, #84]	; 0x54
 80039de:	e003      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f0:	f002 0304 	and.w	r3, r2, #4
 80039f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a02:	460b      	mov	r3, r1
 8003a04:	4313      	orrs	r3, r2
 8003a06:	d044      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	2b05      	cmp	r3, #5
 8003a12:	d825      	bhi.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a69 	.word	0x08003a69
 8003a20:	08003a35 	.word	0x08003a35
 8003a24:	08003a4b 	.word	0x08003a4b
 8003a28:	08003a69 	.word	0x08003a69
 8003a2c:	08003a69 	.word	0x08003a69
 8003a30:	08003a69 	.word	0x08003a69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a38:	3308      	adds	r3, #8
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 ff01 	bl	8004844 <RCCEx_PLL2_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a48:	e00f      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a4e:	3328      	adds	r3, #40	; 0x28
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 ffa8 	bl	80049a8 <RCCEx_PLL3_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003a5e:	e004      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a66:	e000      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a72:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	f023 0107 	bic.w	r1, r3, #7
 8003a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a82:	4a68      	ldr	r2, [pc, #416]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a84:	430b      	orrs	r3, r1
 8003a86:	6593      	str	r3, [r2, #88]	; 0x58
 8003a88:	e003      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f002 0320 	and.w	r3, r2, #32
 8003a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003aa8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	d055      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003abe:	d033      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ac0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac4:	d82c      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aca:	d02f      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad0:	d826      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ad2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ad6:	d02b      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ad8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003adc:	d820      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ade:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae2:	d012      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ae8:	d81a      	bhi.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d022      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003af2:	d115      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003af8:	3308      	adds	r3, #8
 8003afa:	2100      	movs	r1, #0
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fea1 	bl	8004844 <RCCEx_PLL2_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b08:	e015      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b0e:	3328      	adds	r3, #40	; 0x28
 8003b10:	2102      	movs	r1, #2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff48 	bl	80049a8 <RCCEx_PLL3_Config>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003b26:	e006      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b28:	bf00      	nop
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b2c:	bf00      	nop
 8003b2e:	e002      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10b      	bne.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b4e:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6553      	str	r3, [r2, #84]	; 0x54
 8003b54:	e003      	b.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b5a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003b6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b74:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d058      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b8a:	d033      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003b8c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b90:	d82c      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	d02f      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9c:	d826      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba2:	d02b      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ba8:	d820      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bae:	d012      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb4:	d81a      	bhi.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d022      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d115      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f000 fe3b 	bl	8004844 <RCCEx_PLL2_Config>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bd4:	e015      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bda:	3328      	adds	r3, #40	; 0x28
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fee2 	bl	80049a8 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003bea:	e00a      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bf4:	bf00      	nop
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bf8:	bf00      	nop
 8003bfa:	e002      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c0a:	4b06      	ldr	r3, [pc, #24]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c1a:	4a02      	ldr	r2, [pc, #8]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c20:	e006      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003c22:	bf00      	nop
 8003c24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c38:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003c3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003c46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	d055      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c58:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c5c:	d033      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003c5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003c62:	d82c      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c68:	d02f      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6e:	d826      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c70:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c74:	d02b      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003c76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c7a:	d820      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c80:	d012      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003c82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c86:	d81a      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d022      	beq.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c90:	d115      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c96:	3308      	adds	r3, #8
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fdd2 	bl	8004844 <RCCEx_PLL2_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cac:	3328      	adds	r3, #40	; 0x28
 8003cae:	2102      	movs	r1, #2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 fe79 	bl	80049a8 <RCCEx_PLL3_Config>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003cc4:	e006      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cc6:	bf00      	nop
 8003cc8:	e004      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cce:	bf00      	nop
 8003cd0:	e000      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d10b      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003cdc:	4ba0      	ldr	r3, [pc, #640]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cec:	4a9c      	ldr	r2, [pc, #624]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf2:	e003      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003cf8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d04:	f002 0308 	and.w	r3, r2, #8
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d12:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d16:	460b      	mov	r3, r1
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	d01e      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d2e:	3328      	adds	r3, #40	; 0x28
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fe38 	bl	80049a8 <RCCEx_PLL3_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003d44:	4b86      	ldr	r3, [pc, #536]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d54:	4a82      	ldr	r2, [pc, #520]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f002 0310 	and.w	r3, r2, #16
 8003d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d70:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d01e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d8c:	3328      	adds	r3, #40	; 0x28
 8003d8e:	2102      	movs	r1, #2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fe09 	bl	80049a8 <RCCEx_PLL3_Config>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003da2:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003db2:	4a6b      	ldr	r2, [pc, #428]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003dc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003dca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d03e      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de0:	d022      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003de6:	d81b      	bhi.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d003      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df0:	d00b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003df2:	e015      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003df8:	3308      	adds	r3, #8
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 fd21 	bl	8004844 <RCCEx_PLL2_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e08:	e00f      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e0e:	3328      	adds	r3, #40	; 0x28
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fdc8 	bl	80049a8 <RCCEx_PLL3_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e1e:	e004      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003e26:	e000      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e32:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e36:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e42:	4a47      	ldr	r2, [pc, #284]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6593      	str	r3, [r2, #88]	; 0x58
 8003e48:	e003      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003e4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e60:	2300      	movs	r3, #0
 8003e62:	677b      	str	r3, [r7, #116]	; 0x74
 8003e64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	d03b      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e7a:	d01f      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e80:	d818      	bhi.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e86:	d003      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e8c:	d007      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003e8e:	e011      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e90:	4b33      	ldr	r3, [pc, #204]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	4a32      	ldr	r2, [pc, #200]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003e9c:	e00f      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ea2:	3328      	adds	r3, #40	; 0x28
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fd7e 	bl	80049a8 <RCCEx_PLL3_Config>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003eb2:	e004      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003eba:	e000      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ec6:	4b26      	ldr	r3, [pc, #152]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed6:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6553      	str	r3, [r2, #84]	; 0x54
 8003edc:	e003      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ee2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ef8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003efc:	460b      	mov	r3, r1
 8003efe:	4313      	orrs	r3, r2
 8003f00:	d034      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f10:	d007      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003f12:	e011      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f18:	4a11      	ldr	r2, [pc, #68]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f20:	e00e      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f26:	3308      	adds	r3, #8
 8003f28:	2102      	movs	r1, #2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fc8a 	bl	8004844 <RCCEx_PLL2_Config>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003f48:	4b05      	ldr	r3, [pc, #20]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	4a02      	ldr	r2, [pc, #8]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f58:	430b      	orrs	r3, r1
 8003f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f5c:	e006      	b.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003f5e:	bf00      	nop
 8003f60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003f78:	663b      	str	r3, [r7, #96]	; 0x60
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f7e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003f82:	460b      	mov	r3, r1
 8003f84:	4313      	orrs	r3, r2
 8003f86:	d00c      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f8c:	3328      	adds	r3, #40	; 0x28
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fd09 	bl	80049a8 <RCCEx_PLL3_Config>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003faa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003fae:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	d036      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fc8:	d018      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8003fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fce:	d811      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd4:	d014      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8003fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fda:	d80b      	bhi.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d011      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8003fe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe6:	4bb7      	ldr	r3, [pc, #732]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	4ab6      	ldr	r2, [pc, #728]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003ff2:	e008      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ffa:	e004      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8003ffc:	bf00      	nop
 8003ffe:	e002      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004006:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400e:	4bad      	ldr	r3, [pc, #692]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800401a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401c:	4aa9      	ldr	r2, [pc, #676]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800401e:	430b      	orrs	r3, r1
 8004020:	6553      	str	r3, [r2, #84]	; 0x54
 8004022:	e003      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004028:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800402c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
 800403a:	2300      	movs	r3, #0
 800403c:	657b      	str	r3, [r7, #84]	; 0x54
 800403e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004042:	460b      	mov	r3, r1
 8004044:	4313      	orrs	r3, r2
 8004046:	d009      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004048:	4b9e      	ldr	r3, [pc, #632]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a9b      	ldr	r2, [pc, #620]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004058:	430b      	orrs	r3, r1
 800405a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004068:	64bb      	str	r3, [r7, #72]	; 0x48
 800406a:	2300      	movs	r3, #0
 800406c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d009      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004078:	4b92      	ldr	r3, [pc, #584]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800407a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004086:	4a8f      	ldr	r2, [pc, #572]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004088:	430b      	orrs	r3, r1
 800408a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800408c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004094:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004098:	643b      	str	r3, [r7, #64]	; 0x40
 800409a:	2300      	movs	r3, #0
 800409c:	647b      	str	r3, [r7, #68]	; 0x44
 800409e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80040a2:	460b      	mov	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	d00e      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040a8:	4b86      	ldr	r3, [pc, #536]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	4a85      	ldr	r2, [pc, #532]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80040b2:	6113      	str	r3, [r2, #16]
 80040b4:	4b83      	ldr	r3, [pc, #524]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040b6:	6919      	ldr	r1, [r3, #16]
 80040b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040c0:	4a80      	ldr	r2, [pc, #512]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c2:	430b      	orrs	r3, r1
 80040c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80040c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040d4:	2300      	movs	r3, #0
 80040d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d009      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80040e2:	4b78      	ldr	r3, [pc, #480]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	4a74      	ldr	r2, [pc, #464]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040f2:	430b      	orrs	r3, r1
 80040f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
 8004104:	2300      	movs	r3, #0
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
 8004108:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800410c:	460b      	mov	r3, r1
 800410e:	4313      	orrs	r3, r2
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004112:	4b6c      	ldr	r3, [pc, #432]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800411a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	4a68      	ldr	r2, [pc, #416]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004124:	430b      	orrs	r3, r1
 8004126:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	2100      	movs	r1, #0
 8004132:	62b9      	str	r1, [r7, #40]	; 0x28
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800413e:	460b      	mov	r3, r1
 8004140:	4313      	orrs	r3, r2
 8004142:	d011      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004148:	3308      	adds	r3, #8
 800414a:	2100      	movs	r1, #0
 800414c:	4618      	mov	r0, r3
 800414e:	f000 fb79 	bl	8004844 <RCCEx_PLL2_Config>
 8004152:	4603      	mov	r3, r0
 8004154:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004158:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004164:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	2100      	movs	r1, #0
 8004172:	6239      	str	r1, [r7, #32]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800417e:	460b      	mov	r3, r1
 8004180:	4313      	orrs	r3, r2
 8004182:	d011      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004188:	3308      	adds	r3, #8
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fb59 	bl	8004844 <RCCEx_PLL2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004198:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	2100      	movs	r1, #0
 80041b2:	61b9      	str	r1, [r7, #24]
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80041be:	460b      	mov	r3, r1
 80041c0:	4313      	orrs	r3, r2
 80041c2:	d011      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c8:	3308      	adds	r3, #8
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fb39 	bl	8004844 <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80041d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80041e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	2100      	movs	r1, #0
 80041f2:	6139      	str	r1, [r7, #16]
 80041f4:	f003 0308 	and.w	r3, r3, #8
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d011      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004208:	3328      	adds	r3, #40	; 0x28
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fbcb 	bl	80049a8 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004218:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004220:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004224:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800422c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004230:	2100      	movs	r1, #0
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d011      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004248:	3328      	adds	r3, #40	; 0x28
 800424a:	2101      	movs	r1, #1
 800424c:	4618      	mov	r0, r3
 800424e:	f000 fbab 	bl	80049a8 <RCCEx_PLL3_Config>
 8004252:	4603      	mov	r3, r0
 8004254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004258:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004260:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004264:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	2100      	movs	r1, #0
 8004272:	6039      	str	r1, [r7, #0]
 8004274:	f003 0320 	and.w	r3, r3, #32
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800427e:	460b      	mov	r3, r1
 8004280:	4313      	orrs	r3, r2
 8004282:	d011      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004288:	3328      	adds	r3, #40	; 0x28
 800428a:	2102      	movs	r1, #2
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fb8b 	bl	80049a8 <RCCEx_PLL3_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80042a8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80042bc:	46bd      	mov	sp, r7
 80042be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400

080042c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80042cc:	f7fe fe00 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 80042d0:	4602      	mov	r2, r0
 80042d2:	4b06      	ldr	r3, [pc, #24]	; (80042ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	091b      	lsrs	r3, r3, #4
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	4904      	ldr	r1, [pc, #16]	; (80042f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80042de:	5ccb      	ldrb	r3, [r1, r3]
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	58024400 	.word	0x58024400
 80042f0:	0800ad18 	.word	0x0800ad18

080042f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80042fc:	4ba1      	ldr	r3, [pc, #644]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004306:	4b9f      	ldr	r3, [pc, #636]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430a:	0b1b      	lsrs	r3, r3, #12
 800430c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004310:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004312:	4b9c      	ldr	r3, [pc, #624]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800431e:	4b99      	ldr	r3, [pc, #612]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004322:	08db      	lsrs	r3, r3, #3
 8004324:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	ee07 3a90 	vmov	s15, r3
 8004332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004336:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8111 	beq.w	8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b02      	cmp	r3, #2
 8004346:	f000 8083 	beq.w	8004450 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	2b02      	cmp	r3, #2
 800434e:	f200 80a1 	bhi.w	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d056      	beq.n	800440c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800435e:	e099      	b.n	8004494 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004360:	4b88      	ldr	r3, [pc, #544]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0320 	and.w	r3, r3, #32
 8004368:	2b00      	cmp	r3, #0
 800436a:	d02d      	beq.n	80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800436c:	4b85      	ldr	r3, [pc, #532]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	08db      	lsrs	r3, r3, #3
 8004372:	f003 0303 	and.w	r3, r3, #3
 8004376:	4a84      	ldr	r2, [pc, #528]	; (8004588 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004378:	fa22 f303 	lsr.w	r3, r2, r3
 800437c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	ee07 3a90 	vmov	s15, r3
 800438e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004396:	4b7b      	ldr	r3, [pc, #492]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800458c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80043c6:	e087      	b.n	80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	ee07 3a90 	vmov	s15, r3
 80043ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004590 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80043d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043da:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80043dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e2:	ee07 3a90 	vmov	s15, r3
 80043e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800458c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80043f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800440a:	e065      	b.n	80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	ee07 3a90 	vmov	s15, r3
 8004412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004416:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a56 	vldr	s11, [pc, #344]	; 800458c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800444e:	e043      	b.n	80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004598 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b48      	ldr	r3, [pc, #288]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a03 	vldr	s12, [r7, #12]
 8004476:	eddf 5a45 	vldr	s11, [pc, #276]	; 800458c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004492:	e021      	b.n	80044d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80044a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800458c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80044d8:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	0a5b      	lsrs	r3, r3, #9
 80044de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80044f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044fe:	ee17 2a90 	vmov	r2, s15
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004506:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	0c1b      	lsrs	r3, r3, #16
 800450c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004510:	ee07 3a90 	vmov	s15, r3
 8004514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004518:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800451c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004520:	edd7 6a07 	vldr	s13, [r7, #28]
 8004524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800452c:	ee17 2a90 	vmov	r2, s15
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	0e1b      	lsrs	r3, r3, #24
 800453a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800453e:	ee07 3a90 	vmov	s15, r3
 8004542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004546:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800454a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800454e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800455a:	ee17 2a90 	vmov	r2, s15
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004562:	e008      	b.n	8004576 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	609a      	str	r2, [r3, #8]
}
 8004576:	bf00      	nop
 8004578:	3724      	adds	r7, #36	; 0x24
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	58024400 	.word	0x58024400
 8004588:	03d09000 	.word	0x03d09000
 800458c:	46000000 	.word	0x46000000
 8004590:	4c742400 	.word	0x4c742400
 8004594:	4a742400 	.word	0x4a742400
 8004598:	4b742400 	.word	0x4b742400

0800459c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80045a4:	4ba1      	ldr	r3, [pc, #644]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a8:	f003 0303 	and.w	r3, r3, #3
 80045ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80045ae:	4b9f      	ldr	r3, [pc, #636]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	0d1b      	lsrs	r3, r3, #20
 80045b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80045ba:	4b9c      	ldr	r3, [pc, #624]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80045c6:	4b99      	ldr	r3, [pc, #612]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ca:	08db      	lsrs	r3, r3, #3
 80045cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 8111 	beq.w	800480c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	f000 8083 	beq.w	80046f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	f200 80a1 	bhi.w	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d056      	beq.n	80046b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004606:	e099      	b.n	800473c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004608:	4b88      	ldr	r3, [pc, #544]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b00      	cmp	r3, #0
 8004612:	d02d      	beq.n	8004670 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004614:	4b85      	ldr	r3, [pc, #532]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	08db      	lsrs	r3, r3, #3
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	4a84      	ldr	r2, [pc, #528]	; (8004830 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004620:	fa22 f303 	lsr.w	r3, r2, r3
 8004624:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800466e:	e087      	b.n	8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	ee07 3a90 	vmov	s15, r3
 8004676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800467a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004838 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800467e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004682:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004692:	ed97 6a03 	vldr	s12, [r7, #12]
 8004696:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800469a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046b2:	e065      	b.n	8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	ee07 3a90 	vmov	s15, r3
 80046ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800483c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80046c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c6:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ce:	ee07 3a90 	vmov	s15, r3
 80046d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80046de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046f6:	e043      	b.n	8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004840 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470a:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471a:	ed97 6a03 	vldr	s12, [r7, #12]
 800471e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800472e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473a:	e021      	b.n	8004780 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800483c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800474a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004762:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004834 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800477e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	0a5b      	lsrs	r3, r3, #9
 8004786:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800479a:	edd7 6a07 	vldr	s13, [r7, #28]
 800479e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047a6:	ee17 2a90 	vmov	r2, s15
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80047ae:	4b1f      	ldr	r3, [pc, #124]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	0c1b      	lsrs	r3, r3, #16
 80047b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047b8:	ee07 3a90 	vmov	s15, r3
 80047bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80047cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80047d4:	ee17 2a90 	vmov	r2, s15
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80047dc:	4b13      	ldr	r3, [pc, #76]	; (800482c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80047f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80047f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80047fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80047fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004802:	ee17 2a90 	vmov	r2, s15
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800480a:	e008      	b.n	800481e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	609a      	str	r2, [r3, #8]
}
 800481e:	bf00      	nop
 8004820:	3724      	adds	r7, #36	; 0x24
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	58024400 	.word	0x58024400
 8004830:	03d09000 	.word	0x03d09000
 8004834:	46000000 	.word	0x46000000
 8004838:	4c742400 	.word	0x4c742400
 800483c:	4a742400 	.word	0x4a742400
 8004840:	4b742400 	.word	0x4b742400

08004844 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004852:	4b53      	ldr	r3, [pc, #332]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b03      	cmp	r3, #3
 800485c:	d101      	bne.n	8004862 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e099      	b.n	8004996 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004862:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a4e      	ldr	r2, [pc, #312]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004868:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800486c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486e:	f7fd f8f5 	bl	8001a5c <HAL_GetTick>
 8004872:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004874:	e008      	b.n	8004888 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004876:	f7fd f8f1 	bl	8001a5c <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d901      	bls.n	8004888 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e086      	b.n	8004996 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004888:	4b45      	ldr	r3, [pc, #276]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f0      	bne.n	8004876 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004894:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004898:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	031b      	lsls	r3, r3, #12
 80048a2:	493f      	ldr	r1, [pc, #252]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	628b      	str	r3, [r1, #40]	; 0x28
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	025b      	lsls	r3, r3, #9
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	3b01      	subs	r3, #1
 80048d2:	061b      	lsls	r3, r3, #24
 80048d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048d8:	4931      	ldr	r1, [pc, #196]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048de:	4b30      	ldr	r3, [pc, #192]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	492d      	ldr	r1, [pc, #180]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048f0:	4b2b      	ldr	r3, [pc, #172]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	f023 0220 	bic.w	r2, r3, #32
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	4928      	ldr	r1, [pc, #160]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004902:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	4a26      	ldr	r2, [pc, #152]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004908:	f023 0310 	bic.w	r3, r3, #16
 800490c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004912:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <RCCEx_PLL2_Config+0x160>)
 8004914:	4013      	ands	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	69d2      	ldr	r2, [r2, #28]
 800491a:	00d2      	lsls	r2, r2, #3
 800491c:	4920      	ldr	r1, [pc, #128]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004922:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004928:	f043 0310 	orr.w	r3, r3, #16
 800492c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d106      	bne.n	8004942 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004934:	4b1a      	ldr	r3, [pc, #104]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800493a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800493e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004940:	e00f      	b.n	8004962 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d106      	bne.n	8004956 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4a14      	ldr	r2, [pc, #80]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800494e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004952:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004954:	e005      	b.n	8004962 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004956:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495a:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800495c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004960:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004962:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a0e      	ldr	r2, [pc, #56]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 8004968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800496c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800496e:	f7fd f875 	bl	8001a5c <HAL_GetTick>
 8004972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004974:	e008      	b.n	8004988 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004976:	f7fd f871 	bl	8001a5c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e006      	b.n	8004996 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <RCCEx_PLL2_Config+0x15c>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	58024400 	.word	0x58024400
 80049a4:	ffff0007 	.word	0xffff0007

080049a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049b6:	4b53      	ldr	r3, [pc, #332]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d101      	bne.n	80049c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e099      	b.n	8004afa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049c6:	4b4f      	ldr	r3, [pc, #316]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a4e      	ldr	r2, [pc, #312]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 80049cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d2:	f7fd f843 	bl	8001a5c <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049d8:	e008      	b.n	80049ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049da:	f7fd f83f 	bl	8001a5c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e086      	b.n	8004afa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049ec:	4b45      	ldr	r3, [pc, #276]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049f8:	4b42      	ldr	r3, [pc, #264]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 80049fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	051b      	lsls	r3, r3, #20
 8004a06:	493f      	ldr	r1, [pc, #252]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	041b      	lsls	r3, r3, #16
 8004a2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	3b01      	subs	r3, #1
 8004a36:	061b      	lsls	r3, r3, #24
 8004a38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a3c:	4931      	ldr	r1, [pc, #196]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a42:	4b30      	ldr	r3, [pc, #192]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	492d      	ldr	r1, [pc, #180]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a54:	4b2b      	ldr	r3, [pc, #172]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a58:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	4928      	ldr	r1, [pc, #160]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a66:	4b27      	ldr	r3, [pc, #156]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a76:	4b24      	ldr	r3, [pc, #144]	; (8004b08 <RCCEx_PLL3_Config+0x160>)
 8004a78:	4013      	ands	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69d2      	ldr	r2, [r2, #28]
 8004a7e:	00d2      	lsls	r2, r2, #3
 8004a80:	4920      	ldr	r1, [pc, #128]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a86:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a98:	4b1a      	ldr	r3, [pc, #104]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004a9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aa4:	e00f      	b.n	8004ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d106      	bne.n	8004aba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004aac:	4b15      	ldr	r3, [pc, #84]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004ab2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ab8:	e005      	b.n	8004ac6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004aba:	4b12      	ldr	r3, [pc, #72]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004abe:	4a11      	ldr	r2, [pc, #68]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004ac0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a0e      	ldr	r2, [pc, #56]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ad2:	f7fc ffc3 	bl	8001a5c <HAL_GetTick>
 8004ad6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ad8:	e008      	b.n	8004aec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ada:	f7fc ffbf 	bl	8001a5c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e006      	b.n	8004afa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004aec:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <RCCEx_PLL3_Config+0x15c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	58024400 	.word	0x58024400
 8004b08:	ffff0007 	.word	0xffff0007

08004b0c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e10f      	b.n	8004d3e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a87      	ldr	r2, [pc, #540]	; (8004d48 <HAL_SPI_Init+0x23c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00f      	beq.n	8004b4e <HAL_SPI_Init+0x42>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a86      	ldr	r2, [pc, #536]	; (8004d4c <HAL_SPI_Init+0x240>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d00a      	beq.n	8004b4e <HAL_SPI_Init+0x42>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a84      	ldr	r2, [pc, #528]	; (8004d50 <HAL_SPI_Init+0x244>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d005      	beq.n	8004b4e <HAL_SPI_Init+0x42>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	d901      	bls.n	8004b4e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e0f7      	b.n	8004d3e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fd5a 	bl	8005608 <SPI_GetPacketSize>
 8004b54:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a7b      	ldr	r2, [pc, #492]	; (8004d48 <HAL_SPI_Init+0x23c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00c      	beq.n	8004b7a <HAL_SPI_Init+0x6e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a79      	ldr	r2, [pc, #484]	; (8004d4c <HAL_SPI_Init+0x240>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <HAL_SPI_Init+0x6e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a78      	ldr	r2, [pc, #480]	; (8004d50 <HAL_SPI_Init+0x244>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d002      	beq.n	8004b7a <HAL_SPI_Init+0x6e>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d811      	bhi.n	8004b9e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004b7e:	4a72      	ldr	r2, [pc, #456]	; (8004d48 <HAL_SPI_Init+0x23c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d009      	beq.n	8004b98 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a70      	ldr	r2, [pc, #448]	; (8004d4c <HAL_SPI_Init+0x240>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d004      	beq.n	8004b98 <HAL_SPI_Init+0x8c>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6f      	ldr	r2, [pc, #444]	; (8004d50 <HAL_SPI_Init+0x244>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d104      	bne.n	8004ba2 <HAL_SPI_Init+0x96>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b10      	cmp	r3, #16
 8004b9c:	d901      	bls.n	8004ba2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e0cd      	b.n	8004d3e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d106      	bne.n	8004bbc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fc fbf4 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0201 	bic.w	r2, r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004bde:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004be8:	d119      	bne.n	8004c1e <HAL_SPI_Init+0x112>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf2:	d103      	bne.n	8004bfc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d008      	beq.n	8004c0e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10c      	bne.n	8004c1e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c0c:	d107      	bne.n	8004c1e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00f      	beq.n	8004c4a <HAL_SPI_Init+0x13e>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d90b      	bls.n	8004c4a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e007      	b.n	8004c5a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	ea42 0103 	orr.w	r1, r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	431a      	orrs	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	ea42 0103 	orr.w	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d113      	bne.n	8004cfa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ce4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40013000 	.word	0x40013000
 8004d4c:	40003800 	.word	0x40003800
 8004d50:	40003c00 	.word	0x40003c00

08004d54 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08a      	sub	sp, #40	; 0x28
 8004d58:	af02      	add	r7, sp, #8
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	3320      	adds	r3, #32
 8004d6a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_SPI_Transmit+0x2a>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e1e1      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d86:	f7fc fe69 	bl	8001a5c <HAL_GetTick>
 8004d8a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d007      	beq.n	8004da8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004da4:	7efb      	ldrb	r3, [r7, #27]
 8004da6:	e1cc      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_SPI_Transmit+0x60>
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004dc0:	7efb      	ldrb	r3, [r7, #27]
 8004dc2:	e1be      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004e14:	d108      	bne.n	8004e28 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	e009      	b.n	8004e3c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004e3a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	4b96      	ldr	r3, [pc, #600]	; (800509c <HAL_SPI_Transmit+0x348>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	88f9      	ldrh	r1, [r7, #6]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e68:	d107      	bne.n	8004e7a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d947      	bls.n	8004f12 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004e82:	e03f      	b.n	8004f04 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d114      	bne.n	8004ebc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004eba:	e023      	b.n	8004f04 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ebc:	f7fc fdce 	bl	8001a5c <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d803      	bhi.n	8004ed4 <HAL_SPI_Transmit+0x180>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed2:	d102      	bne.n	8004eda <HAL_SPI_Transmit+0x186>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d114      	bne.n	8004f04 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fac6 	bl	800546c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	e11e      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1b9      	bne.n	8004e84 <HAL_SPI_Transmit+0x130>
 8004f10:	e0f1      	b.n	80050f6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	2b07      	cmp	r3, #7
 8004f18:	f240 80e6 	bls.w	80050e8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8004f1c:	e05d      	b.n	8004fda <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d132      	bne.n	8004f92 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d918      	bls.n	8004f6a <HAL_SPI_Transmit+0x216>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d014      	beq.n	8004f6a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6812      	ldr	r2, [r2, #0]
 8004f4a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f50:	1d1a      	adds	r2, r3, #4
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	3b02      	subs	r3, #2
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004f68:	e037      	b.n	8004fda <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f6e:	881a      	ldrh	r2, [r3, #0]
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f78:	1c9a      	adds	r2, r3, #2
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	3b01      	subs	r3, #1
 8004f88:	b29a      	uxth	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004f90:	e023      	b.n	8004fda <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f92:	f7fc fd63 	bl	8001a5c <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d803      	bhi.n	8004faa <HAL_SPI_Transmit+0x256>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa8:	d102      	bne.n	8004fb0 <HAL_SPI_Transmit+0x25c>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d114      	bne.n	8004fda <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fa5b 	bl	800546c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0b3      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d19b      	bne.n	8004f1e <HAL_SPI_Transmit+0x1ca>
 8004fe6:	e086      	b.n	80050f6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d154      	bne.n	80050a0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d918      	bls.n	8005034 <HAL_SPI_Transmit+0x2e0>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005006:	2b40      	cmp	r3, #64	; 0x40
 8005008:	d914      	bls.n	8005034 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6812      	ldr	r2, [r2, #0]
 8005014:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b04      	subs	r3, #4
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005032:	e059      	b.n	80050e8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800503a:	b29b      	uxth	r3, r3
 800503c:	2b01      	cmp	r3, #1
 800503e:	d917      	bls.n	8005070 <HAL_SPI_Transmit+0x31c>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d013      	beq.n	8005070 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504c:	881a      	ldrh	r2, [r3, #0]
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005056:	1c9a      	adds	r2, r3, #2
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b02      	subs	r3, #2
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800506e:	e03b      	b.n	80050e8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3320      	adds	r3, #32
 800507a:	7812      	ldrb	r2, [r2, #0]
 800507c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800508e:	b29b      	uxth	r3, r3
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800509a:	e025      	b.n	80050e8 <HAL_SPI_Transmit+0x394>
 800509c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050a0:	f7fc fcdc 	bl	8001a5c <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d803      	bhi.n	80050b8 <HAL_SPI_Transmit+0x364>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d102      	bne.n	80050be <HAL_SPI_Transmit+0x36a>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d114      	bne.n	80050e8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 f9d4 	bl	800546c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e02c      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f47f af79 	bne.w	8004fe8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2108      	movs	r1, #8
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fa53 	bl	80055ac <SPI_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 f9a5 	bl	800546c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 8005140:	7efb      	ldrb	r3, [r7, #27]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop

0800514c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4613      	mov	r3, r2
 800515a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800515c:	2300      	movs	r3, #0
 800515e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	3330      	adds	r3, #48	; 0x30
 8005166:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_SPI_Receive+0x2a>
 8005172:	2302      	movs	r3, #2
 8005174:	e173      	b.n	800545e <HAL_SPI_Receive+0x312>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800517e:	f7fc fc6d 	bl	8001a5c <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d007      	beq.n	80051a0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 8005190:	2302      	movs	r3, #2
 8005192:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800519c:	7ffb      	ldrb	r3, [r7, #31]
 800519e:	e15e      	b.n	800545e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Receive+0x60>
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d107      	bne.n	80051bc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80051b8:	7ffb      	ldrb	r3, [r7, #31]
 80051ba:	e150      	b.n	800545e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2204      	movs	r2, #4
 80051c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	88fa      	ldrh	r2, [r7, #6]
 80051d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	88fa      	ldrh	r2, [r7, #6]
 80051de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800520c:	d108      	bne.n	8005220 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e009      	b.n	8005234 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005232:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b8b      	ldr	r3, [pc, #556]	; (8005468 <HAL_SPI_Receive+0x31c>)
 800523c:	4013      	ands	r3, r2
 800523e:	88f9      	ldrh	r1, [r7, #6]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	430b      	orrs	r3, r1
 8005246:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f042 0201 	orr.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005260:	d107      	bne.n	8005272 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005270:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d948      	bls.n	800530c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800527a:	e040      	b.n	80052fe <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	f248 0308 	movw	r3, #32776	; 0x8008
 8005286:	4013      	ands	r3, r2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d014      	beq.n	80052b6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005296:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800529c:	1d1a      	adds	r2, r3, #4
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80052b4:	e023      	b.n	80052fe <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b6:	f7fc fbd1 	bl	8001a5c <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d803      	bhi.n	80052ce <HAL_SPI_Receive+0x182>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d102      	bne.n	80052d4 <HAL_SPI_Receive+0x188>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d114      	bne.n	80052fe <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f8c9 	bl	800546c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e0af      	b.n	800545e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1b8      	bne.n	800527c <HAL_SPI_Receive+0x130>
 800530a:	e095      	b.n	8005438 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	2b07      	cmp	r3, #7
 8005312:	f240 808b 	bls.w	800542c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005316:	e03f      	b.n	8005398 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d114      	bne.n	8005350 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	8812      	ldrh	r2, [r2, #0]
 800532e:	b292      	uxth	r2, r2
 8005330:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005336:	1c9a      	adds	r2, r3, #2
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800534e:	e023      	b.n	8005398 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005350:	f7fc fb84 	bl	8001a5c <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d803      	bhi.n	8005368 <HAL_SPI_Receive+0x21c>
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005366:	d102      	bne.n	800536e <HAL_SPI_Receive+0x222>
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d114      	bne.n	8005398 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 f87c 	bl	800546c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e062      	b.n	800545e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1b9      	bne.n	8005318 <HAL_SPI_Receive+0x1cc>
 80053a4:	e048      	b.n	8005438 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d117      	bne.n	80053e4 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053c0:	7812      	ldrb	r2, [r2, #0]
 80053c2:	b2d2      	uxtb	r2, r2
 80053c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80053e2:	e023      	b.n	800542c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e4:	f7fc fb3a 	bl	8001a5c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d803      	bhi.n	80053fc <HAL_SPI_Receive+0x2b0>
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d102      	bne.n	8005402 <HAL_SPI_Receive+0x2b6>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d114      	bne.n	800542c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8005402:	68f8      	ldr	r0, [r7, #12]
 8005404:	f000 f832 	bl	800546c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005416:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e018      	b.n	800545e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1b6      	bne.n	80053a6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f817 	bl	800546c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800545c:	7ffb      	ldrb	r3, [r7, #31]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3720      	adds	r7, #32
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	ffff0000 	.word	0xffff0000

0800546c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0208 	orr.w	r2, r2, #8
 800548a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0210 	orr.w	r2, r2, #16
 800549a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6919      	ldr	r1, [r3, #16]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b3c      	ldr	r3, [pc, #240]	; (80055a8 <SPI_CloseTransfer+0x13c>)
 80054b8:	400b      	ands	r3, r1
 80054ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80054ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b04      	cmp	r3, #4
 80054d6:	d014      	beq.n	8005502 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 0320 	and.w	r3, r3, #32
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00f      	beq.n	8005502 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699a      	ldr	r2, [r3, #24]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0220 	orr.w	r2, r2, #32
 8005500:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b03      	cmp	r3, #3
 800550c:	d014      	beq.n	8005538 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	d00f      	beq.n	8005538 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551e:	f043 0204 	orr.w	r2, r3, #4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	699a      	ldr	r2, [r3, #24]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005536:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800553e:	2b00      	cmp	r3, #0
 8005540:	d00f      	beq.n	8005562 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005548:	f043 0201 	orr.w	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	699a      	ldr	r2, [r3, #24]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005560:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00f      	beq.n	800558c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005572:	f043 0208 	orr.w	r2, r3, #8
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699a      	ldr	r2, [r3, #24]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800559c:	bf00      	nop
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	fffffc90 	.word	0xfffffc90

080055ac <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	4613      	mov	r3, r2
 80055ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80055bc:	e010      	b.n	80055e0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055be:	f7fc fa4d 	bl	8001a5c <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d803      	bhi.n	80055d6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d102      	bne.n	80055dc <SPI_WaitOnFlagUntilTimeout+0x30>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e00f      	b.n	8005600 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	4013      	ands	r3, r2
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	bf0c      	ite	eq
 80055f0:	2301      	moveq	r3, #1
 80055f2:	2300      	movne	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	79fb      	ldrb	r3, [r7, #7]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d0df      	beq.n	80055be <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80055fe:	2300      	movs	r3, #0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005614:	095b      	lsrs	r3, r3, #5
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	3307      	adds	r3, #7
 8005626:	08db      	lsrs	r3, r3, #3
 8005628:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b082      	sub	sp, #8
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e042      	b.n	80056d6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	2b00      	cmp	r3, #0
 8005658:	d106      	bne.n	8005668 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fc f8e2 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2224      	movs	r2, #36	; 0x24
 800566c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 0201 	bic.w	r2, r2, #1
 800567e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8bb 	bl	80057fc <UART_SetConfig>
 8005686:	4603      	mov	r3, r0
 8005688:	2b01      	cmp	r3, #1
 800568a:	d101      	bne.n	8005690 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e022      	b.n	80056d6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 ff1b 	bl	80064d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f042 0201 	orr.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 ffa2 	bl	8006618 <UART_CheckIdleState>
 80056d4:	4603      	mov	r3, r0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b08a      	sub	sp, #40	; 0x28
 80056e2:	af02      	add	r7, sp, #8
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d17b      	bne.n	80057f0 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_UART_Transmit+0x26>
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e074      	b.n	80057f2 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2221      	movs	r2, #33	; 0x21
 8005714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005718:	f7fc f9a0 	bl	8001a5c <HAL_GetTick>
 800571c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	88fa      	ldrh	r2, [r7, #6]
 8005722:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	88fa      	ldrh	r2, [r7, #6]
 800572a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005736:	d108      	bne.n	800574a <HAL_UART_Transmit+0x6c>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005740:	2300      	movs	r3, #0
 8005742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	61bb      	str	r3, [r7, #24]
 8005748:	e003      	b.n	8005752 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005752:	e030      	b.n	80057b6 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	2180      	movs	r1, #128	; 0x80
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f001 f804 	bl	800676c <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e03d      	b.n	80057f2 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10b      	bne.n	8005794 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800578a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	3302      	adds	r3, #2
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	e007      	b.n	80057a4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	781a      	ldrb	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3301      	adds	r3, #1
 80057a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1c8      	bne.n	8005754 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2200      	movs	r2, #0
 80057ca:	2140      	movs	r1, #64	; 0x40
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 ffcd 	bl	800676c <UART_WaitOnFlagUntilTimeout>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d005      	beq.n	80057e4 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e006      	b.n	80057f2 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e000      	b.n	80057f2 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80057f0:	2302      	movs	r3, #2
  }
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005800:	b092      	sub	sp, #72	; 0x48
 8005802:	af00      	add	r7, sp, #0
 8005804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	431a      	orrs	r2, r3
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	431a      	orrs	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	4313      	orrs	r3, r2
 8005822:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	4bbe      	ldr	r3, [pc, #760]	; (8005b24 <UART_SetConfig+0x328>)
 800582c:	4013      	ands	r3, r2
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	6812      	ldr	r2, [r2, #0]
 8005832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005834:	430b      	orrs	r3, r1
 8005836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4ab3      	ldr	r2, [pc, #716]	; (8005b28 <UART_SetConfig+0x32c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	6a1b      	ldr	r3, [r3, #32]
 8005862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005864:	4313      	orrs	r3, r2
 8005866:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	4baf      	ldr	r3, [pc, #700]	; (8005b2c <UART_SetConfig+0x330>)
 8005870:	4013      	ands	r3, r2
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005878:	430b      	orrs	r3, r1
 800587a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	f023 010f 	bic.w	r1, r3, #15
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4aa6      	ldr	r2, [pc, #664]	; (8005b30 <UART_SetConfig+0x334>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d177      	bne.n	800598c <UART_SetConfig+0x190>
 800589c:	4ba5      	ldr	r3, [pc, #660]	; (8005b34 <UART_SetConfig+0x338>)
 800589e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a4:	2b28      	cmp	r3, #40	; 0x28
 80058a6:	d86d      	bhi.n	8005984 <UART_SetConfig+0x188>
 80058a8:	a201      	add	r2, pc, #4	; (adr r2, 80058b0 <UART_SetConfig+0xb4>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	08005955 	.word	0x08005955
 80058b4:	08005985 	.word	0x08005985
 80058b8:	08005985 	.word	0x08005985
 80058bc:	08005985 	.word	0x08005985
 80058c0:	08005985 	.word	0x08005985
 80058c4:	08005985 	.word	0x08005985
 80058c8:	08005985 	.word	0x08005985
 80058cc:	08005985 	.word	0x08005985
 80058d0:	0800595d 	.word	0x0800595d
 80058d4:	08005985 	.word	0x08005985
 80058d8:	08005985 	.word	0x08005985
 80058dc:	08005985 	.word	0x08005985
 80058e0:	08005985 	.word	0x08005985
 80058e4:	08005985 	.word	0x08005985
 80058e8:	08005985 	.word	0x08005985
 80058ec:	08005985 	.word	0x08005985
 80058f0:	08005965 	.word	0x08005965
 80058f4:	08005985 	.word	0x08005985
 80058f8:	08005985 	.word	0x08005985
 80058fc:	08005985 	.word	0x08005985
 8005900:	08005985 	.word	0x08005985
 8005904:	08005985 	.word	0x08005985
 8005908:	08005985 	.word	0x08005985
 800590c:	08005985 	.word	0x08005985
 8005910:	0800596d 	.word	0x0800596d
 8005914:	08005985 	.word	0x08005985
 8005918:	08005985 	.word	0x08005985
 800591c:	08005985 	.word	0x08005985
 8005920:	08005985 	.word	0x08005985
 8005924:	08005985 	.word	0x08005985
 8005928:	08005985 	.word	0x08005985
 800592c:	08005985 	.word	0x08005985
 8005930:	08005975 	.word	0x08005975
 8005934:	08005985 	.word	0x08005985
 8005938:	08005985 	.word	0x08005985
 800593c:	08005985 	.word	0x08005985
 8005940:	08005985 	.word	0x08005985
 8005944:	08005985 	.word	0x08005985
 8005948:	08005985 	.word	0x08005985
 800594c:	08005985 	.word	0x08005985
 8005950:	0800597d 	.word	0x0800597d
 8005954:	2301      	movs	r3, #1
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800595a:	e326      	b.n	8005faa <UART_SetConfig+0x7ae>
 800595c:	2304      	movs	r3, #4
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005962:	e322      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005964:	2308      	movs	r3, #8
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800596a:	e31e      	b.n	8005faa <UART_SetConfig+0x7ae>
 800596c:	2310      	movs	r3, #16
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e31a      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005974:	2320      	movs	r3, #32
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e316      	b.n	8005faa <UART_SetConfig+0x7ae>
 800597c:	2340      	movs	r3, #64	; 0x40
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e312      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e30e      	b.n	8005faa <UART_SetConfig+0x7ae>
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a69      	ldr	r2, [pc, #420]	; (8005b38 <UART_SetConfig+0x33c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d130      	bne.n	80059f8 <UART_SetConfig+0x1fc>
 8005996:	4b67      	ldr	r3, [pc, #412]	; (8005b34 <UART_SetConfig+0x338>)
 8005998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	2b05      	cmp	r3, #5
 80059a0:	d826      	bhi.n	80059f0 <UART_SetConfig+0x1f4>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x1ac>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059c1 	.word	0x080059c1
 80059ac:	080059c9 	.word	0x080059c9
 80059b0:	080059d1 	.word	0x080059d1
 80059b4:	080059d9 	.word	0x080059d9
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e9 	.word	0x080059e9
 80059c0:	2300      	movs	r3, #0
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059c6:	e2f0      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059c8:	2304      	movs	r3, #4
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ce:	e2ec      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059d0:	2308      	movs	r3, #8
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059d6:	e2e8      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059d8:	2310      	movs	r3, #16
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059de:	e2e4      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059e0:	2320      	movs	r3, #32
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e6:	e2e0      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059e8:	2340      	movs	r3, #64	; 0x40
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ee:	e2dc      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059f0:	2380      	movs	r3, #128	; 0x80
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f6:	e2d8      	b.n	8005faa <UART_SetConfig+0x7ae>
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a4f      	ldr	r2, [pc, #316]	; (8005b3c <UART_SetConfig+0x340>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d130      	bne.n	8005a64 <UART_SetConfig+0x268>
 8005a02:	4b4c      	ldr	r3, [pc, #304]	; (8005b34 <UART_SetConfig+0x338>)
 8005a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	2b05      	cmp	r3, #5
 8005a0c:	d826      	bhi.n	8005a5c <UART_SetConfig+0x260>
 8005a0e:	a201      	add	r2, pc, #4	; (adr r2, 8005a14 <UART_SetConfig+0x218>)
 8005a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a14:	08005a2d 	.word	0x08005a2d
 8005a18:	08005a35 	.word	0x08005a35
 8005a1c:	08005a3d 	.word	0x08005a3d
 8005a20:	08005a45 	.word	0x08005a45
 8005a24:	08005a4d 	.word	0x08005a4d
 8005a28:	08005a55 	.word	0x08005a55
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e2ba      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a34:	2304      	movs	r3, #4
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a3a:	e2b6      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a3c:	2308      	movs	r3, #8
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a42:	e2b2      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a44:	2310      	movs	r3, #16
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a4a:	e2ae      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a4c:	2320      	movs	r3, #32
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a52:	e2aa      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a54:	2340      	movs	r3, #64	; 0x40
 8005a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a5a:	e2a6      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a5c:	2380      	movs	r3, #128	; 0x80
 8005a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a62:	e2a2      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a35      	ldr	r2, [pc, #212]	; (8005b40 <UART_SetConfig+0x344>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d130      	bne.n	8005ad0 <UART_SetConfig+0x2d4>
 8005a6e:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <UART_SetConfig+0x338>)
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	2b05      	cmp	r3, #5
 8005a78:	d826      	bhi.n	8005ac8 <UART_SetConfig+0x2cc>
 8005a7a:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <UART_SetConfig+0x284>)
 8005a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a80:	08005a99 	.word	0x08005a99
 8005a84:	08005aa1 	.word	0x08005aa1
 8005a88:	08005aa9 	.word	0x08005aa9
 8005a8c:	08005ab1 	.word	0x08005ab1
 8005a90:	08005ab9 	.word	0x08005ab9
 8005a94:	08005ac1 	.word	0x08005ac1
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a9e:	e284      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aa6:	e280      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005aa8:	2308      	movs	r3, #8
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005aae:	e27c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ab6:	e278      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005ab8:	2320      	movs	r3, #32
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005abe:	e274      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ac6:	e270      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ace:	e26c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1b      	ldr	r2, [pc, #108]	; (8005b44 <UART_SetConfig+0x348>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d142      	bne.n	8005b60 <UART_SetConfig+0x364>
 8005ada:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <UART_SetConfig+0x338>)
 8005adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b05      	cmp	r3, #5
 8005ae4:	d838      	bhi.n	8005b58 <UART_SetConfig+0x35c>
 8005ae6:	a201      	add	r2, pc, #4	; (adr r2, 8005aec <UART_SetConfig+0x2f0>)
 8005ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aec:	08005b05 	.word	0x08005b05
 8005af0:	08005b0d 	.word	0x08005b0d
 8005af4:	08005b15 	.word	0x08005b15
 8005af8:	08005b1d 	.word	0x08005b1d
 8005afc:	08005b49 	.word	0x08005b49
 8005b00:	08005b51 	.word	0x08005b51
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e24e      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b0c:	2304      	movs	r3, #4
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e24a      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b14:	2308      	movs	r3, #8
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e246      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e242      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b24:	cfff69f3 	.word	0xcfff69f3
 8005b28:	58000c00 	.word	0x58000c00
 8005b2c:	11fff4ff 	.word	0x11fff4ff
 8005b30:	40011000 	.word	0x40011000
 8005b34:	58024400 	.word	0x58024400
 8005b38:	40004400 	.word	0x40004400
 8005b3c:	40004800 	.word	0x40004800
 8005b40:	40004c00 	.word	0x40004c00
 8005b44:	40005000 	.word	0x40005000
 8005b48:	2320      	movs	r3, #32
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b4e:	e22c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b50:	2340      	movs	r3, #64	; 0x40
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b56:	e228      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b5e:	e224      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4ab1      	ldr	r2, [pc, #708]	; (8005e2c <UART_SetConfig+0x630>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d176      	bne.n	8005c58 <UART_SetConfig+0x45c>
 8005b6a:	4bb1      	ldr	r3, [pc, #708]	; (8005e30 <UART_SetConfig+0x634>)
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b72:	2b28      	cmp	r3, #40	; 0x28
 8005b74:	d86c      	bhi.n	8005c50 <UART_SetConfig+0x454>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <UART_SetConfig+0x380>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005c21 	.word	0x08005c21
 8005b80:	08005c51 	.word	0x08005c51
 8005b84:	08005c51 	.word	0x08005c51
 8005b88:	08005c51 	.word	0x08005c51
 8005b8c:	08005c51 	.word	0x08005c51
 8005b90:	08005c51 	.word	0x08005c51
 8005b94:	08005c51 	.word	0x08005c51
 8005b98:	08005c51 	.word	0x08005c51
 8005b9c:	08005c29 	.word	0x08005c29
 8005ba0:	08005c51 	.word	0x08005c51
 8005ba4:	08005c51 	.word	0x08005c51
 8005ba8:	08005c51 	.word	0x08005c51
 8005bac:	08005c51 	.word	0x08005c51
 8005bb0:	08005c51 	.word	0x08005c51
 8005bb4:	08005c51 	.word	0x08005c51
 8005bb8:	08005c51 	.word	0x08005c51
 8005bbc:	08005c31 	.word	0x08005c31
 8005bc0:	08005c51 	.word	0x08005c51
 8005bc4:	08005c51 	.word	0x08005c51
 8005bc8:	08005c51 	.word	0x08005c51
 8005bcc:	08005c51 	.word	0x08005c51
 8005bd0:	08005c51 	.word	0x08005c51
 8005bd4:	08005c51 	.word	0x08005c51
 8005bd8:	08005c51 	.word	0x08005c51
 8005bdc:	08005c39 	.word	0x08005c39
 8005be0:	08005c51 	.word	0x08005c51
 8005be4:	08005c51 	.word	0x08005c51
 8005be8:	08005c51 	.word	0x08005c51
 8005bec:	08005c51 	.word	0x08005c51
 8005bf0:	08005c51 	.word	0x08005c51
 8005bf4:	08005c51 	.word	0x08005c51
 8005bf8:	08005c51 	.word	0x08005c51
 8005bfc:	08005c41 	.word	0x08005c41
 8005c00:	08005c51 	.word	0x08005c51
 8005c04:	08005c51 	.word	0x08005c51
 8005c08:	08005c51 	.word	0x08005c51
 8005c0c:	08005c51 	.word	0x08005c51
 8005c10:	08005c51 	.word	0x08005c51
 8005c14:	08005c51 	.word	0x08005c51
 8005c18:	08005c51 	.word	0x08005c51
 8005c1c:	08005c49 	.word	0x08005c49
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c26:	e1c0      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c28:	2304      	movs	r3, #4
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2e:	e1bc      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c30:	2308      	movs	r3, #8
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c36:	e1b8      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c38:	2310      	movs	r3, #16
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3e:	e1b4      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c40:	2320      	movs	r3, #32
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c46:	e1b0      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c48:	2340      	movs	r3, #64	; 0x40
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4e:	e1ac      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c50:	2380      	movs	r3, #128	; 0x80
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e1a8      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a75      	ldr	r2, [pc, #468]	; (8005e34 <UART_SetConfig+0x638>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d130      	bne.n	8005cc4 <UART_SetConfig+0x4c8>
 8005c62:	4b73      	ldr	r3, [pc, #460]	; (8005e30 <UART_SetConfig+0x634>)
 8005c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c66:	f003 0307 	and.w	r3, r3, #7
 8005c6a:	2b05      	cmp	r3, #5
 8005c6c:	d826      	bhi.n	8005cbc <UART_SetConfig+0x4c0>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <UART_SetConfig+0x478>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005c8d 	.word	0x08005c8d
 8005c78:	08005c95 	.word	0x08005c95
 8005c7c:	08005c9d 	.word	0x08005c9d
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c92:	e18a      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c94:	2304      	movs	r3, #4
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9a:	e186      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005c9c:	2308      	movs	r3, #8
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca2:	e182      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005caa:	e17e      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005cac:	2320      	movs	r3, #32
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb2:	e17a      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005cb4:	2340      	movs	r3, #64	; 0x40
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cba:	e176      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005cbc:	2380      	movs	r3, #128	; 0x80
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc2:	e172      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a5b      	ldr	r2, [pc, #364]	; (8005e38 <UART_SetConfig+0x63c>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d130      	bne.n	8005d30 <UART_SetConfig+0x534>
 8005cce:	4b58      	ldr	r3, [pc, #352]	; (8005e30 <UART_SetConfig+0x634>)
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	2b05      	cmp	r3, #5
 8005cd8:	d826      	bhi.n	8005d28 <UART_SetConfig+0x52c>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <UART_SetConfig+0x4e4>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005cf9 	.word	0x08005cf9
 8005ce4:	08005d01 	.word	0x08005d01
 8005ce8:	08005d09 	.word	0x08005d09
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d19 	.word	0x08005d19
 8005cf4:	08005d21 	.word	0x08005d21
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfe:	e154      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d00:	2304      	movs	r3, #4
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d06:	e150      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0e:	e14c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d10:	2310      	movs	r3, #16
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d16:	e148      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d18:	2320      	movs	r3, #32
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1e:	e144      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d20:	2340      	movs	r3, #64	; 0x40
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d26:	e140      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d28:	2380      	movs	r3, #128	; 0x80
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2e:	e13c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a41      	ldr	r2, [pc, #260]	; (8005e3c <UART_SetConfig+0x640>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	f040 8082 	bne.w	8005e40 <UART_SetConfig+0x644>
 8005d3c:	4b3c      	ldr	r3, [pc, #240]	; (8005e30 <UART_SetConfig+0x634>)
 8005d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d44:	2b28      	cmp	r3, #40	; 0x28
 8005d46:	d86d      	bhi.n	8005e24 <UART_SetConfig+0x628>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <UART_SetConfig+0x554>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005df5 	.word	0x08005df5
 8005d54:	08005e25 	.word	0x08005e25
 8005d58:	08005e25 	.word	0x08005e25
 8005d5c:	08005e25 	.word	0x08005e25
 8005d60:	08005e25 	.word	0x08005e25
 8005d64:	08005e25 	.word	0x08005e25
 8005d68:	08005e25 	.word	0x08005e25
 8005d6c:	08005e25 	.word	0x08005e25
 8005d70:	08005dfd 	.word	0x08005dfd
 8005d74:	08005e25 	.word	0x08005e25
 8005d78:	08005e25 	.word	0x08005e25
 8005d7c:	08005e25 	.word	0x08005e25
 8005d80:	08005e25 	.word	0x08005e25
 8005d84:	08005e25 	.word	0x08005e25
 8005d88:	08005e25 	.word	0x08005e25
 8005d8c:	08005e25 	.word	0x08005e25
 8005d90:	08005e05 	.word	0x08005e05
 8005d94:	08005e25 	.word	0x08005e25
 8005d98:	08005e25 	.word	0x08005e25
 8005d9c:	08005e25 	.word	0x08005e25
 8005da0:	08005e25 	.word	0x08005e25
 8005da4:	08005e25 	.word	0x08005e25
 8005da8:	08005e25 	.word	0x08005e25
 8005dac:	08005e25 	.word	0x08005e25
 8005db0:	08005e0d 	.word	0x08005e0d
 8005db4:	08005e25 	.word	0x08005e25
 8005db8:	08005e25 	.word	0x08005e25
 8005dbc:	08005e25 	.word	0x08005e25
 8005dc0:	08005e25 	.word	0x08005e25
 8005dc4:	08005e25 	.word	0x08005e25
 8005dc8:	08005e25 	.word	0x08005e25
 8005dcc:	08005e25 	.word	0x08005e25
 8005dd0:	08005e15 	.word	0x08005e15
 8005dd4:	08005e25 	.word	0x08005e25
 8005dd8:	08005e25 	.word	0x08005e25
 8005ddc:	08005e25 	.word	0x08005e25
 8005de0:	08005e25 	.word	0x08005e25
 8005de4:	08005e25 	.word	0x08005e25
 8005de8:	08005e25 	.word	0x08005e25
 8005dec:	08005e25 	.word	0x08005e25
 8005df0:	08005e1d 	.word	0x08005e1d
 8005df4:	2301      	movs	r3, #1
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005dfa:	e0d6      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005dfc:	2304      	movs	r3, #4
 8005dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e02:	e0d2      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005e04:	2308      	movs	r3, #8
 8005e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e0a:	e0ce      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005e0c:	2310      	movs	r3, #16
 8005e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e12:	e0ca      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005e14:	2320      	movs	r3, #32
 8005e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e1a:	e0c6      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005e1c:	2340      	movs	r3, #64	; 0x40
 8005e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e22:	e0c2      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005e24:	2380      	movs	r3, #128	; 0x80
 8005e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e2a:	e0be      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005e2c:	40011400 	.word	0x40011400
 8005e30:	58024400 	.word	0x58024400
 8005e34:	40007800 	.word	0x40007800
 8005e38:	40007c00 	.word	0x40007c00
 8005e3c:	40011800 	.word	0x40011800
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4aad      	ldr	r2, [pc, #692]	; (80060fc <UART_SetConfig+0x900>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d176      	bne.n	8005f38 <UART_SetConfig+0x73c>
 8005e4a:	4bad      	ldr	r3, [pc, #692]	; (8006100 <UART_SetConfig+0x904>)
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e52:	2b28      	cmp	r3, #40	; 0x28
 8005e54:	d86c      	bhi.n	8005f30 <UART_SetConfig+0x734>
 8005e56:	a201      	add	r2, pc, #4	; (adr r2, 8005e5c <UART_SetConfig+0x660>)
 8005e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e5c:	08005f01 	.word	0x08005f01
 8005e60:	08005f31 	.word	0x08005f31
 8005e64:	08005f31 	.word	0x08005f31
 8005e68:	08005f31 	.word	0x08005f31
 8005e6c:	08005f31 	.word	0x08005f31
 8005e70:	08005f31 	.word	0x08005f31
 8005e74:	08005f31 	.word	0x08005f31
 8005e78:	08005f31 	.word	0x08005f31
 8005e7c:	08005f09 	.word	0x08005f09
 8005e80:	08005f31 	.word	0x08005f31
 8005e84:	08005f31 	.word	0x08005f31
 8005e88:	08005f31 	.word	0x08005f31
 8005e8c:	08005f31 	.word	0x08005f31
 8005e90:	08005f31 	.word	0x08005f31
 8005e94:	08005f31 	.word	0x08005f31
 8005e98:	08005f31 	.word	0x08005f31
 8005e9c:	08005f11 	.word	0x08005f11
 8005ea0:	08005f31 	.word	0x08005f31
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f31 	.word	0x08005f31
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08005f31 	.word	0x08005f31
 8005eb4:	08005f31 	.word	0x08005f31
 8005eb8:	08005f31 	.word	0x08005f31
 8005ebc:	08005f19 	.word	0x08005f19
 8005ec0:	08005f31 	.word	0x08005f31
 8005ec4:	08005f31 	.word	0x08005f31
 8005ec8:	08005f31 	.word	0x08005f31
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	08005f31 	.word	0x08005f31
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f31 	.word	0x08005f31
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f31 	.word	0x08005f31
 8005ef8:	08005f31 	.word	0x08005f31
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	2301      	movs	r3, #1
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e050      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f08:	2304      	movs	r3, #4
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e04c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f10:	2308      	movs	r3, #8
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e048      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e044      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f20:	2320      	movs	r3, #32
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e040      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f28:	2340      	movs	r3, #64	; 0x40
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e03c      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f30:	2380      	movs	r3, #128	; 0x80
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e038      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a71      	ldr	r2, [pc, #452]	; (8006104 <UART_SetConfig+0x908>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d130      	bne.n	8005fa4 <UART_SetConfig+0x7a8>
 8005f42:	4b6f      	ldr	r3, [pc, #444]	; (8006100 <UART_SetConfig+0x904>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b05      	cmp	r3, #5
 8005f4c:	d826      	bhi.n	8005f9c <UART_SetConfig+0x7a0>
 8005f4e:	a201      	add	r2, pc, #4	; (adr r2, 8005f54 <UART_SetConfig+0x758>)
 8005f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f54:	08005f6d 	.word	0x08005f6d
 8005f58:	08005f75 	.word	0x08005f75
 8005f5c:	08005f7d 	.word	0x08005f7d
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f8d 	.word	0x08005f8d
 8005f68:	08005f95 	.word	0x08005f95
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f72:	e01a      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7a:	e016      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f82:	e012      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8a:	e00e      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f8c:	2320      	movs	r3, #32
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e00a      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f94:	2340      	movs	r3, #64	; 0x40
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e006      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005f9c:	2380      	movs	r3, #128	; 0x80
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e002      	b.n	8005faa <UART_SetConfig+0x7ae>
 8005fa4:	2380      	movs	r3, #128	; 0x80
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a55      	ldr	r2, [pc, #340]	; (8006104 <UART_SetConfig+0x908>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	f040 80f8 	bne.w	80061a6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fba:	2b20      	cmp	r3, #32
 8005fbc:	dc46      	bgt.n	800604c <UART_SetConfig+0x850>
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	db75      	blt.n	80060ae <UART_SetConfig+0x8b2>
 8005fc2:	3b02      	subs	r3, #2
 8005fc4:	2b1e      	cmp	r3, #30
 8005fc6:	d872      	bhi.n	80060ae <UART_SetConfig+0x8b2>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x7d4>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08006053 	.word	0x08006053
 8005fd4:	080060af 	.word	0x080060af
 8005fd8:	0800605b 	.word	0x0800605b
 8005fdc:	080060af 	.word	0x080060af
 8005fe0:	080060af 	.word	0x080060af
 8005fe4:	080060af 	.word	0x080060af
 8005fe8:	0800606b 	.word	0x0800606b
 8005fec:	080060af 	.word	0x080060af
 8005ff0:	080060af 	.word	0x080060af
 8005ff4:	080060af 	.word	0x080060af
 8005ff8:	080060af 	.word	0x080060af
 8005ffc:	080060af 	.word	0x080060af
 8006000:	080060af 	.word	0x080060af
 8006004:	080060af 	.word	0x080060af
 8006008:	0800607b 	.word	0x0800607b
 800600c:	080060af 	.word	0x080060af
 8006010:	080060af 	.word	0x080060af
 8006014:	080060af 	.word	0x080060af
 8006018:	080060af 	.word	0x080060af
 800601c:	080060af 	.word	0x080060af
 8006020:	080060af 	.word	0x080060af
 8006024:	080060af 	.word	0x080060af
 8006028:	080060af 	.word	0x080060af
 800602c:	080060af 	.word	0x080060af
 8006030:	080060af 	.word	0x080060af
 8006034:	080060af 	.word	0x080060af
 8006038:	080060af 	.word	0x080060af
 800603c:	080060af 	.word	0x080060af
 8006040:	080060af 	.word	0x080060af
 8006044:	080060af 	.word	0x080060af
 8006048:	080060a1 	.word	0x080060a1
 800604c:	2b40      	cmp	r3, #64	; 0x40
 800604e:	d02a      	beq.n	80060a6 <UART_SetConfig+0x8aa>
 8006050:	e02d      	b.n	80060ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006052:	f7fe f939 	bl	80042c8 <HAL_RCCEx_GetD3PCLK1Freq>
 8006056:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006058:	e02f      	b.n	80060ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800605a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800605e:	4618      	mov	r0, r3
 8006060:	f7fe f948 	bl	80042f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006068:	e027      	b.n	80060ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800606a:	f107 0318 	add.w	r3, r7, #24
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe fa94 	bl	800459c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006074:	69fb      	ldr	r3, [r7, #28]
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006078:	e01f      	b.n	80060ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800607a:	4b21      	ldr	r3, [pc, #132]	; (8006100 <UART_SetConfig+0x904>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0320 	and.w	r3, r3, #32
 8006082:	2b00      	cmp	r3, #0
 8006084:	d009      	beq.n	800609a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006086:	4b1e      	ldr	r3, [pc, #120]	; (8006100 <UART_SetConfig+0x904>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	08db      	lsrs	r3, r3, #3
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	4a1d      	ldr	r2, [pc, #116]	; (8006108 <UART_SetConfig+0x90c>)
 8006092:	fa22 f303 	lsr.w	r3, r2, r3
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006098:	e00f      	b.n	80060ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800609a:	4b1b      	ldr	r3, [pc, #108]	; (8006108 <UART_SetConfig+0x90c>)
 800609c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800609e:	e00c      	b.n	80060ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <UART_SetConfig+0x910>)
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060a4:	e009      	b.n	80060ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ac:	e005      	b.n	80060ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 81ee 	beq.w	800649e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	4a12      	ldr	r2, [pc, #72]	; (8006110 <UART_SetConfig+0x914>)
 80060c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060cc:	461a      	mov	r2, r3
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80060d4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	685a      	ldr	r2, [r3, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	4413      	add	r3, r2
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d305      	bcc.n	80060f2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d910      	bls.n	8006114 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80060f8:	e1d1      	b.n	800649e <UART_SetConfig+0xca2>
 80060fa:	bf00      	nop
 80060fc:	40011c00 	.word	0x40011c00
 8006100:	58024400 	.word	0x58024400
 8006104:	58000c00 	.word	0x58000c00
 8006108:	03d09000 	.word	0x03d09000
 800610c:	003d0900 	.word	0x003d0900
 8006110:	0800ad28 	.word	0x0800ad28
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006116:	2200      	movs	r2, #0
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	60fa      	str	r2, [r7, #12]
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	4ac0      	ldr	r2, [pc, #768]	; (8006424 <UART_SetConfig+0xc28>)
 8006122:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006126:	b29b      	uxth	r3, r3
 8006128:	2200      	movs	r2, #0
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	607a      	str	r2, [r7, #4]
 800612e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006132:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006136:	f7fa f943 	bl	80003c0 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4610      	mov	r0, r2
 8006140:	4619      	mov	r1, r3
 8006142:	f04f 0200 	mov.w	r2, #0
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	020b      	lsls	r3, r1, #8
 800614c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006150:	0202      	lsls	r2, r0, #8
 8006152:	6979      	ldr	r1, [r7, #20]
 8006154:	6849      	ldr	r1, [r1, #4]
 8006156:	0849      	lsrs	r1, r1, #1
 8006158:	2000      	movs	r0, #0
 800615a:	460c      	mov	r4, r1
 800615c:	4605      	mov	r5, r0
 800615e:	eb12 0804 	adds.w	r8, r2, r4
 8006162:	eb43 0905 	adc.w	r9, r3, r5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	469a      	mov	sl, r3
 800616e:	4693      	mov	fp, r2
 8006170:	4652      	mov	r2, sl
 8006172:	465b      	mov	r3, fp
 8006174:	4640      	mov	r0, r8
 8006176:	4649      	mov	r1, r9
 8006178:	f7fa f922 	bl	80003c0 <__aeabi_uldivmod>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	4613      	mov	r3, r2
 8006182:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800618a:	d308      	bcc.n	800619e <UART_SetConfig+0x9a2>
 800618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800618e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006192:	d204      	bcs.n	800619e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e17f      	b.n	800649e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061a4:	e17b      	b.n	800649e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ae:	f040 80bd 	bne.w	800632c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80061b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061b6:	2b20      	cmp	r3, #32
 80061b8:	dc48      	bgt.n	800624c <UART_SetConfig+0xa50>
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	db7b      	blt.n	80062b6 <UART_SetConfig+0xaba>
 80061be:	2b20      	cmp	r3, #32
 80061c0:	d879      	bhi.n	80062b6 <UART_SetConfig+0xaba>
 80061c2:	a201      	add	r2, pc, #4	; (adr r2, 80061c8 <UART_SetConfig+0x9cc>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	08006253 	.word	0x08006253
 80061cc:	0800625b 	.word	0x0800625b
 80061d0:	080062b7 	.word	0x080062b7
 80061d4:	080062b7 	.word	0x080062b7
 80061d8:	08006263 	.word	0x08006263
 80061dc:	080062b7 	.word	0x080062b7
 80061e0:	080062b7 	.word	0x080062b7
 80061e4:	080062b7 	.word	0x080062b7
 80061e8:	08006273 	.word	0x08006273
 80061ec:	080062b7 	.word	0x080062b7
 80061f0:	080062b7 	.word	0x080062b7
 80061f4:	080062b7 	.word	0x080062b7
 80061f8:	080062b7 	.word	0x080062b7
 80061fc:	080062b7 	.word	0x080062b7
 8006200:	080062b7 	.word	0x080062b7
 8006204:	080062b7 	.word	0x080062b7
 8006208:	08006283 	.word	0x08006283
 800620c:	080062b7 	.word	0x080062b7
 8006210:	080062b7 	.word	0x080062b7
 8006214:	080062b7 	.word	0x080062b7
 8006218:	080062b7 	.word	0x080062b7
 800621c:	080062b7 	.word	0x080062b7
 8006220:	080062b7 	.word	0x080062b7
 8006224:	080062b7 	.word	0x080062b7
 8006228:	080062b7 	.word	0x080062b7
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062b7 	.word	0x080062b7
 8006234:	080062b7 	.word	0x080062b7
 8006238:	080062b7 	.word	0x080062b7
 800623c:	080062b7 	.word	0x080062b7
 8006240:	080062b7 	.word	0x080062b7
 8006244:	080062b7 	.word	0x080062b7
 8006248:	080062a9 	.word	0x080062a9
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d02e      	beq.n	80062ae <UART_SetConfig+0xab2>
 8006250:	e031      	b.n	80062b6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006252:	f7fc fe6d 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 8006256:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006258:	e033      	b.n	80062c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800625a:	f7fc fe7f 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 800625e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006260:	e02f      	b.n	80062c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f844 	bl	80042f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006270:	e027      	b.n	80062c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006272:	f107 0318 	add.w	r3, r7, #24
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe f990 	bl	800459c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006280:	e01f      	b.n	80062c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006282:	4b69      	ldr	r3, [pc, #420]	; (8006428 <UART_SetConfig+0xc2c>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	2b00      	cmp	r3, #0
 800628c:	d009      	beq.n	80062a2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800628e:	4b66      	ldr	r3, [pc, #408]	; (8006428 <UART_SetConfig+0xc2c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	08db      	lsrs	r3, r3, #3
 8006294:	f003 0303 	and.w	r3, r3, #3
 8006298:	4a64      	ldr	r2, [pc, #400]	; (800642c <UART_SetConfig+0xc30>)
 800629a:	fa22 f303 	lsr.w	r3, r2, r3
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062a0:	e00f      	b.n	80062c2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80062a2:	4b62      	ldr	r3, [pc, #392]	; (800642c <UART_SetConfig+0xc30>)
 80062a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062a6:	e00c      	b.n	80062c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062a8:	4b61      	ldr	r3, [pc, #388]	; (8006430 <UART_SetConfig+0xc34>)
 80062aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ac:	e009      	b.n	80062c2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b4:	e005      	b.n	80062c2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80ea 	beq.w	800649e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	4a55      	ldr	r2, [pc, #340]	; (8006424 <UART_SetConfig+0xc28>)
 80062d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062d4:	461a      	mov	r2, r3
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062dc:	005a      	lsls	r2, r3, #1
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	085b      	lsrs	r3, r3, #1
 80062e4:	441a      	add	r2, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f2:	2b0f      	cmp	r3, #15
 80062f4:	d916      	bls.n	8006324 <UART_SetConfig+0xb28>
 80062f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062fc:	d212      	bcs.n	8006324 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	b29b      	uxth	r3, r3
 8006302:	f023 030f 	bic.w	r3, r3, #15
 8006306:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630a:	085b      	lsrs	r3, r3, #1
 800630c:	b29b      	uxth	r3, r3
 800630e:	f003 0307 	and.w	r3, r3, #7
 8006312:	b29a      	uxth	r2, r3
 8006314:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006316:	4313      	orrs	r3, r2
 8006318:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006320:	60da      	str	r2, [r3, #12]
 8006322:	e0bc      	b.n	800649e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800632a:	e0b8      	b.n	800649e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800632c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006330:	2b20      	cmp	r3, #32
 8006332:	dc4b      	bgt.n	80063cc <UART_SetConfig+0xbd0>
 8006334:	2b00      	cmp	r3, #0
 8006336:	f2c0 8087 	blt.w	8006448 <UART_SetConfig+0xc4c>
 800633a:	2b20      	cmp	r3, #32
 800633c:	f200 8084 	bhi.w	8006448 <UART_SetConfig+0xc4c>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <UART_SetConfig+0xb4c>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	080063d3 	.word	0x080063d3
 800634c:	080063db 	.word	0x080063db
 8006350:	08006449 	.word	0x08006449
 8006354:	08006449 	.word	0x08006449
 8006358:	080063e3 	.word	0x080063e3
 800635c:	08006449 	.word	0x08006449
 8006360:	08006449 	.word	0x08006449
 8006364:	08006449 	.word	0x08006449
 8006368:	080063f3 	.word	0x080063f3
 800636c:	08006449 	.word	0x08006449
 8006370:	08006449 	.word	0x08006449
 8006374:	08006449 	.word	0x08006449
 8006378:	08006449 	.word	0x08006449
 800637c:	08006449 	.word	0x08006449
 8006380:	08006449 	.word	0x08006449
 8006384:	08006449 	.word	0x08006449
 8006388:	08006403 	.word	0x08006403
 800638c:	08006449 	.word	0x08006449
 8006390:	08006449 	.word	0x08006449
 8006394:	08006449 	.word	0x08006449
 8006398:	08006449 	.word	0x08006449
 800639c:	08006449 	.word	0x08006449
 80063a0:	08006449 	.word	0x08006449
 80063a4:	08006449 	.word	0x08006449
 80063a8:	08006449 	.word	0x08006449
 80063ac:	08006449 	.word	0x08006449
 80063b0:	08006449 	.word	0x08006449
 80063b4:	08006449 	.word	0x08006449
 80063b8:	08006449 	.word	0x08006449
 80063bc:	08006449 	.word	0x08006449
 80063c0:	08006449 	.word	0x08006449
 80063c4:	08006449 	.word	0x08006449
 80063c8:	0800643b 	.word	0x0800643b
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d037      	beq.n	8006440 <UART_SetConfig+0xc44>
 80063d0:	e03a      	b.n	8006448 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7fc fdad 	bl	8002f30 <HAL_RCC_GetPCLK1Freq>
 80063d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063d8:	e03c      	b.n	8006454 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063da:	f7fc fdbf 	bl	8002f5c <HAL_RCC_GetPCLK2Freq>
 80063de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063e0:	e038      	b.n	8006454 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fd ff84 	bl	80042f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80063f0:	e030      	b.n	8006454 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063f2:	f107 0318 	add.w	r3, r7, #24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe f8d0 	bl	800459c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006400:	e028      	b.n	8006454 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006402:	4b09      	ldr	r3, [pc, #36]	; (8006428 <UART_SetConfig+0xc2c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0320 	and.w	r3, r3, #32
 800640a:	2b00      	cmp	r3, #0
 800640c:	d012      	beq.n	8006434 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800640e:	4b06      	ldr	r3, [pc, #24]	; (8006428 <UART_SetConfig+0xc2c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	08db      	lsrs	r3, r3, #3
 8006414:	f003 0303 	and.w	r3, r3, #3
 8006418:	4a04      	ldr	r2, [pc, #16]	; (800642c <UART_SetConfig+0xc30>)
 800641a:	fa22 f303 	lsr.w	r3, r2, r3
 800641e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006420:	e018      	b.n	8006454 <UART_SetConfig+0xc58>
 8006422:	bf00      	nop
 8006424:	0800ad28 	.word	0x0800ad28
 8006428:	58024400 	.word	0x58024400
 800642c:	03d09000 	.word	0x03d09000
 8006430:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006434:	4b24      	ldr	r3, [pc, #144]	; (80064c8 <UART_SetConfig+0xccc>)
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006438:	e00c      	b.n	8006454 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800643a:	4b24      	ldr	r3, [pc, #144]	; (80064cc <UART_SetConfig+0xcd0>)
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800643e:	e009      	b.n	8006454 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006440:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006446:	e005      	b.n	8006454 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006452:	bf00      	nop
    }

    if (pclk != 0U)
 8006454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d021      	beq.n	800649e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	4a1c      	ldr	r2, [pc, #112]	; (80064d0 <UART_SetConfig+0xcd4>)
 8006460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006464:	461a      	mov	r2, r3
 8006466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006468:	fbb3 f2f2 	udiv	r2, r3, r2
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	085b      	lsrs	r3, r3, #1
 8006472:	441a      	add	r2, r3
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006480:	2b0f      	cmp	r3, #15
 8006482:	d909      	bls.n	8006498 <UART_SetConfig+0xc9c>
 8006484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800648a:	d205      	bcs.n	8006498 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800648c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648e:	b29a      	uxth	r2, r3
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e002      	b.n	800649e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2201      	movs	r2, #1
 80064a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2200      	movs	r2, #0
 80064b2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2200      	movs	r2, #0
 80064b8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3748      	adds	r7, #72	; 0x48
 80064c2:	46bd      	mov	sp, r7
 80064c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064c8:	03d09000 	.word	0x03d09000
 80064cc:	003d0900 	.word	0x003d0900
 80064d0:	0800ad28 	.word	0x0800ad28

080064d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f003 0304 	and.w	r3, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	f003 0308 	and.w	r3, r3, #8
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01a      	beq.n	80065ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065d2:	d10a      	bne.n	80065ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b098      	sub	sp, #96	; 0x60
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006628:	f7fb fa18 	bl	8001a5c <HAL_GetTick>
 800662c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b08      	cmp	r3, #8
 800663a:	d12f      	bne.n	800669c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f88e 	bl	800676c <UART_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d022      	beq.n	800669c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800666a:	653b      	str	r3, [r7, #80]	; 0x50
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006674:	647b      	str	r3, [r7, #68]	; 0x44
 8006676:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800667a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e063      	b.n	8006764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d149      	bne.n	800673e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b2:	2200      	movs	r2, #0
 80066b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f857 	bl	800676c <UART_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d03c      	beq.n	800673e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	623b      	str	r3, [r7, #32]
   return(result);
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e2:	633b      	str	r3, [r7, #48]	; 0x30
 80066e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e6      	bne.n	80066c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3308      	adds	r3, #8
 80066fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	60fb      	str	r3, [r7, #12]
   return(result);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	64bb      	str	r3, [r7, #72]	; 0x48
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3308      	adds	r3, #8
 8006714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006716:	61fa      	str	r2, [r7, #28]
 8006718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	617b      	str	r3, [r7, #20]
   return(result);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e5      	bne.n	80066f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e012      	b.n	8006764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3758      	adds	r7, #88	; 0x58
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677c:	e049      	b.n	8006812 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d045      	beq.n	8006812 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fb f969 	bl	8001a5c <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <UART_WaitOnFlagUntilTimeout+0x30>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e048      	b.n	8006832 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d031      	beq.n	8006812 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d110      	bne.n	80067de <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2208      	movs	r2, #8
 80067c2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f839 	bl	800683c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2208      	movs	r2, #8
 80067ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e029      	b.n	8006832 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ec:	d111      	bne.n	8006812 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f81f 	bl	800683c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e00f      	b.n	8006832 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4013      	ands	r3, r2
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	bf0c      	ite	eq
 8006822:	2301      	moveq	r3, #1
 8006824:	2300      	movne	r3, #0
 8006826:	b2db      	uxtb	r3, r3
 8006828:	461a      	mov	r2, r3
 800682a:	79fb      	ldrb	r3, [r7, #7]
 800682c:	429a      	cmp	r2, r3
 800682e:	d0a6      	beq.n	800677e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800683c:	b480      	push	{r7}
 800683e:	b095      	sub	sp, #84	; 0x54
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
 8006864:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006868:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e6      	bne.n	8006844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	61fb      	str	r3, [r7, #28]
   return(result);
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	4b1e      	ldr	r3, [pc, #120]	; (8006904 <UART_EndRxTransfer+0xc8>)
 800688a:	4013      	ands	r3, r2
 800688c:	64bb      	str	r3, [r7, #72]	; 0x48
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3308      	adds	r3, #8
 8006894:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006896:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006898:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800689c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e5      	bne.n	8006876 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d118      	bne.n	80068e4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	e853 3f00 	ldrex	r3, [r3]
 80068be:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	f023 0310 	bic.w	r3, r3, #16
 80068c6:	647b      	str	r3, [r7, #68]	; 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d0:	61bb      	str	r3, [r7, #24]
 80068d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	e841 2300 	strex	r3, r2, [r1]
 80068dc:	613b      	str	r3, [r7, #16]
   return(result);
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1e6      	bne.n	80068b2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80068f8:	bf00      	nop
 80068fa:	3754      	adds	r7, #84	; 0x54
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	effffffe 	.word	0xeffffffe

08006908 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_UARTEx_DisableFifoMode+0x16>
 800691a:	2302      	movs	r3, #2
 800691c:	e027      	b.n	800696e <HAL_UARTEx_DisableFifoMode+0x66>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2224      	movs	r2, #36	; 0x24
 800692a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0201 	bic.w	r2, r2, #1
 8006944:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800694c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2220      	movs	r2, #32
 8006960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr

0800697a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800698e:	2302      	movs	r3, #2
 8006990:	e02d      	b.n	80069ee <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2224      	movs	r2, #36	; 0x24
 800699e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f850 	bl	8006a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b084      	sub	sp, #16
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e02d      	b.n	8006a6a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	; 0x24
 8006a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689b      	ldr	r3, [r3, #8]
 8006a3c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	683a      	ldr	r2, [r7, #0]
 8006a46:	430a      	orrs	r2, r1
 8006a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f812 	bl	8006a74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}
	...

08006a74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d108      	bne.n	8006a96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a94:	e031      	b.n	8006afa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a96:	2310      	movs	r3, #16
 8006a98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a9a:	2310      	movs	r3, #16
 8006a9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	0e5b      	lsrs	r3, r3, #25
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	0f5b      	lsrs	r3, r3, #29
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	7b3a      	ldrb	r2, [r7, #12]
 8006ac2:	4911      	ldr	r1, [pc, #68]	; (8006b08 <UARTEx_SetNbDataToProcess+0x94>)
 8006ac4:	5c8a      	ldrb	r2, [r1, r2]
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aca:	7b3a      	ldrb	r2, [r7, #12]
 8006acc:	490f      	ldr	r1, [pc, #60]	; (8006b0c <UARTEx_SetNbDataToProcess+0x98>)
 8006ace:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ad0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006adc:	7bfb      	ldrb	r3, [r7, #15]
 8006ade:	7b7a      	ldrb	r2, [r7, #13]
 8006ae0:	4909      	ldr	r1, [pc, #36]	; (8006b08 <UARTEx_SetNbDataToProcess+0x94>)
 8006ae2:	5c8a      	ldrb	r2, [r1, r2]
 8006ae4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ae8:	7b7a      	ldrb	r2, [r7, #13]
 8006aea:	4908      	ldr	r1, [pc, #32]	; (8006b0c <UARTEx_SetNbDataToProcess+0x98>)
 8006aec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aee:	fb93 f3f2 	sdiv	r3, r3, r2
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	0800ad40 	.word	0x0800ad40
 8006b0c:	0800ad48 	.word	0x0800ad48

08006b10 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	4603      	mov	r3, r0
 8006b18:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006b22:	2b84      	cmp	r3, #132	; 0x84
 8006b24:	d005      	beq.n	8006b32 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006b26:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	3303      	adds	r3, #3
 8006b30:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b32:	68fb      	ldr	r3, [r7, #12]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b44:	f000 faf6 	bl	8007134 <vTaskStartScheduler>
  
  return osOK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b50:	b089      	sub	sp, #36	; 0x24
 8006b52:	af04      	add	r7, sp, #16
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d020      	beq.n	8006ba2 <osThreadCreate+0x54>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01c      	beq.n	8006ba2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685c      	ldr	r4, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	691e      	ldr	r6, [r3, #16]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff ffc8 	bl	8006b10 <makeFreeRtosPriority>
 8006b80:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b8a:	9202      	str	r2, [sp, #8]
 8006b8c:	9301      	str	r3, [sp, #4]
 8006b8e:	9100      	str	r1, [sp, #0]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	4632      	mov	r2, r6
 8006b94:	4629      	mov	r1, r5
 8006b96:	4620      	mov	r0, r4
 8006b98:	f000 f8ed 	bl	8006d76 <xTaskCreateStatic>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	e01c      	b.n	8006bdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685c      	ldr	r4, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff ffaa 	bl	8006b10 <makeFreeRtosPriority>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	f107 030c 	add.w	r3, r7, #12
 8006bc2:	9301      	str	r3, [sp, #4]
 8006bc4:	9200      	str	r2, [sp, #0]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	4632      	mov	r2, r6
 8006bca:	4629      	mov	r1, r5
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f000 f92f 	bl	8006e30 <xTaskCreate>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d001      	beq.n	8006bdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e000      	b.n	8006bde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006be6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <osDelay+0x16>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	e000      	b.n	8006bfe <osDelay+0x18>
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f000 fa64 	bl	80070cc <vTaskDelay>
  
  return osOK;
 8006c04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f103 0208 	add.w	r2, r3, #8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295
 8006c26:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f103 0208 	add.w	r2, r3, #8
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f103 0208 	add.w	r2, r3, #8
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	601a      	str	r2, [r3, #0]
}
 8006ca4:	bf00      	nop
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b085      	sub	sp, #20
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d103      	bne.n	8006cd0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	60fb      	str	r3, [r7, #12]
 8006cce:	e00c      	b.n	8006cea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	60fb      	str	r3, [r7, #12]
 8006cd6:	e002      	b.n	8006cde <vListInsert+0x2e>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	60fb      	str	r3, [r7, #12]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68ba      	ldr	r2, [r7, #8]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d2f6      	bcs.n	8006cd8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	601a      	str	r2, [r3, #0]
}
 8006d16:	bf00      	nop
 8006d18:	3714      	adds	r7, #20
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	6892      	ldr	r2, [r2, #8]
 8006d38:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6852      	ldr	r2, [r2, #4]
 8006d42:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d103      	bne.n	8006d56 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	1e5a      	subs	r2, r3, #1
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b08e      	sub	sp, #56	; 0x38
 8006d7a:	af04      	add	r7, sp, #16
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d10a      	bne.n	8006da0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8e:	f383 8811 	msr	BASEPRI, r3
 8006d92:	f3bf 8f6f 	isb	sy
 8006d96:	f3bf 8f4f 	dsb	sy
 8006d9a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006d9c:	bf00      	nop
 8006d9e:	e7fe      	b.n	8006d9e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <xTaskCreateStatic+0x46>
	__asm volatile
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	61fb      	str	r3, [r7, #28]
}
 8006db8:	bf00      	nop
 8006dba:	e7fe      	b.n	8006dba <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dbc:	23a0      	movs	r3, #160	; 0xa0
 8006dbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2ba0      	cmp	r3, #160	; 0xa0
 8006dc4:	d00a      	beq.n	8006ddc <xTaskCreateStatic+0x66>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	61bb      	str	r3, [r7, #24]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006ddc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d01e      	beq.n	8006e22 <xTaskCreateStatic+0xac>
 8006de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01b      	beq.n	8006e22 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	9303      	str	r3, [sp, #12]
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e02:	9302      	str	r3, [sp, #8]
 8006e04:	f107 0314 	add.w	r3, r7, #20
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	68b9      	ldr	r1, [r7, #8]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f851 	bl	8006ebc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e1c:	f000 f8ec 	bl	8006ff8 <prvAddNewTaskToReadyList>
 8006e20:	e001      	b.n	8006e26 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e22:	2300      	movs	r3, #0
 8006e24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e26:	697b      	ldr	r3, [r7, #20]
	}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3728      	adds	r7, #40	; 0x28
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b08c      	sub	sp, #48	; 0x30
 8006e34:	af04      	add	r7, sp, #16
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 ff0f 	bl	8007c68 <pvPortMalloc>
 8006e4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d00e      	beq.n	8006e70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e52:	20a0      	movs	r0, #160	; 0xa0
 8006e54:	f000 ff08 	bl	8007c68 <pvPortMalloc>
 8006e58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	631a      	str	r2, [r3, #48]	; 0x30
 8006e66:	e005      	b.n	8006e74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	f000 ffc9 	bl	8007e00 <vPortFree>
 8006e6e:	e001      	b.n	8006e74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e70:	2300      	movs	r3, #0
 8006e72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d017      	beq.n	8006eaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e82:	88fa      	ldrh	r2, [r7, #6]
 8006e84:	2300      	movs	r3, #0
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	9302      	str	r3, [sp, #8]
 8006e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8e:	9301      	str	r3, [sp, #4]
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68b9      	ldr	r1, [r7, #8]
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f80f 	bl	8006ebc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e9e:	69f8      	ldr	r0, [r7, #28]
 8006ea0:	f000 f8aa 	bl	8006ff8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	e002      	b.n	8006eb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006eae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006eb0:	69bb      	ldr	r3, [r7, #24]
	}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3720      	adds	r7, #32
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
	...

08006ebc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b088      	sub	sp, #32
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006ed4:	440b      	add	r3, r1
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	f023 0307 	bic.w	r3, r3, #7
 8006ee2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00a      	beq.n	8006f04 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	617b      	str	r3, [r7, #20]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d01f      	beq.n	8006f4a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	e012      	b.n	8006f36 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f10:	68ba      	ldr	r2, [r7, #8]
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	7819      	ldrb	r1, [r3, #0]
 8006f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3334      	adds	r3, #52	; 0x34
 8006f20:	460a      	mov	r2, r1
 8006f22:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d006      	beq.n	8006f3e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b0f      	cmp	r3, #15
 8006f3a:	d9e9      	bls.n	8006f10 <prvInitialiseNewTask+0x54>
 8006f3c:	e000      	b.n	8006f40 <prvInitialiseNewTask+0x84>
			{
				break;
 8006f3e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f48:	e003      	b.n	8006f52 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f54:	2b06      	cmp	r3, #6
 8006f56:	d901      	bls.n	8006f5c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f58:	2306      	movs	r3, #6
 8006f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f60:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f66:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	3304      	adds	r3, #4
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fe6b 	bl	8006c4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7a:	3318      	adds	r3, #24
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7ff fe66 	bl	8006c4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	f1c3 0207 	rsb	r2, r3, #7
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f96:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	334c      	adds	r3, #76	; 0x4c
 8006fac:	224c      	movs	r2, #76	; 0x4c
 8006fae:	2100      	movs	r1, #0
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fda4 	bl	8008afe <memset>
 8006fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb8:	4a0c      	ldr	r2, [pc, #48]	; (8006fec <prvInitialiseNewTask+0x130>)
 8006fba:	651a      	str	r2, [r3, #80]	; 0x50
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	4a0c      	ldr	r2, [pc, #48]	; (8006ff0 <prvInitialiseNewTask+0x134>)
 8006fc0:	655a      	str	r2, [r3, #84]	; 0x54
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc4:	4a0b      	ldr	r2, [pc, #44]	; (8006ff4 <prvInitialiseNewTask+0x138>)
 8006fc6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	68f9      	ldr	r1, [r7, #12]
 8006fcc:	69b8      	ldr	r0, [r7, #24]
 8006fce:	f000 fc3d 	bl	800784c <pxPortInitialiseStack>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fe4:	bf00      	nop
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	24004328 	.word	0x24004328
 8006ff0:	24004390 	.word	0x24004390
 8006ff4:	240043f8 	.word	0x240043f8

08006ff8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007000:	f000 fd50 	bl	8007aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007004:	4b2a      	ldr	r3, [pc, #168]	; (80070b0 <prvAddNewTaskToReadyList+0xb8>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	4a29      	ldr	r2, [pc, #164]	; (80070b0 <prvAddNewTaskToReadyList+0xb8>)
 800700c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800700e:	4b29      	ldr	r3, [pc, #164]	; (80070b4 <prvAddNewTaskToReadyList+0xbc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d109      	bne.n	800702a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007016:	4a27      	ldr	r2, [pc, #156]	; (80070b4 <prvAddNewTaskToReadyList+0xbc>)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800701c:	4b24      	ldr	r3, [pc, #144]	; (80070b0 <prvAddNewTaskToReadyList+0xb8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d110      	bne.n	8007046 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007024:	f000 facc 	bl	80075c0 <prvInitialiseTaskLists>
 8007028:	e00d      	b.n	8007046 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800702a:	4b23      	ldr	r3, [pc, #140]	; (80070b8 <prvAddNewTaskToReadyList+0xc0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d109      	bne.n	8007046 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007032:	4b20      	ldr	r3, [pc, #128]	; (80070b4 <prvAddNewTaskToReadyList+0xbc>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	429a      	cmp	r2, r3
 800703e:	d802      	bhi.n	8007046 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <prvAddNewTaskToReadyList+0xbc>)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007046:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <prvAddNewTaskToReadyList+0xc4>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	4a1b      	ldr	r2, [pc, #108]	; (80070bc <prvAddNewTaskToReadyList+0xc4>)
 800704e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	2201      	movs	r2, #1
 8007056:	409a      	lsls	r2, r3
 8007058:	4b19      	ldr	r3, [pc, #100]	; (80070c0 <prvAddNewTaskToReadyList+0xc8>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4313      	orrs	r3, r2
 800705e:	4a18      	ldr	r2, [pc, #96]	; (80070c0 <prvAddNewTaskToReadyList+0xc8>)
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007066:	4613      	mov	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <prvAddNewTaskToReadyList+0xcc>)
 8007070:	441a      	add	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3304      	adds	r3, #4
 8007076:	4619      	mov	r1, r3
 8007078:	4610      	mov	r0, r2
 800707a:	f7ff fdf5 	bl	8006c68 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800707e:	f000 fd41 	bl	8007b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007082:	4b0d      	ldr	r3, [pc, #52]	; (80070b8 <prvAddNewTaskToReadyList+0xc0>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00e      	beq.n	80070a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800708a:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <prvAddNewTaskToReadyList+0xbc>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	429a      	cmp	r2, r3
 8007096:	d207      	bcs.n	80070a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007098:	4b0b      	ldr	r3, [pc, #44]	; (80070c8 <prvAddNewTaskToReadyList+0xd0>)
 800709a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	240006d4 	.word	0x240006d4
 80070b4:	240005d4 	.word	0x240005d4
 80070b8:	240006e0 	.word	0x240006e0
 80070bc:	240006f0 	.word	0x240006f0
 80070c0:	240006dc 	.word	0x240006dc
 80070c4:	240005d8 	.word	0x240005d8
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d017      	beq.n	800710e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <vTaskDelay+0x60>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <vTaskDelay+0x30>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	60bb      	str	r3, [r7, #8]
}
 80070f8:	bf00      	nop
 80070fa:	e7fe      	b.n	80070fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070fc:	f000 f884 	bl	8007208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007100:	2100      	movs	r1, #0
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fb3c 	bl	8007780 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007108:	f000 f88c 	bl	8007224 <xTaskResumeAll>
 800710c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d107      	bne.n	8007124 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007114:	4b06      	ldr	r3, [pc, #24]	; (8007130 <vTaskDelay+0x64>)
 8007116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007124:	bf00      	nop
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	240006fc 	.word	0x240006fc
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b08a      	sub	sp, #40	; 0x28
 8007138:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800713e:	2300      	movs	r3, #0
 8007140:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007142:	463a      	mov	r2, r7
 8007144:	1d39      	adds	r1, r7, #4
 8007146:	f107 0308 	add.w	r3, r7, #8
 800714a:	4618      	mov	r0, r3
 800714c:	f7f9 fab6 	bl	80006bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	9202      	str	r2, [sp, #8]
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	2300      	movs	r3, #0
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	2300      	movs	r3, #0
 8007160:	460a      	mov	r2, r1
 8007162:	4921      	ldr	r1, [pc, #132]	; (80071e8 <vTaskStartScheduler+0xb4>)
 8007164:	4821      	ldr	r0, [pc, #132]	; (80071ec <vTaskStartScheduler+0xb8>)
 8007166:	f7ff fe06 	bl	8006d76 <xTaskCreateStatic>
 800716a:	4603      	mov	r3, r0
 800716c:	4a20      	ldr	r2, [pc, #128]	; (80071f0 <vTaskStartScheduler+0xbc>)
 800716e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007170:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <vTaskStartScheduler+0xbc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d002      	beq.n	800717e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007178:	2301      	movs	r3, #1
 800717a:	617b      	str	r3, [r7, #20]
 800717c:	e001      	b.n	8007182 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800717e:	2300      	movs	r3, #0
 8007180:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d11b      	bne.n	80071c0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	613b      	str	r3, [r7, #16]
}
 800719a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800719c:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <vTaskStartScheduler+0xc0>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	334c      	adds	r3, #76	; 0x4c
 80071a2:	4a15      	ldr	r2, [pc, #84]	; (80071f8 <vTaskStartScheduler+0xc4>)
 80071a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071a6:	4b15      	ldr	r3, [pc, #84]	; (80071fc <vTaskStartScheduler+0xc8>)
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071ae:	4b14      	ldr	r3, [pc, #80]	; (8007200 <vTaskStartScheduler+0xcc>)
 80071b0:	2201      	movs	r2, #1
 80071b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071b4:	4b13      	ldr	r3, [pc, #76]	; (8007204 <vTaskStartScheduler+0xd0>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071ba:	f000 fbd1 	bl	8007960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071be:	e00e      	b.n	80071de <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071c6:	d10a      	bne.n	80071de <vTaskStartScheduler+0xaa>
	__asm volatile
 80071c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071cc:	f383 8811 	msr	BASEPRI, r3
 80071d0:	f3bf 8f6f 	isb	sy
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	60fb      	str	r3, [r7, #12]
}
 80071da:	bf00      	nop
 80071dc:	e7fe      	b.n	80071dc <vTaskStartScheduler+0xa8>
}
 80071de:	bf00      	nop
 80071e0:	3718      	adds	r7, #24
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	0800ad10 	.word	0x0800ad10
 80071ec:	08007591 	.word	0x08007591
 80071f0:	240006f8 	.word	0x240006f8
 80071f4:	240005d4 	.word	0x240005d4
 80071f8:	2400006c 	.word	0x2400006c
 80071fc:	240006f4 	.word	0x240006f4
 8007200:	240006e0 	.word	0x240006e0
 8007204:	240006d8 	.word	0x240006d8

08007208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <vTaskSuspendAll+0x18>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	4a03      	ldr	r2, [pc, #12]	; (8007220 <vTaskSuspendAll+0x18>)
 8007214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007216:	bf00      	nop
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	240006fc 	.word	0x240006fc

08007224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007232:	4b41      	ldr	r3, [pc, #260]	; (8007338 <xTaskResumeAll+0x114>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <xTaskResumeAll+0x2c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	603b      	str	r3, [r7, #0]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007250:	f000 fc28 	bl	8007aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007254:	4b38      	ldr	r3, [pc, #224]	; (8007338 <xTaskResumeAll+0x114>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	4a37      	ldr	r2, [pc, #220]	; (8007338 <xTaskResumeAll+0x114>)
 800725c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800725e:	4b36      	ldr	r3, [pc, #216]	; (8007338 <xTaskResumeAll+0x114>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d161      	bne.n	800732a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007266:	4b35      	ldr	r3, [pc, #212]	; (800733c <xTaskResumeAll+0x118>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d05d      	beq.n	800732a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800726e:	e02e      	b.n	80072ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007270:	4b33      	ldr	r3, [pc, #204]	; (8007340 <xTaskResumeAll+0x11c>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3318      	adds	r3, #24
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fd50 	bl	8006d22 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3304      	adds	r3, #4
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fd4b 	bl	8006d22 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	2201      	movs	r2, #1
 8007292:	409a      	lsls	r2, r3
 8007294:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <xTaskResumeAll+0x120>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4313      	orrs	r3, r2
 800729a:	4a2a      	ldr	r2, [pc, #168]	; (8007344 <xTaskResumeAll+0x120>)
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4a27      	ldr	r2, [pc, #156]	; (8007348 <xTaskResumeAll+0x124>)
 80072ac:	441a      	add	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f7ff fcd7 	bl	8006c68 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072be:	4b23      	ldr	r3, [pc, #140]	; (800734c <xTaskResumeAll+0x128>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80072c8:	4b21      	ldr	r3, [pc, #132]	; (8007350 <xTaskResumeAll+0x12c>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ce:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <xTaskResumeAll+0x11c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1cc      	bne.n	8007270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072dc:	f000 fa12 	bl	8007704 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072e0:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <xTaskResumeAll+0x130>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072ec:	f000 f836 	bl	800735c <xTaskIncrementTick>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072f6:	4b16      	ldr	r3, [pc, #88]	; (8007350 <xTaskResumeAll+0x12c>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3b01      	subs	r3, #1
 8007300:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f1      	bne.n	80072ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007308:	4b12      	ldr	r3, [pc, #72]	; (8007354 <xTaskResumeAll+0x130>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800730e:	4b10      	ldr	r3, [pc, #64]	; (8007350 <xTaskResumeAll+0x12c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007316:	2301      	movs	r3, #1
 8007318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800731a:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <xTaskResumeAll+0x134>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800732a:	f000 fbeb 	bl	8007b04 <vPortExitCritical>

	return xAlreadyYielded;
 800732e:	68bb      	ldr	r3, [r7, #8]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	240006fc 	.word	0x240006fc
 800733c:	240006d4 	.word	0x240006d4
 8007340:	24000694 	.word	0x24000694
 8007344:	240006dc 	.word	0x240006dc
 8007348:	240005d8 	.word	0x240005d8
 800734c:	240005d4 	.word	0x240005d4
 8007350:	240006e8 	.word	0x240006e8
 8007354:	240006e4 	.word	0x240006e4
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007362:	2300      	movs	r3, #0
 8007364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007366:	4b4e      	ldr	r3, [pc, #312]	; (80074a0 <xTaskIncrementTick+0x144>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 808e 	bne.w	800748c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007370:	4b4c      	ldr	r3, [pc, #304]	; (80074a4 <xTaskIncrementTick+0x148>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007378:	4a4a      	ldr	r2, [pc, #296]	; (80074a4 <xTaskIncrementTick+0x148>)
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d120      	bne.n	80073c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007384:	4b48      	ldr	r3, [pc, #288]	; (80074a8 <xTaskIncrementTick+0x14c>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00a      	beq.n	80073a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	603b      	str	r3, [r7, #0]
}
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <xTaskIncrementTick+0x46>
 80073a4:	4b40      	ldr	r3, [pc, #256]	; (80074a8 <xTaskIncrementTick+0x14c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	4b40      	ldr	r3, [pc, #256]	; (80074ac <xTaskIncrementTick+0x150>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a3e      	ldr	r2, [pc, #248]	; (80074a8 <xTaskIncrementTick+0x14c>)
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	4a3e      	ldr	r2, [pc, #248]	; (80074ac <xTaskIncrementTick+0x150>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	4b3d      	ldr	r3, [pc, #244]	; (80074b0 <xTaskIncrementTick+0x154>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	4a3c      	ldr	r2, [pc, #240]	; (80074b0 <xTaskIncrementTick+0x154>)
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	f000 f99f 	bl	8007704 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073c6:	4b3b      	ldr	r3, [pc, #236]	; (80074b4 <xTaskIncrementTick+0x158>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	693a      	ldr	r2, [r7, #16]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d348      	bcc.n	8007462 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073d0:	4b35      	ldr	r3, [pc, #212]	; (80074a8 <xTaskIncrementTick+0x14c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d104      	bne.n	80073e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073da:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <xTaskIncrementTick+0x158>)
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	601a      	str	r2, [r3, #0]
					break;
 80073e2:	e03e      	b.n	8007462 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073e4:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <xTaskIncrementTick+0x14c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d203      	bcs.n	8007404 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073fc:	4a2d      	ldr	r2, [pc, #180]	; (80074b4 <xTaskIncrementTick+0x158>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007402:	e02e      	b.n	8007462 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3304      	adds	r3, #4
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff fc8a 	bl	8006d22 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	2b00      	cmp	r3, #0
 8007414:	d004      	beq.n	8007420 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	3318      	adds	r3, #24
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fc81 	bl	8006d22 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	2201      	movs	r2, #1
 8007426:	409a      	lsls	r2, r3
 8007428:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <xTaskIncrementTick+0x15c>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4313      	orrs	r3, r2
 800742e:	4a22      	ldr	r2, [pc, #136]	; (80074b8 <xTaskIncrementTick+0x15c>)
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007436:	4613      	mov	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4413      	add	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4a1f      	ldr	r2, [pc, #124]	; (80074bc <xTaskIncrementTick+0x160>)
 8007440:	441a      	add	r2, r3
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7ff fc0d 	bl	8006c68 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	4b1b      	ldr	r3, [pc, #108]	; (80074c0 <xTaskIncrementTick+0x164>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	429a      	cmp	r2, r3
 800745a:	d3b9      	bcc.n	80073d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007460:	e7b6      	b.n	80073d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007462:	4b17      	ldr	r3, [pc, #92]	; (80074c0 <xTaskIncrementTick+0x164>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	4914      	ldr	r1, [pc, #80]	; (80074bc <xTaskIncrementTick+0x160>)
 800746a:	4613      	mov	r3, r2
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d901      	bls.n	800747e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800747e:	4b11      	ldr	r3, [pc, #68]	; (80074c4 <xTaskIncrementTick+0x168>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d007      	beq.n	8007496 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007486:	2301      	movs	r3, #1
 8007488:	617b      	str	r3, [r7, #20]
 800748a:	e004      	b.n	8007496 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <xTaskIncrementTick+0x16c>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	3301      	adds	r3, #1
 8007492:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <xTaskIncrementTick+0x16c>)
 8007494:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007496:	697b      	ldr	r3, [r7, #20]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	240006fc 	.word	0x240006fc
 80074a4:	240006d8 	.word	0x240006d8
 80074a8:	2400068c 	.word	0x2400068c
 80074ac:	24000690 	.word	0x24000690
 80074b0:	240006ec 	.word	0x240006ec
 80074b4:	240006f4 	.word	0x240006f4
 80074b8:	240006dc 	.word	0x240006dc
 80074bc:	240005d8 	.word	0x240005d8
 80074c0:	240005d4 	.word	0x240005d4
 80074c4:	240006e8 	.word	0x240006e8
 80074c8:	240006e4 	.word	0x240006e4

080074cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074d2:	4b29      	ldr	r3, [pc, #164]	; (8007578 <vTaskSwitchContext+0xac>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074da:	4b28      	ldr	r3, [pc, #160]	; (800757c <vTaskSwitchContext+0xb0>)
 80074dc:	2201      	movs	r2, #1
 80074de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074e0:	e044      	b.n	800756c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80074e2:	4b26      	ldr	r3, [pc, #152]	; (800757c <vTaskSwitchContext+0xb0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e8:	4b25      	ldr	r3, [pc, #148]	; (8007580 <vTaskSwitchContext+0xb4>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	fab3 f383 	clz	r3, r3
 80074f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	f1c3 031f 	rsb	r3, r3, #31
 80074fc:	617b      	str	r3, [r7, #20]
 80074fe:	4921      	ldr	r1, [pc, #132]	; (8007584 <vTaskSwitchContext+0xb8>)
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	440b      	add	r3, r1
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10a      	bne.n	8007528 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	607b      	str	r3, [r7, #4]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <vTaskSwitchContext+0x5a>
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4a14      	ldr	r2, [pc, #80]	; (8007584 <vTaskSwitchContext+0xb8>)
 8007534:	4413      	add	r3, r2
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	3308      	adds	r3, #8
 800754a:	429a      	cmp	r2, r3
 800754c:	d104      	bne.n	8007558 <vTaskSwitchContext+0x8c>
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	605a      	str	r2, [r3, #4]
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	68db      	ldr	r3, [r3, #12]
 800755e:	4a0a      	ldr	r2, [pc, #40]	; (8007588 <vTaskSwitchContext+0xbc>)
 8007560:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <vTaskSwitchContext+0xbc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	334c      	adds	r3, #76	; 0x4c
 8007568:	4a08      	ldr	r2, [pc, #32]	; (800758c <vTaskSwitchContext+0xc0>)
 800756a:	6013      	str	r3, [r2, #0]
}
 800756c:	bf00      	nop
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	240006fc 	.word	0x240006fc
 800757c:	240006e8 	.word	0x240006e8
 8007580:	240006dc 	.word	0x240006dc
 8007584:	240005d8 	.word	0x240005d8
 8007588:	240005d4 	.word	0x240005d4
 800758c:	2400006c 	.word	0x2400006c

08007590 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007598:	f000 f852 	bl	8007640 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800759c:	4b06      	ldr	r3, [pc, #24]	; (80075b8 <prvIdleTask+0x28>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d9f9      	bls.n	8007598 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075a4:	4b05      	ldr	r3, [pc, #20]	; (80075bc <prvIdleTask+0x2c>)
 80075a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075b4:	e7f0      	b.n	8007598 <prvIdleTask+0x8>
 80075b6:	bf00      	nop
 80075b8:	240005d8 	.word	0x240005d8
 80075bc:	e000ed04 	.word	0xe000ed04

080075c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075c6:	2300      	movs	r3, #0
 80075c8:	607b      	str	r3, [r7, #4]
 80075ca:	e00c      	b.n	80075e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	4a12      	ldr	r2, [pc, #72]	; (8007620 <prvInitialiseTaskLists+0x60>)
 80075d8:	4413      	add	r3, r2
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fb17 	bl	8006c0e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3301      	adds	r3, #1
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b06      	cmp	r3, #6
 80075ea:	d9ef      	bls.n	80075cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075ec:	480d      	ldr	r0, [pc, #52]	; (8007624 <prvInitialiseTaskLists+0x64>)
 80075ee:	f7ff fb0e 	bl	8006c0e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075f2:	480d      	ldr	r0, [pc, #52]	; (8007628 <prvInitialiseTaskLists+0x68>)
 80075f4:	f7ff fb0b 	bl	8006c0e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075f8:	480c      	ldr	r0, [pc, #48]	; (800762c <prvInitialiseTaskLists+0x6c>)
 80075fa:	f7ff fb08 	bl	8006c0e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075fe:	480c      	ldr	r0, [pc, #48]	; (8007630 <prvInitialiseTaskLists+0x70>)
 8007600:	f7ff fb05 	bl	8006c0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007604:	480b      	ldr	r0, [pc, #44]	; (8007634 <prvInitialiseTaskLists+0x74>)
 8007606:	f7ff fb02 	bl	8006c0e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800760a:	4b0b      	ldr	r3, [pc, #44]	; (8007638 <prvInitialiseTaskLists+0x78>)
 800760c:	4a05      	ldr	r2, [pc, #20]	; (8007624 <prvInitialiseTaskLists+0x64>)
 800760e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <prvInitialiseTaskLists+0x7c>)
 8007612:	4a05      	ldr	r2, [pc, #20]	; (8007628 <prvInitialiseTaskLists+0x68>)
 8007614:	601a      	str	r2, [r3, #0]
}
 8007616:	bf00      	nop
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	240005d8 	.word	0x240005d8
 8007624:	24000664 	.word	0x24000664
 8007628:	24000678 	.word	0x24000678
 800762c:	24000694 	.word	0x24000694
 8007630:	240006a8 	.word	0x240006a8
 8007634:	240006c0 	.word	0x240006c0
 8007638:	2400068c 	.word	0x2400068c
 800763c:	24000690 	.word	0x24000690

08007640 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007646:	e019      	b.n	800767c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007648:	f000 fa2c 	bl	8007aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800764c:	4b10      	ldr	r3, [pc, #64]	; (8007690 <prvCheckTasksWaitingTermination+0x50>)
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	3304      	adds	r3, #4
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fb62 	bl	8006d22 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800765e:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <prvCheckTasksWaitingTermination+0x54>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	4a0b      	ldr	r2, [pc, #44]	; (8007694 <prvCheckTasksWaitingTermination+0x54>)
 8007666:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007668:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <prvCheckTasksWaitingTermination+0x58>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3b01      	subs	r3, #1
 800766e:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <prvCheckTasksWaitingTermination+0x58>)
 8007670:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007672:	f000 fa47 	bl	8007b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f810 	bl	800769c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800767c:	4b06      	ldr	r3, [pc, #24]	; (8007698 <prvCheckTasksWaitingTermination+0x58>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d1e1      	bne.n	8007648 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	240006a8 	.word	0x240006a8
 8007694:	240006d4 	.word	0x240006d4
 8007698:	240006bc 	.word	0x240006bc

0800769c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	334c      	adds	r3, #76	; 0x4c
 80076a8:	4618      	mov	r0, r3
 80076aa:	f001 fa45 	bl	8008b38 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d108      	bne.n	80076ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fb9f 	bl	8007e00 <vPortFree>
				vPortFree( pxTCB );
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 fb9c 	bl	8007e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076c8:	e018      	b.n	80076fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d103      	bne.n	80076dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fb93 	bl	8007e00 <vPortFree>
	}
 80076da:	e00f      	b.n	80076fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d00a      	beq.n	80076fc <prvDeleteTCB+0x60>
	__asm volatile
 80076e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	60fb      	str	r3, [r7, #12]
}
 80076f8:	bf00      	nop
 80076fa:	e7fe      	b.n	80076fa <prvDeleteTCB+0x5e>
	}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <prvResetNextTaskUnblockTime+0x38>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d104      	bne.n	800771e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007714:	4b0a      	ldr	r3, [pc, #40]	; (8007740 <prvResetNextTaskUnblockTime+0x3c>)
 8007716:	f04f 32ff 	mov.w	r2, #4294967295
 800771a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800771c:	e008      	b.n	8007730 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <prvResetNextTaskUnblockTime+0x38>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	4a04      	ldr	r2, [pc, #16]	; (8007740 <prvResetNextTaskUnblockTime+0x3c>)
 800772e:	6013      	str	r3, [r2, #0]
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	2400068c 	.word	0x2400068c
 8007740:	240006f4 	.word	0x240006f4

08007744 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800774a:	4b0b      	ldr	r3, [pc, #44]	; (8007778 <xTaskGetSchedulerState+0x34>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d102      	bne.n	8007758 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007752:	2301      	movs	r3, #1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	e008      	b.n	800776a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007758:	4b08      	ldr	r3, [pc, #32]	; (800777c <xTaskGetSchedulerState+0x38>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d102      	bne.n	8007766 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007760:	2302      	movs	r3, #2
 8007762:	607b      	str	r3, [r7, #4]
 8007764:	e001      	b.n	800776a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007766:	2300      	movs	r3, #0
 8007768:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800776a:	687b      	ldr	r3, [r7, #4]
	}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	240006e0 	.word	0x240006e0
 800777c:	240006fc 	.word	0x240006fc

08007780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800778a:	4b29      	ldr	r3, [pc, #164]	; (8007830 <prvAddCurrentTaskToDelayedList+0xb0>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007790:	4b28      	ldr	r3, [pc, #160]	; (8007834 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3304      	adds	r3, #4
 8007796:	4618      	mov	r0, r3
 8007798:	f7ff fac3 	bl	8006d22 <uxListRemove>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10b      	bne.n	80077ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077a2:	4b24      	ldr	r3, [pc, #144]	; (8007834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	2201      	movs	r2, #1
 80077aa:	fa02 f303 	lsl.w	r3, r2, r3
 80077ae:	43da      	mvns	r2, r3
 80077b0:	4b21      	ldr	r3, [pc, #132]	; (8007838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4013      	ands	r3, r2
 80077b6:	4a20      	ldr	r2, [pc, #128]	; (8007838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80077b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c0:	d10a      	bne.n	80077d8 <prvAddCurrentTaskToDelayedList+0x58>
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c8:	4b1a      	ldr	r3, [pc, #104]	; (8007834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	481a      	ldr	r0, [pc, #104]	; (800783c <prvAddCurrentTaskToDelayedList+0xbc>)
 80077d2:	f7ff fa49 	bl	8006c68 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077d6:	e026      	b.n	8007826 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4413      	add	r3, r2
 80077de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077e0:	4b14      	ldr	r3, [pc, #80]	; (8007834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d209      	bcs.n	8007804 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f0:	4b13      	ldr	r3, [pc, #76]	; (8007840 <prvAddCurrentTaskToDelayedList+0xc0>)
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	4b0f      	ldr	r3, [pc, #60]	; (8007834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3304      	adds	r3, #4
 80077fa:	4619      	mov	r1, r3
 80077fc:	4610      	mov	r0, r2
 80077fe:	f7ff fa57 	bl	8006cb0 <vListInsert>
}
 8007802:	e010      	b.n	8007826 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007804:	4b0f      	ldr	r3, [pc, #60]	; (8007844 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	4b0a      	ldr	r3, [pc, #40]	; (8007834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7ff fa4d 	bl	8006cb0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007816:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	429a      	cmp	r2, r3
 800781e:	d202      	bcs.n	8007826 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007820:	4a09      	ldr	r2, [pc, #36]	; (8007848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6013      	str	r3, [r2, #0]
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	240006d8 	.word	0x240006d8
 8007834:	240005d4 	.word	0x240005d4
 8007838:	240006dc 	.word	0x240006dc
 800783c:	240006c0 	.word	0x240006c0
 8007840:	24000690 	.word	0x24000690
 8007844:	2400068c 	.word	0x2400068c
 8007848:	240006f4 	.word	0x240006f4

0800784c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800784c:	b480      	push	{r7}
 800784e:	b085      	sub	sp, #20
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	3b04      	subs	r3, #4
 800785c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	3b04      	subs	r3, #4
 800786a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0201 	bic.w	r2, r3, #1
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	3b04      	subs	r3, #4
 800787a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800787c:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <pxPortInitialiseStack+0x64>)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3b14      	subs	r3, #20
 8007886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	3b04      	subs	r3, #4
 8007892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f06f 0202 	mvn.w	r2, #2
 800789a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3b20      	subs	r3, #32
 80078a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	080078b5 	.word	0x080078b5

080078b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078be:	4b12      	ldr	r3, [pc, #72]	; (8007908 <prvTaskExitError+0x54>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c6:	d00a      	beq.n	80078de <prvTaskExitError+0x2a>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	e7fe      	b.n	80078dc <prvTaskExitError+0x28>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	60bb      	str	r3, [r7, #8]
}
 80078f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80078f2:	bf00      	nop
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0fc      	beq.n	80078f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	24000010 	.word	0x24000010
 800790c:	00000000 	.word	0x00000000

08007910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007910:	4b07      	ldr	r3, [pc, #28]	; (8007930 <pxCurrentTCBConst2>)
 8007912:	6819      	ldr	r1, [r3, #0]
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800791a:	f380 8809 	msr	PSP, r0
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	f380 8811 	msr	BASEPRI, r0
 800792a:	4770      	bx	lr
 800792c:	f3af 8000 	nop.w

08007930 <pxCurrentTCBConst2>:
 8007930:	240005d4 	.word	0x240005d4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop

08007938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007938:	4808      	ldr	r0, [pc, #32]	; (800795c <prvPortStartFirstTask+0x24>)
 800793a:	6800      	ldr	r0, [r0, #0]
 800793c:	6800      	ldr	r0, [r0, #0]
 800793e:	f380 8808 	msr	MSP, r0
 8007942:	f04f 0000 	mov.w	r0, #0
 8007946:	f380 8814 	msr	CONTROL, r0
 800794a:	b662      	cpsie	i
 800794c:	b661      	cpsie	f
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	df00      	svc	0
 8007958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800795a:	bf00      	nop
 800795c:	e000ed08 	.word	0xe000ed08

08007960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b086      	sub	sp, #24
 8007964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007966:	4b46      	ldr	r3, [pc, #280]	; (8007a80 <xPortStartScheduler+0x120>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a46      	ldr	r2, [pc, #280]	; (8007a84 <xPortStartScheduler+0x124>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d10a      	bne.n	8007986 <xPortStartScheduler+0x26>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007986:	4b3e      	ldr	r3, [pc, #248]	; (8007a80 <xPortStartScheduler+0x120>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a3f      	ldr	r2, [pc, #252]	; (8007a88 <xPortStartScheduler+0x128>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d10a      	bne.n	80079a6 <xPortStartScheduler+0x46>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079a6:	4b39      	ldr	r3, [pc, #228]	; (8007a8c <xPortStartScheduler+0x12c>)
 80079a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	22ff      	movs	r2, #255	; 0xff
 80079b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	4b31      	ldr	r3, [pc, #196]	; (8007a90 <xPortStartScheduler+0x130>)
 80079cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80079ce:	4b31      	ldr	r3, [pc, #196]	; (8007a94 <xPortStartScheduler+0x134>)
 80079d0:	2207      	movs	r2, #7
 80079d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079d4:	e009      	b.n	80079ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80079d6:	4b2f      	ldr	r3, [pc, #188]	; (8007a94 <xPortStartScheduler+0x134>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3b01      	subs	r3, #1
 80079dc:	4a2d      	ldr	r2, [pc, #180]	; (8007a94 <xPortStartScheduler+0x134>)
 80079de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80079ea:	78fb      	ldrb	r3, [r7, #3]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079f2:	2b80      	cmp	r3, #128	; 0x80
 80079f4:	d0ef      	beq.n	80079d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80079f6:	4b27      	ldr	r3, [pc, #156]	; (8007a94 <xPortStartScheduler+0x134>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f1c3 0307 	rsb	r3, r3, #7
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d00a      	beq.n	8007a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	60bb      	str	r3, [r7, #8]
}
 8007a14:	bf00      	nop
 8007a16:	e7fe      	b.n	8007a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a18:	4b1e      	ldr	r3, [pc, #120]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	021b      	lsls	r3, r3, #8
 8007a1e:	4a1d      	ldr	r2, [pc, #116]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a2a:	4a1a      	ldr	r2, [pc, #104]	; (8007a94 <xPortStartScheduler+0x134>)
 8007a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a36:	4b18      	ldr	r3, [pc, #96]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a17      	ldr	r2, [pc, #92]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a14      	ldr	r2, [pc, #80]	; (8007a98 <xPortStartScheduler+0x138>)
 8007a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a4e:	f000 f8dd 	bl	8007c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007a52:	4b12      	ldr	r3, [pc, #72]	; (8007a9c <xPortStartScheduler+0x13c>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007a58:	f000 f8fc 	bl	8007c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007a5c:	4b10      	ldr	r3, [pc, #64]	; (8007aa0 <xPortStartScheduler+0x140>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a0f      	ldr	r2, [pc, #60]	; (8007aa0 <xPortStartScheduler+0x140>)
 8007a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007a68:	f7ff ff66 	bl	8007938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007a6c:	f7ff fd2e 	bl	80074cc <vTaskSwitchContext>
	prvTaskExitError();
 8007a70:	f7ff ff20 	bl	80078b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	e000ed00 	.word	0xe000ed00
 8007a84:	410fc271 	.word	0x410fc271
 8007a88:	410fc270 	.word	0x410fc270
 8007a8c:	e000e400 	.word	0xe000e400
 8007a90:	24000700 	.word	0x24000700
 8007a94:	24000704 	.word	0x24000704
 8007a98:	e000ed20 	.word	0xe000ed20
 8007a9c:	24000010 	.word	0x24000010
 8007aa0:	e000ef34 	.word	0xe000ef34

08007aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	607b      	str	r3, [r7, #4]
}
 8007abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007abe:	4b0f      	ldr	r3, [pc, #60]	; (8007afc <vPortEnterCritical+0x58>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	4a0d      	ldr	r2, [pc, #52]	; (8007afc <vPortEnterCritical+0x58>)
 8007ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	; (8007afc <vPortEnterCritical+0x58>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d10f      	bne.n	8007af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <vPortEnterCritical+0x5c>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00a      	beq.n	8007af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ade:	f383 8811 	msr	BASEPRI, r3
 8007ae2:	f3bf 8f6f 	isb	sy
 8007ae6:	f3bf 8f4f 	dsb	sy
 8007aea:	603b      	str	r3, [r7, #0]
}
 8007aec:	bf00      	nop
 8007aee:	e7fe      	b.n	8007aee <vPortEnterCritical+0x4a>
	}
}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	24000010 	.word	0x24000010
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b0a:	4b12      	ldr	r3, [pc, #72]	; (8007b54 <vPortExitCritical+0x50>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <vPortExitCritical+0x24>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	607b      	str	r3, [r7, #4]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b28:	4b0a      	ldr	r3, [pc, #40]	; (8007b54 <vPortExitCritical+0x50>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	4a09      	ldr	r2, [pc, #36]	; (8007b54 <vPortExitCritical+0x50>)
 8007b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b32:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <vPortExitCritical+0x50>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d105      	bne.n	8007b46 <vPortExitCritical+0x42>
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	24000010 	.word	0x24000010
	...

08007b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007b60:	f3ef 8009 	mrs	r0, PSP
 8007b64:	f3bf 8f6f 	isb	sy
 8007b68:	4b15      	ldr	r3, [pc, #84]	; (8007bc0 <pxCurrentTCBConst>)
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	f01e 0f10 	tst.w	lr, #16
 8007b70:	bf08      	it	eq
 8007b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007b84:	f380 8811 	msr	BASEPRI, r0
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f7ff fc9c 	bl	80074cc <vTaskSwitchContext>
 8007b94:	f04f 0000 	mov.w	r0, #0
 8007b98:	f380 8811 	msr	BASEPRI, r0
 8007b9c:	bc09      	pop	{r0, r3}
 8007b9e:	6819      	ldr	r1, [r3, #0]
 8007ba0:	6808      	ldr	r0, [r1, #0]
 8007ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba6:	f01e 0f10 	tst.w	lr, #16
 8007baa:	bf08      	it	eq
 8007bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007bb0:	f380 8809 	msr	PSP, r0
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	f3af 8000 	nop.w

08007bc0 <pxCurrentTCBConst>:
 8007bc0:	240005d4 	.word	0x240005d4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop

08007bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007be2:	f7ff fbbb 	bl	800735c <xTaskIncrementTick>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007bec:	4b06      	ldr	r3, [pc, #24]	; (8007c08 <xPortSysTickHandler+0x40>)
 8007bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	f383 8811 	msr	BASEPRI, r3
}
 8007bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	e000ed04 	.word	0xe000ed04

08007c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <vPortSetupTimerInterrupt+0x38>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <vPortSetupTimerInterrupt+0x3c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a0a      	ldr	r2, [pc, #40]	; (8007c4c <vPortSetupTimerInterrupt+0x40>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	099b      	lsrs	r3, r3, #6
 8007c28:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <vPortSetupTimerInterrupt+0x44>)
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c2e:	4b04      	ldr	r3, [pc, #16]	; (8007c40 <vPortSetupTimerInterrupt+0x34>)
 8007c30:	2207      	movs	r2, #7
 8007c32:	601a      	str	r2, [r3, #0]
}
 8007c34:	bf00      	nop
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	e000e010 	.word	0xe000e010
 8007c44:	e000e018 	.word	0xe000e018
 8007c48:	24000000 	.word	0x24000000
 8007c4c:	10624dd3 	.word	0x10624dd3
 8007c50:	e000e014 	.word	0xe000e014

08007c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007c64 <vPortEnableVFP+0x10>
 8007c58:	6801      	ldr	r1, [r0, #0]
 8007c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007c5e:	6001      	str	r1, [r0, #0]
 8007c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007c62:	bf00      	nop
 8007c64:	e000ed88 	.word	0xe000ed88

08007c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c74:	f7ff fac8 	bl	8007208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c78:	4b5b      	ldr	r3, [pc, #364]	; (8007de8 <pvPortMalloc+0x180>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c80:	f000 f920 	bl	8007ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c84:	4b59      	ldr	r3, [pc, #356]	; (8007dec <pvPortMalloc+0x184>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 8093 	bne.w	8007db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01d      	beq.n	8007cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c98:	2208      	movs	r2, #8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f003 0307 	and.w	r3, r3, #7
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d014      	beq.n	8007cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f023 0307 	bic.w	r3, r3, #7
 8007cb0:	3308      	adds	r3, #8
 8007cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	617b      	str	r3, [r7, #20]
}
 8007cd0:	bf00      	nop
 8007cd2:	e7fe      	b.n	8007cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d06e      	beq.n	8007db8 <pvPortMalloc+0x150>
 8007cda:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <pvPortMalloc+0x188>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d869      	bhi.n	8007db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ce4:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <pvPortMalloc+0x18c>)
 8007ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ce8:	4b42      	ldr	r3, [pc, #264]	; (8007df4 <pvPortMalloc+0x18c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cee:	e004      	b.n	8007cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d903      	bls.n	8007d0c <pvPortMalloc+0xa4>
 8007d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1f1      	bne.n	8007cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d0c:	4b36      	ldr	r3, [pc, #216]	; (8007de8 <pvPortMalloc+0x180>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d050      	beq.n	8007db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	4413      	add	r3, r2
 8007d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	681a      	ldr	r2, [r3, #0]
 8007d24:	6a3b      	ldr	r3, [r7, #32]
 8007d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	1ad2      	subs	r2, r2, r3
 8007d30:	2308      	movs	r3, #8
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d91f      	bls.n	8007d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	f003 0307 	and.w	r3, r3, #7
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <pvPortMalloc+0xf8>
	__asm volatile
 8007d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4e:	f383 8811 	msr	BASEPRI, r3
 8007d52:	f3bf 8f6f 	isb	sy
 8007d56:	f3bf 8f4f 	dsb	sy
 8007d5a:	613b      	str	r3, [r7, #16]
}
 8007d5c:	bf00      	nop
 8007d5e:	e7fe      	b.n	8007d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d72:	69b8      	ldr	r0, [r7, #24]
 8007d74:	f000 f908 	bl	8007f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d78:	4b1d      	ldr	r3, [pc, #116]	; (8007df0 <pvPortMalloc+0x188>)
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	4a1b      	ldr	r2, [pc, #108]	; (8007df0 <pvPortMalloc+0x188>)
 8007d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d86:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <pvPortMalloc+0x188>)
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	; (8007df8 <pvPortMalloc+0x190>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d203      	bcs.n	8007d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d92:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <pvPortMalloc+0x188>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a18      	ldr	r2, [pc, #96]	; (8007df8 <pvPortMalloc+0x190>)
 8007d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	685a      	ldr	r2, [r3, #4]
 8007d9e:	4b13      	ldr	r3, [pc, #76]	; (8007dec <pvPortMalloc+0x184>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <pvPortMalloc+0x194>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a11      	ldr	r2, [pc, #68]	; (8007dfc <pvPortMalloc+0x194>)
 8007db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007db8:	f7ff fa34 	bl	8007224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 0307 	and.w	r3, r3, #7
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <pvPortMalloc+0x174>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	f383 8811 	msr	BASEPRI, r3
 8007dce:	f3bf 8f6f 	isb	sy
 8007dd2:	f3bf 8f4f 	dsb	sy
 8007dd6:	60fb      	str	r3, [r7, #12]
}
 8007dd8:	bf00      	nop
 8007dda:	e7fe      	b.n	8007dda <pvPortMalloc+0x172>
	return pvReturn;
 8007ddc:	69fb      	ldr	r3, [r7, #28]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	24004310 	.word	0x24004310
 8007dec:	24004324 	.word	0x24004324
 8007df0:	24004314 	.word	0x24004314
 8007df4:	24004308 	.word	0x24004308
 8007df8:	24004318 	.word	0x24004318
 8007dfc:	2400431c 	.word	0x2400431c

08007e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d04d      	beq.n	8007eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e12:	2308      	movs	r3, #8
 8007e14:	425b      	negs	r3, r3
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4413      	add	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	4b24      	ldr	r3, [pc, #144]	; (8007eb8 <vPortFree+0xb8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4013      	ands	r3, r2
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10a      	bne.n	8007e44 <vPortFree+0x44>
	__asm volatile
 8007e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e32:	f383 8811 	msr	BASEPRI, r3
 8007e36:	f3bf 8f6f 	isb	sy
 8007e3a:	f3bf 8f4f 	dsb	sy
 8007e3e:	60fb      	str	r3, [r7, #12]
}
 8007e40:	bf00      	nop
 8007e42:	e7fe      	b.n	8007e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <vPortFree+0x62>
	__asm volatile
 8007e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	60bb      	str	r3, [r7, #8]
}
 8007e5e:	bf00      	nop
 8007e60:	e7fe      	b.n	8007e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	4b14      	ldr	r3, [pc, #80]	; (8007eb8 <vPortFree+0xb8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01e      	beq.n	8007eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d11a      	bne.n	8007eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	; (8007eb8 <vPortFree+0xb8>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	43db      	mvns	r3, r3
 8007e82:	401a      	ands	r2, r3
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e88:	f7ff f9be 	bl	8007208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <vPortFree+0xbc>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4413      	add	r3, r2
 8007e96:	4a09      	ldr	r2, [pc, #36]	; (8007ebc <vPortFree+0xbc>)
 8007e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e9a:	6938      	ldr	r0, [r7, #16]
 8007e9c:	f000 f874 	bl	8007f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <vPortFree+0xc0>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a06      	ldr	r2, [pc, #24]	; (8007ec0 <vPortFree+0xc0>)
 8007ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eaa:	f7ff f9bb 	bl	8007224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eae:	bf00      	nop
 8007eb0:	3718      	adds	r7, #24
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	24004324 	.word	0x24004324
 8007ebc:	24004314 	.word	0x24004314
 8007ec0:	24004320 	.word	0x24004320

08007ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ed0:	4b27      	ldr	r3, [pc, #156]	; (8007f70 <prvHeapInit+0xac>)
 8007ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00c      	beq.n	8007ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3307      	adds	r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	4a1f      	ldr	r2, [pc, #124]	; (8007f70 <prvHeapInit+0xac>)
 8007ef4:	4413      	add	r3, r2
 8007ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007efc:	4a1d      	ldr	r2, [pc, #116]	; (8007f74 <prvHeapInit+0xb0>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f02:	4b1c      	ldr	r3, [pc, #112]	; (8007f74 <prvHeapInit+0xb0>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f10:	2208      	movs	r2, #8
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f023 0307 	bic.w	r3, r3, #7
 8007f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4a15      	ldr	r2, [pc, #84]	; (8007f78 <prvHeapInit+0xb4>)
 8007f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f26:	4b14      	ldr	r3, [pc, #80]	; (8007f78 <prvHeapInit+0xb4>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f2e:	4b12      	ldr	r3, [pc, #72]	; (8007f78 <prvHeapInit+0xb4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f44:	4b0c      	ldr	r3, [pc, #48]	; (8007f78 <prvHeapInit+0xb4>)
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <prvHeapInit+0xb8>)
 8007f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	4a09      	ldr	r2, [pc, #36]	; (8007f80 <prvHeapInit+0xbc>)
 8007f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f5c:	4b09      	ldr	r3, [pc, #36]	; (8007f84 <prvHeapInit+0xc0>)
 8007f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f62:	601a      	str	r2, [r3, #0]
}
 8007f64:	bf00      	nop
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	24000708 	.word	0x24000708
 8007f74:	24004308 	.word	0x24004308
 8007f78:	24004310 	.word	0x24004310
 8007f7c:	24004318 	.word	0x24004318
 8007f80:	24004314 	.word	0x24004314
 8007f84:	24004324 	.word	0x24004324

08007f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f90:	4b28      	ldr	r3, [pc, #160]	; (8008034 <prvInsertBlockIntoFreeList+0xac>)
 8007f92:	60fb      	str	r3, [r7, #12]
 8007f94:	e002      	b.n	8007f9c <prvInsertBlockIntoFreeList+0x14>
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	60fb      	str	r3, [r7, #12]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	687a      	ldr	r2, [r7, #4]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d8f7      	bhi.n	8007f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d108      	bne.n	8007fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	441a      	add	r2, r3
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	441a      	add	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d118      	bne.n	8008010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d00d      	beq.n	8008006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	441a      	add	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e008      	b.n	8008018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008006:	4b0c      	ldr	r3, [pc, #48]	; (8008038 <prvInsertBlockIntoFreeList+0xb0>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	601a      	str	r2, [r3, #0]
 800800e:	e003      	b.n	8008018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008018:	68fa      	ldr	r2, [r7, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	429a      	cmp	r2, r3
 800801e:	d002      	beq.n	8008026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	24004308 	.word	0x24004308
 8008038:	24004310 	.word	0x24004310

0800803c <__cvt>:
 800803c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803e:	ed2d 8b02 	vpush	{d8}
 8008042:	eeb0 8b40 	vmov.f64	d8, d0
 8008046:	b085      	sub	sp, #20
 8008048:	4617      	mov	r7, r2
 800804a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800804c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800804e:	ee18 2a90 	vmov	r2, s17
 8008052:	f025 0520 	bic.w	r5, r5, #32
 8008056:	2a00      	cmp	r2, #0
 8008058:	bfb6      	itet	lt
 800805a:	222d      	movlt	r2, #45	; 0x2d
 800805c:	2200      	movge	r2, #0
 800805e:	eeb1 8b40 	vneglt.f64	d8, d0
 8008062:	2d46      	cmp	r5, #70	; 0x46
 8008064:	460c      	mov	r4, r1
 8008066:	701a      	strb	r2, [r3, #0]
 8008068:	d004      	beq.n	8008074 <__cvt+0x38>
 800806a:	2d45      	cmp	r5, #69	; 0x45
 800806c:	d100      	bne.n	8008070 <__cvt+0x34>
 800806e:	3401      	adds	r4, #1
 8008070:	2102      	movs	r1, #2
 8008072:	e000      	b.n	8008076 <__cvt+0x3a>
 8008074:	2103      	movs	r1, #3
 8008076:	ab03      	add	r3, sp, #12
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	ab02      	add	r3, sp, #8
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	4622      	mov	r2, r4
 8008080:	4633      	mov	r3, r6
 8008082:	eeb0 0b48 	vmov.f64	d0, d8
 8008086:	f000 fea7 	bl	8008dd8 <_dtoa_r>
 800808a:	2d47      	cmp	r5, #71	; 0x47
 800808c:	d101      	bne.n	8008092 <__cvt+0x56>
 800808e:	07fb      	lsls	r3, r7, #31
 8008090:	d51a      	bpl.n	80080c8 <__cvt+0x8c>
 8008092:	2d46      	cmp	r5, #70	; 0x46
 8008094:	eb00 0204 	add.w	r2, r0, r4
 8008098:	d10c      	bne.n	80080b4 <__cvt+0x78>
 800809a:	7803      	ldrb	r3, [r0, #0]
 800809c:	2b30      	cmp	r3, #48	; 0x30
 800809e:	d107      	bne.n	80080b0 <__cvt+0x74>
 80080a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a8:	bf1c      	itt	ne
 80080aa:	f1c4 0401 	rsbne	r4, r4, #1
 80080ae:	6034      	strne	r4, [r6, #0]
 80080b0:	6833      	ldr	r3, [r6, #0]
 80080b2:	441a      	add	r2, r3
 80080b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80080b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080bc:	bf08      	it	eq
 80080be:	9203      	streq	r2, [sp, #12]
 80080c0:	2130      	movs	r1, #48	; 0x30
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d307      	bcc.n	80080d8 <__cvt+0x9c>
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080cc:	1a1b      	subs	r3, r3, r0
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	b005      	add	sp, #20
 80080d2:	ecbd 8b02 	vpop	{d8}
 80080d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d8:	1c5c      	adds	r4, r3, #1
 80080da:	9403      	str	r4, [sp, #12]
 80080dc:	7019      	strb	r1, [r3, #0]
 80080de:	e7f0      	b.n	80080c2 <__cvt+0x86>

080080e0 <__exponent>:
 80080e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080e2:	4603      	mov	r3, r0
 80080e4:	2900      	cmp	r1, #0
 80080e6:	bfb8      	it	lt
 80080e8:	4249      	neglt	r1, r1
 80080ea:	f803 2b02 	strb.w	r2, [r3], #2
 80080ee:	bfb4      	ite	lt
 80080f0:	222d      	movlt	r2, #45	; 0x2d
 80080f2:	222b      	movge	r2, #43	; 0x2b
 80080f4:	2909      	cmp	r1, #9
 80080f6:	7042      	strb	r2, [r0, #1]
 80080f8:	dd2a      	ble.n	8008150 <__exponent+0x70>
 80080fa:	f10d 0207 	add.w	r2, sp, #7
 80080fe:	4617      	mov	r7, r2
 8008100:	260a      	movs	r6, #10
 8008102:	4694      	mov	ip, r2
 8008104:	fb91 f5f6 	sdiv	r5, r1, r6
 8008108:	fb06 1415 	mls	r4, r6, r5, r1
 800810c:	3430      	adds	r4, #48	; 0x30
 800810e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008112:	460c      	mov	r4, r1
 8008114:	2c63      	cmp	r4, #99	; 0x63
 8008116:	f102 32ff 	add.w	r2, r2, #4294967295
 800811a:	4629      	mov	r1, r5
 800811c:	dcf1      	bgt.n	8008102 <__exponent+0x22>
 800811e:	3130      	adds	r1, #48	; 0x30
 8008120:	f1ac 0402 	sub.w	r4, ip, #2
 8008124:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008128:	1c41      	adds	r1, r0, #1
 800812a:	4622      	mov	r2, r4
 800812c:	42ba      	cmp	r2, r7
 800812e:	d30a      	bcc.n	8008146 <__exponent+0x66>
 8008130:	f10d 0209 	add.w	r2, sp, #9
 8008134:	eba2 020c 	sub.w	r2, r2, ip
 8008138:	42bc      	cmp	r4, r7
 800813a:	bf88      	it	hi
 800813c:	2200      	movhi	r2, #0
 800813e:	4413      	add	r3, r2
 8008140:	1a18      	subs	r0, r3, r0
 8008142:	b003      	add	sp, #12
 8008144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008146:	f812 5b01 	ldrb.w	r5, [r2], #1
 800814a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800814e:	e7ed      	b.n	800812c <__exponent+0x4c>
 8008150:	2330      	movs	r3, #48	; 0x30
 8008152:	3130      	adds	r1, #48	; 0x30
 8008154:	7083      	strb	r3, [r0, #2]
 8008156:	70c1      	strb	r1, [r0, #3]
 8008158:	1d03      	adds	r3, r0, #4
 800815a:	e7f1      	b.n	8008140 <__exponent+0x60>
 800815c:	0000      	movs	r0, r0
	...

08008160 <_printf_float>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	b08b      	sub	sp, #44	; 0x2c
 8008166:	460c      	mov	r4, r1
 8008168:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800816c:	4616      	mov	r6, r2
 800816e:	461f      	mov	r7, r3
 8008170:	4605      	mov	r5, r0
 8008172:	f000 fccd 	bl	8008b10 <_localeconv_r>
 8008176:	f8d0 b000 	ldr.w	fp, [r0]
 800817a:	4658      	mov	r0, fp
 800817c:	f7f8 f918 	bl	80003b0 <strlen>
 8008180:	2300      	movs	r3, #0
 8008182:	9308      	str	r3, [sp, #32]
 8008184:	f8d8 3000 	ldr.w	r3, [r8]
 8008188:	f894 9018 	ldrb.w	r9, [r4, #24]
 800818c:	6822      	ldr	r2, [r4, #0]
 800818e:	3307      	adds	r3, #7
 8008190:	f023 0307 	bic.w	r3, r3, #7
 8008194:	f103 0108 	add.w	r1, r3, #8
 8008198:	f8c8 1000 	str.w	r1, [r8]
 800819c:	ed93 0b00 	vldr	d0, [r3]
 80081a0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008400 <_printf_float+0x2a0>
 80081a4:	eeb0 7bc0 	vabs.f64	d7, d0
 80081a8:	eeb4 7b46 	vcmp.f64	d7, d6
 80081ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80081b4:	4682      	mov	sl, r0
 80081b6:	dd24      	ble.n	8008202 <_printf_float+0xa2>
 80081b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80081bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c0:	d502      	bpl.n	80081c8 <_printf_float+0x68>
 80081c2:	232d      	movs	r3, #45	; 0x2d
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c8:	498f      	ldr	r1, [pc, #572]	; (8008408 <_printf_float+0x2a8>)
 80081ca:	4b90      	ldr	r3, [pc, #576]	; (800840c <_printf_float+0x2ac>)
 80081cc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80081d0:	bf94      	ite	ls
 80081d2:	4688      	movls	r8, r1
 80081d4:	4698      	movhi	r8, r3
 80081d6:	2303      	movs	r3, #3
 80081d8:	6123      	str	r3, [r4, #16]
 80081da:	f022 0204 	bic.w	r2, r2, #4
 80081de:	2300      	movs	r3, #0
 80081e0:	6022      	str	r2, [r4, #0]
 80081e2:	9304      	str	r3, [sp, #16]
 80081e4:	9700      	str	r7, [sp, #0]
 80081e6:	4633      	mov	r3, r6
 80081e8:	aa09      	add	r2, sp, #36	; 0x24
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 f9d1 	bl	8008594 <_printf_common>
 80081f2:	3001      	adds	r0, #1
 80081f4:	f040 808a 	bne.w	800830c <_printf_float+0x1ac>
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	b00b      	add	sp, #44	; 0x2c
 80081fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008202:	eeb4 0b40 	vcmp.f64	d0, d0
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	d709      	bvc.n	8008220 <_printf_float+0xc0>
 800820c:	ee10 3a90 	vmov	r3, s1
 8008210:	2b00      	cmp	r3, #0
 8008212:	bfbc      	itt	lt
 8008214:	232d      	movlt	r3, #45	; 0x2d
 8008216:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800821a:	497d      	ldr	r1, [pc, #500]	; (8008410 <_printf_float+0x2b0>)
 800821c:	4b7d      	ldr	r3, [pc, #500]	; (8008414 <_printf_float+0x2b4>)
 800821e:	e7d5      	b.n	80081cc <_printf_float+0x6c>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008226:	9104      	str	r1, [sp, #16]
 8008228:	1c59      	adds	r1, r3, #1
 800822a:	d13c      	bne.n	80082a6 <_printf_float+0x146>
 800822c:	2306      	movs	r3, #6
 800822e:	6063      	str	r3, [r4, #4]
 8008230:	2300      	movs	r3, #0
 8008232:	9303      	str	r3, [sp, #12]
 8008234:	ab08      	add	r3, sp, #32
 8008236:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800823a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800823e:	ab07      	add	r3, sp, #28
 8008240:	6861      	ldr	r1, [r4, #4]
 8008242:	9300      	str	r3, [sp, #0]
 8008244:	6022      	str	r2, [r4, #0]
 8008246:	f10d 031b 	add.w	r3, sp, #27
 800824a:	4628      	mov	r0, r5
 800824c:	f7ff fef6 	bl	800803c <__cvt>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	9907      	ldr	r1, [sp, #28]
 8008254:	2b47      	cmp	r3, #71	; 0x47
 8008256:	4680      	mov	r8, r0
 8008258:	d108      	bne.n	800826c <_printf_float+0x10c>
 800825a:	1cc8      	adds	r0, r1, #3
 800825c:	db02      	blt.n	8008264 <_printf_float+0x104>
 800825e:	6863      	ldr	r3, [r4, #4]
 8008260:	4299      	cmp	r1, r3
 8008262:	dd41      	ble.n	80082e8 <_printf_float+0x188>
 8008264:	f1a9 0902 	sub.w	r9, r9, #2
 8008268:	fa5f f989 	uxtb.w	r9, r9
 800826c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008270:	d820      	bhi.n	80082b4 <_printf_float+0x154>
 8008272:	3901      	subs	r1, #1
 8008274:	464a      	mov	r2, r9
 8008276:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800827a:	9107      	str	r1, [sp, #28]
 800827c:	f7ff ff30 	bl	80080e0 <__exponent>
 8008280:	9a08      	ldr	r2, [sp, #32]
 8008282:	9004      	str	r0, [sp, #16]
 8008284:	1813      	adds	r3, r2, r0
 8008286:	2a01      	cmp	r2, #1
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	dc02      	bgt.n	8008292 <_printf_float+0x132>
 800828c:	6822      	ldr	r2, [r4, #0]
 800828e:	07d2      	lsls	r2, r2, #31
 8008290:	d501      	bpl.n	8008296 <_printf_float+0x136>
 8008292:	3301      	adds	r3, #1
 8008294:	6123      	str	r3, [r4, #16]
 8008296:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0a2      	beq.n	80081e4 <_printf_float+0x84>
 800829e:	232d      	movs	r3, #45	; 0x2d
 80082a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a4:	e79e      	b.n	80081e4 <_printf_float+0x84>
 80082a6:	9904      	ldr	r1, [sp, #16]
 80082a8:	2947      	cmp	r1, #71	; 0x47
 80082aa:	d1c1      	bne.n	8008230 <_printf_float+0xd0>
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1bf      	bne.n	8008230 <_printf_float+0xd0>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e7bc      	b.n	800822e <_printf_float+0xce>
 80082b4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80082b8:	d118      	bne.n	80082ec <_printf_float+0x18c>
 80082ba:	2900      	cmp	r1, #0
 80082bc:	6863      	ldr	r3, [r4, #4]
 80082be:	dd0b      	ble.n	80082d8 <_printf_float+0x178>
 80082c0:	6121      	str	r1, [r4, #16]
 80082c2:	b913      	cbnz	r3, 80082ca <_printf_float+0x16a>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	07d0      	lsls	r0, r2, #31
 80082c8:	d502      	bpl.n	80082d0 <_printf_float+0x170>
 80082ca:	3301      	adds	r3, #1
 80082cc:	440b      	add	r3, r1
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	2300      	movs	r3, #0
 80082d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	e7de      	b.n	8008296 <_printf_float+0x136>
 80082d8:	b913      	cbnz	r3, 80082e0 <_printf_float+0x180>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	07d2      	lsls	r2, r2, #31
 80082de:	d501      	bpl.n	80082e4 <_printf_float+0x184>
 80082e0:	3302      	adds	r3, #2
 80082e2:	e7f4      	b.n	80082ce <_printf_float+0x16e>
 80082e4:	2301      	movs	r3, #1
 80082e6:	e7f2      	b.n	80082ce <_printf_float+0x16e>
 80082e8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80082ec:	9b08      	ldr	r3, [sp, #32]
 80082ee:	4299      	cmp	r1, r3
 80082f0:	db05      	blt.n	80082fe <_printf_float+0x19e>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	6121      	str	r1, [r4, #16]
 80082f6:	07d8      	lsls	r0, r3, #31
 80082f8:	d5ea      	bpl.n	80082d0 <_printf_float+0x170>
 80082fa:	1c4b      	adds	r3, r1, #1
 80082fc:	e7e7      	b.n	80082ce <_printf_float+0x16e>
 80082fe:	2900      	cmp	r1, #0
 8008300:	bfd4      	ite	le
 8008302:	f1c1 0202 	rsble	r2, r1, #2
 8008306:	2201      	movgt	r2, #1
 8008308:	4413      	add	r3, r2
 800830a:	e7e0      	b.n	80082ce <_printf_float+0x16e>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	055a      	lsls	r2, r3, #21
 8008310:	d407      	bmi.n	8008322 <_printf_float+0x1c2>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	4642      	mov	r2, r8
 8008316:	4631      	mov	r1, r6
 8008318:	4628      	mov	r0, r5
 800831a:	47b8      	blx	r7
 800831c:	3001      	adds	r0, #1
 800831e:	d12a      	bne.n	8008376 <_printf_float+0x216>
 8008320:	e76a      	b.n	80081f8 <_printf_float+0x98>
 8008322:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008326:	f240 80e0 	bls.w	80084ea <_printf_float+0x38a>
 800832a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800832e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008336:	d133      	bne.n	80083a0 <_printf_float+0x240>
 8008338:	4a37      	ldr	r2, [pc, #220]	; (8008418 <_printf_float+0x2b8>)
 800833a:	2301      	movs	r3, #1
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af58 	beq.w	80081f8 <_printf_float+0x98>
 8008348:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800834c:	429a      	cmp	r2, r3
 800834e:	db02      	blt.n	8008356 <_printf_float+0x1f6>
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	07d8      	lsls	r0, r3, #31
 8008354:	d50f      	bpl.n	8008376 <_printf_float+0x216>
 8008356:	4653      	mov	r3, sl
 8008358:	465a      	mov	r2, fp
 800835a:	4631      	mov	r1, r6
 800835c:	4628      	mov	r0, r5
 800835e:	47b8      	blx	r7
 8008360:	3001      	adds	r0, #1
 8008362:	f43f af49 	beq.w	80081f8 <_printf_float+0x98>
 8008366:	f04f 0800 	mov.w	r8, #0
 800836a:	f104 091a 	add.w	r9, r4, #26
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	3b01      	subs	r3, #1
 8008372:	4543      	cmp	r3, r8
 8008374:	dc09      	bgt.n	800838a <_printf_float+0x22a>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	079b      	lsls	r3, r3, #30
 800837a:	f100 8106 	bmi.w	800858a <_printf_float+0x42a>
 800837e:	68e0      	ldr	r0, [r4, #12]
 8008380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008382:	4298      	cmp	r0, r3
 8008384:	bfb8      	it	lt
 8008386:	4618      	movlt	r0, r3
 8008388:	e738      	b.n	80081fc <_printf_float+0x9c>
 800838a:	2301      	movs	r3, #1
 800838c:	464a      	mov	r2, r9
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	f43f af2f 	beq.w	80081f8 <_printf_float+0x98>
 800839a:	f108 0801 	add.w	r8, r8, #1
 800839e:	e7e6      	b.n	800836e <_printf_float+0x20e>
 80083a0:	9b07      	ldr	r3, [sp, #28]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	dc3a      	bgt.n	800841c <_printf_float+0x2bc>
 80083a6:	4a1c      	ldr	r2, [pc, #112]	; (8008418 <_printf_float+0x2b8>)
 80083a8:	2301      	movs	r3, #1
 80083aa:	4631      	mov	r1, r6
 80083ac:	4628      	mov	r0, r5
 80083ae:	47b8      	blx	r7
 80083b0:	3001      	adds	r0, #1
 80083b2:	f43f af21 	beq.w	80081f8 <_printf_float+0x98>
 80083b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d102      	bne.n	80083c4 <_printf_float+0x264>
 80083be:	6823      	ldr	r3, [r4, #0]
 80083c0:	07d9      	lsls	r1, r3, #31
 80083c2:	d5d8      	bpl.n	8008376 <_printf_float+0x216>
 80083c4:	4653      	mov	r3, sl
 80083c6:	465a      	mov	r2, fp
 80083c8:	4631      	mov	r1, r6
 80083ca:	4628      	mov	r0, r5
 80083cc:	47b8      	blx	r7
 80083ce:	3001      	adds	r0, #1
 80083d0:	f43f af12 	beq.w	80081f8 <_printf_float+0x98>
 80083d4:	f04f 0900 	mov.w	r9, #0
 80083d8:	f104 0a1a 	add.w	sl, r4, #26
 80083dc:	9b07      	ldr	r3, [sp, #28]
 80083de:	425b      	negs	r3, r3
 80083e0:	454b      	cmp	r3, r9
 80083e2:	dc01      	bgt.n	80083e8 <_printf_float+0x288>
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	e795      	b.n	8008314 <_printf_float+0x1b4>
 80083e8:	2301      	movs	r3, #1
 80083ea:	4652      	mov	r2, sl
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	47b8      	blx	r7
 80083f2:	3001      	adds	r0, #1
 80083f4:	f43f af00 	beq.w	80081f8 <_printf_float+0x98>
 80083f8:	f109 0901 	add.w	r9, r9, #1
 80083fc:	e7ee      	b.n	80083dc <_printf_float+0x27c>
 80083fe:	bf00      	nop
 8008400:	ffffffff 	.word	0xffffffff
 8008404:	7fefffff 	.word	0x7fefffff
 8008408:	0800ad50 	.word	0x0800ad50
 800840c:	0800ad54 	.word	0x0800ad54
 8008410:	0800ad58 	.word	0x0800ad58
 8008414:	0800ad5c 	.word	0x0800ad5c
 8008418:	0800ad60 	.word	0x0800ad60
 800841c:	9a08      	ldr	r2, [sp, #32]
 800841e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008420:	429a      	cmp	r2, r3
 8008422:	bfa8      	it	ge
 8008424:	461a      	movge	r2, r3
 8008426:	2a00      	cmp	r2, #0
 8008428:	4691      	mov	r9, r2
 800842a:	dc38      	bgt.n	800849e <_printf_float+0x33e>
 800842c:	2300      	movs	r3, #0
 800842e:	9305      	str	r3, [sp, #20]
 8008430:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008434:	f104 021a 	add.w	r2, r4, #26
 8008438:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800843a:	9905      	ldr	r1, [sp, #20]
 800843c:	9304      	str	r3, [sp, #16]
 800843e:	eba3 0309 	sub.w	r3, r3, r9
 8008442:	428b      	cmp	r3, r1
 8008444:	dc33      	bgt.n	80084ae <_printf_float+0x34e>
 8008446:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800844a:	429a      	cmp	r2, r3
 800844c:	db3c      	blt.n	80084c8 <_printf_float+0x368>
 800844e:	6823      	ldr	r3, [r4, #0]
 8008450:	07da      	lsls	r2, r3, #31
 8008452:	d439      	bmi.n	80084c8 <_printf_float+0x368>
 8008454:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008458:	eba2 0903 	sub.w	r9, r2, r3
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	1ad2      	subs	r2, r2, r3
 8008460:	4591      	cmp	r9, r2
 8008462:	bfa8      	it	ge
 8008464:	4691      	movge	r9, r2
 8008466:	f1b9 0f00 	cmp.w	r9, #0
 800846a:	dc35      	bgt.n	80084d8 <_printf_float+0x378>
 800846c:	f04f 0800 	mov.w	r8, #0
 8008470:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008474:	f104 0a1a 	add.w	sl, r4, #26
 8008478:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800847c:	1a9b      	subs	r3, r3, r2
 800847e:	eba3 0309 	sub.w	r3, r3, r9
 8008482:	4543      	cmp	r3, r8
 8008484:	f77f af77 	ble.w	8008376 <_printf_float+0x216>
 8008488:	2301      	movs	r3, #1
 800848a:	4652      	mov	r2, sl
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	f43f aeb0 	beq.w	80081f8 <_printf_float+0x98>
 8008498:	f108 0801 	add.w	r8, r8, #1
 800849c:	e7ec      	b.n	8008478 <_printf_float+0x318>
 800849e:	4613      	mov	r3, r2
 80084a0:	4631      	mov	r1, r6
 80084a2:	4642      	mov	r2, r8
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	d1bf      	bne.n	800842c <_printf_float+0x2cc>
 80084ac:	e6a4      	b.n	80081f8 <_printf_float+0x98>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	9204      	str	r2, [sp, #16]
 80084b6:	47b8      	blx	r7
 80084b8:	3001      	adds	r0, #1
 80084ba:	f43f ae9d 	beq.w	80081f8 <_printf_float+0x98>
 80084be:	9b05      	ldr	r3, [sp, #20]
 80084c0:	9a04      	ldr	r2, [sp, #16]
 80084c2:	3301      	adds	r3, #1
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	e7b7      	b.n	8008438 <_printf_float+0x2d8>
 80084c8:	4653      	mov	r3, sl
 80084ca:	465a      	mov	r2, fp
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	d1be      	bne.n	8008454 <_printf_float+0x2f4>
 80084d6:	e68f      	b.n	80081f8 <_printf_float+0x98>
 80084d8:	9a04      	ldr	r2, [sp, #16]
 80084da:	464b      	mov	r3, r9
 80084dc:	4442      	add	r2, r8
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	d1c1      	bne.n	800846c <_printf_float+0x30c>
 80084e8:	e686      	b.n	80081f8 <_printf_float+0x98>
 80084ea:	9a08      	ldr	r2, [sp, #32]
 80084ec:	2a01      	cmp	r2, #1
 80084ee:	dc01      	bgt.n	80084f4 <_printf_float+0x394>
 80084f0:	07db      	lsls	r3, r3, #31
 80084f2:	d537      	bpl.n	8008564 <_printf_float+0x404>
 80084f4:	2301      	movs	r3, #1
 80084f6:	4642      	mov	r2, r8
 80084f8:	4631      	mov	r1, r6
 80084fa:	4628      	mov	r0, r5
 80084fc:	47b8      	blx	r7
 80084fe:	3001      	adds	r0, #1
 8008500:	f43f ae7a 	beq.w	80081f8 <_printf_float+0x98>
 8008504:	4653      	mov	r3, sl
 8008506:	465a      	mov	r2, fp
 8008508:	4631      	mov	r1, r6
 800850a:	4628      	mov	r0, r5
 800850c:	47b8      	blx	r7
 800850e:	3001      	adds	r0, #1
 8008510:	f43f ae72 	beq.w	80081f8 <_printf_float+0x98>
 8008514:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008518:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800851c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008520:	9b08      	ldr	r3, [sp, #32]
 8008522:	d01a      	beq.n	800855a <_printf_float+0x3fa>
 8008524:	3b01      	subs	r3, #1
 8008526:	f108 0201 	add.w	r2, r8, #1
 800852a:	4631      	mov	r1, r6
 800852c:	4628      	mov	r0, r5
 800852e:	47b8      	blx	r7
 8008530:	3001      	adds	r0, #1
 8008532:	d10e      	bne.n	8008552 <_printf_float+0x3f2>
 8008534:	e660      	b.n	80081f8 <_printf_float+0x98>
 8008536:	2301      	movs	r3, #1
 8008538:	464a      	mov	r2, r9
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae59 	beq.w	80081f8 <_printf_float+0x98>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	9b08      	ldr	r3, [sp, #32]
 800854c:	3b01      	subs	r3, #1
 800854e:	4543      	cmp	r3, r8
 8008550:	dcf1      	bgt.n	8008536 <_printf_float+0x3d6>
 8008552:	9b04      	ldr	r3, [sp, #16]
 8008554:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008558:	e6dd      	b.n	8008316 <_printf_float+0x1b6>
 800855a:	f04f 0800 	mov.w	r8, #0
 800855e:	f104 091a 	add.w	r9, r4, #26
 8008562:	e7f2      	b.n	800854a <_printf_float+0x3ea>
 8008564:	2301      	movs	r3, #1
 8008566:	4642      	mov	r2, r8
 8008568:	e7df      	b.n	800852a <_printf_float+0x3ca>
 800856a:	2301      	movs	r3, #1
 800856c:	464a      	mov	r2, r9
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae3f 	beq.w	80081f8 <_printf_float+0x98>
 800857a:	f108 0801 	add.w	r8, r8, #1
 800857e:	68e3      	ldr	r3, [r4, #12]
 8008580:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008582:	1a5b      	subs	r3, r3, r1
 8008584:	4543      	cmp	r3, r8
 8008586:	dcf0      	bgt.n	800856a <_printf_float+0x40a>
 8008588:	e6f9      	b.n	800837e <_printf_float+0x21e>
 800858a:	f04f 0800 	mov.w	r8, #0
 800858e:	f104 0919 	add.w	r9, r4, #25
 8008592:	e7f4      	b.n	800857e <_printf_float+0x41e>

08008594 <_printf_common>:
 8008594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	4616      	mov	r6, r2
 800859a:	4699      	mov	r9, r3
 800859c:	688a      	ldr	r2, [r1, #8]
 800859e:	690b      	ldr	r3, [r1, #16]
 80085a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085a4:	4293      	cmp	r3, r2
 80085a6:	bfb8      	it	lt
 80085a8:	4613      	movlt	r3, r2
 80085aa:	6033      	str	r3, [r6, #0]
 80085ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085b0:	4607      	mov	r7, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	b10a      	cbz	r2, 80085ba <_printf_common+0x26>
 80085b6:	3301      	adds	r3, #1
 80085b8:	6033      	str	r3, [r6, #0]
 80085ba:	6823      	ldr	r3, [r4, #0]
 80085bc:	0699      	lsls	r1, r3, #26
 80085be:	bf42      	ittt	mi
 80085c0:	6833      	ldrmi	r3, [r6, #0]
 80085c2:	3302      	addmi	r3, #2
 80085c4:	6033      	strmi	r3, [r6, #0]
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	f015 0506 	ands.w	r5, r5, #6
 80085cc:	d106      	bne.n	80085dc <_printf_common+0x48>
 80085ce:	f104 0a19 	add.w	sl, r4, #25
 80085d2:	68e3      	ldr	r3, [r4, #12]
 80085d4:	6832      	ldr	r2, [r6, #0]
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	42ab      	cmp	r3, r5
 80085da:	dc26      	bgt.n	800862a <_printf_common+0x96>
 80085dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085e0:	1e13      	subs	r3, r2, #0
 80085e2:	6822      	ldr	r2, [r4, #0]
 80085e4:	bf18      	it	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	0692      	lsls	r2, r2, #26
 80085ea:	d42b      	bmi.n	8008644 <_printf_common+0xb0>
 80085ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085f0:	4649      	mov	r1, r9
 80085f2:	4638      	mov	r0, r7
 80085f4:	47c0      	blx	r8
 80085f6:	3001      	adds	r0, #1
 80085f8:	d01e      	beq.n	8008638 <_printf_common+0xa4>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	6922      	ldr	r2, [r4, #16]
 80085fe:	f003 0306 	and.w	r3, r3, #6
 8008602:	2b04      	cmp	r3, #4
 8008604:	bf02      	ittt	eq
 8008606:	68e5      	ldreq	r5, [r4, #12]
 8008608:	6833      	ldreq	r3, [r6, #0]
 800860a:	1aed      	subeq	r5, r5, r3
 800860c:	68a3      	ldr	r3, [r4, #8]
 800860e:	bf0c      	ite	eq
 8008610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008614:	2500      	movne	r5, #0
 8008616:	4293      	cmp	r3, r2
 8008618:	bfc4      	itt	gt
 800861a:	1a9b      	subgt	r3, r3, r2
 800861c:	18ed      	addgt	r5, r5, r3
 800861e:	2600      	movs	r6, #0
 8008620:	341a      	adds	r4, #26
 8008622:	42b5      	cmp	r5, r6
 8008624:	d11a      	bne.n	800865c <_printf_common+0xc8>
 8008626:	2000      	movs	r0, #0
 8008628:	e008      	b.n	800863c <_printf_common+0xa8>
 800862a:	2301      	movs	r3, #1
 800862c:	4652      	mov	r2, sl
 800862e:	4649      	mov	r1, r9
 8008630:	4638      	mov	r0, r7
 8008632:	47c0      	blx	r8
 8008634:	3001      	adds	r0, #1
 8008636:	d103      	bne.n	8008640 <_printf_common+0xac>
 8008638:	f04f 30ff 	mov.w	r0, #4294967295
 800863c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008640:	3501      	adds	r5, #1
 8008642:	e7c6      	b.n	80085d2 <_printf_common+0x3e>
 8008644:	18e1      	adds	r1, r4, r3
 8008646:	1c5a      	adds	r2, r3, #1
 8008648:	2030      	movs	r0, #48	; 0x30
 800864a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800864e:	4422      	add	r2, r4
 8008650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008658:	3302      	adds	r3, #2
 800865a:	e7c7      	b.n	80085ec <_printf_common+0x58>
 800865c:	2301      	movs	r3, #1
 800865e:	4622      	mov	r2, r4
 8008660:	4649      	mov	r1, r9
 8008662:	4638      	mov	r0, r7
 8008664:	47c0      	blx	r8
 8008666:	3001      	adds	r0, #1
 8008668:	d0e6      	beq.n	8008638 <_printf_common+0xa4>
 800866a:	3601      	adds	r6, #1
 800866c:	e7d9      	b.n	8008622 <_printf_common+0x8e>
	...

08008670 <_printf_i>:
 8008670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008674:	7e0f      	ldrb	r7, [r1, #24]
 8008676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008678:	2f78      	cmp	r7, #120	; 0x78
 800867a:	4691      	mov	r9, r2
 800867c:	4680      	mov	r8, r0
 800867e:	460c      	mov	r4, r1
 8008680:	469a      	mov	sl, r3
 8008682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008686:	d807      	bhi.n	8008698 <_printf_i+0x28>
 8008688:	2f62      	cmp	r7, #98	; 0x62
 800868a:	d80a      	bhi.n	80086a2 <_printf_i+0x32>
 800868c:	2f00      	cmp	r7, #0
 800868e:	f000 80d4 	beq.w	800883a <_printf_i+0x1ca>
 8008692:	2f58      	cmp	r7, #88	; 0x58
 8008694:	f000 80c0 	beq.w	8008818 <_printf_i+0x1a8>
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086a0:	e03a      	b.n	8008718 <_printf_i+0xa8>
 80086a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086a6:	2b15      	cmp	r3, #21
 80086a8:	d8f6      	bhi.n	8008698 <_printf_i+0x28>
 80086aa:	a101      	add	r1, pc, #4	; (adr r1, 80086b0 <_printf_i+0x40>)
 80086ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80086b0:	08008709 	.word	0x08008709
 80086b4:	0800871d 	.word	0x0800871d
 80086b8:	08008699 	.word	0x08008699
 80086bc:	08008699 	.word	0x08008699
 80086c0:	08008699 	.word	0x08008699
 80086c4:	08008699 	.word	0x08008699
 80086c8:	0800871d 	.word	0x0800871d
 80086cc:	08008699 	.word	0x08008699
 80086d0:	08008699 	.word	0x08008699
 80086d4:	08008699 	.word	0x08008699
 80086d8:	08008699 	.word	0x08008699
 80086dc:	08008821 	.word	0x08008821
 80086e0:	08008749 	.word	0x08008749
 80086e4:	080087db 	.word	0x080087db
 80086e8:	08008699 	.word	0x08008699
 80086ec:	08008699 	.word	0x08008699
 80086f0:	08008843 	.word	0x08008843
 80086f4:	08008699 	.word	0x08008699
 80086f8:	08008749 	.word	0x08008749
 80086fc:	08008699 	.word	0x08008699
 8008700:	08008699 	.word	0x08008699
 8008704:	080087e3 	.word	0x080087e3
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	1d1a      	adds	r2, r3, #4
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	602a      	str	r2, [r5, #0]
 8008710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008718:	2301      	movs	r3, #1
 800871a:	e09f      	b.n	800885c <_printf_i+0x1ec>
 800871c:	6820      	ldr	r0, [r4, #0]
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	0607      	lsls	r7, r0, #24
 8008722:	f103 0104 	add.w	r1, r3, #4
 8008726:	6029      	str	r1, [r5, #0]
 8008728:	d501      	bpl.n	800872e <_printf_i+0xbe>
 800872a:	681e      	ldr	r6, [r3, #0]
 800872c:	e003      	b.n	8008736 <_printf_i+0xc6>
 800872e:	0646      	lsls	r6, r0, #25
 8008730:	d5fb      	bpl.n	800872a <_printf_i+0xba>
 8008732:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008736:	2e00      	cmp	r6, #0
 8008738:	da03      	bge.n	8008742 <_printf_i+0xd2>
 800873a:	232d      	movs	r3, #45	; 0x2d
 800873c:	4276      	negs	r6, r6
 800873e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008742:	485a      	ldr	r0, [pc, #360]	; (80088ac <_printf_i+0x23c>)
 8008744:	230a      	movs	r3, #10
 8008746:	e012      	b.n	800876e <_printf_i+0xfe>
 8008748:	682b      	ldr	r3, [r5, #0]
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	1d19      	adds	r1, r3, #4
 800874e:	6029      	str	r1, [r5, #0]
 8008750:	0605      	lsls	r5, r0, #24
 8008752:	d501      	bpl.n	8008758 <_printf_i+0xe8>
 8008754:	681e      	ldr	r6, [r3, #0]
 8008756:	e002      	b.n	800875e <_printf_i+0xee>
 8008758:	0641      	lsls	r1, r0, #25
 800875a:	d5fb      	bpl.n	8008754 <_printf_i+0xe4>
 800875c:	881e      	ldrh	r6, [r3, #0]
 800875e:	4853      	ldr	r0, [pc, #332]	; (80088ac <_printf_i+0x23c>)
 8008760:	2f6f      	cmp	r7, #111	; 0x6f
 8008762:	bf0c      	ite	eq
 8008764:	2308      	moveq	r3, #8
 8008766:	230a      	movne	r3, #10
 8008768:	2100      	movs	r1, #0
 800876a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800876e:	6865      	ldr	r5, [r4, #4]
 8008770:	60a5      	str	r5, [r4, #8]
 8008772:	2d00      	cmp	r5, #0
 8008774:	bfa2      	ittt	ge
 8008776:	6821      	ldrge	r1, [r4, #0]
 8008778:	f021 0104 	bicge.w	r1, r1, #4
 800877c:	6021      	strge	r1, [r4, #0]
 800877e:	b90e      	cbnz	r6, 8008784 <_printf_i+0x114>
 8008780:	2d00      	cmp	r5, #0
 8008782:	d04b      	beq.n	800881c <_printf_i+0x1ac>
 8008784:	4615      	mov	r5, r2
 8008786:	fbb6 f1f3 	udiv	r1, r6, r3
 800878a:	fb03 6711 	mls	r7, r3, r1, r6
 800878e:	5dc7      	ldrb	r7, [r0, r7]
 8008790:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008794:	4637      	mov	r7, r6
 8008796:	42bb      	cmp	r3, r7
 8008798:	460e      	mov	r6, r1
 800879a:	d9f4      	bls.n	8008786 <_printf_i+0x116>
 800879c:	2b08      	cmp	r3, #8
 800879e:	d10b      	bne.n	80087b8 <_printf_i+0x148>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	07de      	lsls	r6, r3, #31
 80087a4:	d508      	bpl.n	80087b8 <_printf_i+0x148>
 80087a6:	6923      	ldr	r3, [r4, #16]
 80087a8:	6861      	ldr	r1, [r4, #4]
 80087aa:	4299      	cmp	r1, r3
 80087ac:	bfde      	ittt	le
 80087ae:	2330      	movle	r3, #48	; 0x30
 80087b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80087b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80087b8:	1b52      	subs	r2, r2, r5
 80087ba:	6122      	str	r2, [r4, #16]
 80087bc:	f8cd a000 	str.w	sl, [sp]
 80087c0:	464b      	mov	r3, r9
 80087c2:	aa03      	add	r2, sp, #12
 80087c4:	4621      	mov	r1, r4
 80087c6:	4640      	mov	r0, r8
 80087c8:	f7ff fee4 	bl	8008594 <_printf_common>
 80087cc:	3001      	adds	r0, #1
 80087ce:	d14a      	bne.n	8008866 <_printf_i+0x1f6>
 80087d0:	f04f 30ff 	mov.w	r0, #4294967295
 80087d4:	b004      	add	sp, #16
 80087d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087da:	6823      	ldr	r3, [r4, #0]
 80087dc:	f043 0320 	orr.w	r3, r3, #32
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	4833      	ldr	r0, [pc, #204]	; (80088b0 <_printf_i+0x240>)
 80087e4:	2778      	movs	r7, #120	; 0x78
 80087e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	6829      	ldr	r1, [r5, #0]
 80087ee:	061f      	lsls	r7, r3, #24
 80087f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80087f4:	d402      	bmi.n	80087fc <_printf_i+0x18c>
 80087f6:	065f      	lsls	r7, r3, #25
 80087f8:	bf48      	it	mi
 80087fa:	b2b6      	uxthmi	r6, r6
 80087fc:	07df      	lsls	r7, r3, #31
 80087fe:	bf48      	it	mi
 8008800:	f043 0320 	orrmi.w	r3, r3, #32
 8008804:	6029      	str	r1, [r5, #0]
 8008806:	bf48      	it	mi
 8008808:	6023      	strmi	r3, [r4, #0]
 800880a:	b91e      	cbnz	r6, 8008814 <_printf_i+0x1a4>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	f023 0320 	bic.w	r3, r3, #32
 8008812:	6023      	str	r3, [r4, #0]
 8008814:	2310      	movs	r3, #16
 8008816:	e7a7      	b.n	8008768 <_printf_i+0xf8>
 8008818:	4824      	ldr	r0, [pc, #144]	; (80088ac <_printf_i+0x23c>)
 800881a:	e7e4      	b.n	80087e6 <_printf_i+0x176>
 800881c:	4615      	mov	r5, r2
 800881e:	e7bd      	b.n	800879c <_printf_i+0x12c>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	6826      	ldr	r6, [r4, #0]
 8008824:	6961      	ldr	r1, [r4, #20]
 8008826:	1d18      	adds	r0, r3, #4
 8008828:	6028      	str	r0, [r5, #0]
 800882a:	0635      	lsls	r5, r6, #24
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	d501      	bpl.n	8008834 <_printf_i+0x1c4>
 8008830:	6019      	str	r1, [r3, #0]
 8008832:	e002      	b.n	800883a <_printf_i+0x1ca>
 8008834:	0670      	lsls	r0, r6, #25
 8008836:	d5fb      	bpl.n	8008830 <_printf_i+0x1c0>
 8008838:	8019      	strh	r1, [r3, #0]
 800883a:	2300      	movs	r3, #0
 800883c:	6123      	str	r3, [r4, #16]
 800883e:	4615      	mov	r5, r2
 8008840:	e7bc      	b.n	80087bc <_printf_i+0x14c>
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	1d1a      	adds	r2, r3, #4
 8008846:	602a      	str	r2, [r5, #0]
 8008848:	681d      	ldr	r5, [r3, #0]
 800884a:	6862      	ldr	r2, [r4, #4]
 800884c:	2100      	movs	r1, #0
 800884e:	4628      	mov	r0, r5
 8008850:	f7f7 fd5e 	bl	8000310 <memchr>
 8008854:	b108      	cbz	r0, 800885a <_printf_i+0x1ea>
 8008856:	1b40      	subs	r0, r0, r5
 8008858:	6060      	str	r0, [r4, #4]
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	6123      	str	r3, [r4, #16]
 800885e:	2300      	movs	r3, #0
 8008860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008864:	e7aa      	b.n	80087bc <_printf_i+0x14c>
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	462a      	mov	r2, r5
 800886a:	4649      	mov	r1, r9
 800886c:	4640      	mov	r0, r8
 800886e:	47d0      	blx	sl
 8008870:	3001      	adds	r0, #1
 8008872:	d0ad      	beq.n	80087d0 <_printf_i+0x160>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	079b      	lsls	r3, r3, #30
 8008878:	d413      	bmi.n	80088a2 <_printf_i+0x232>
 800887a:	68e0      	ldr	r0, [r4, #12]
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	4298      	cmp	r0, r3
 8008880:	bfb8      	it	lt
 8008882:	4618      	movlt	r0, r3
 8008884:	e7a6      	b.n	80087d4 <_printf_i+0x164>
 8008886:	2301      	movs	r3, #1
 8008888:	4632      	mov	r2, r6
 800888a:	4649      	mov	r1, r9
 800888c:	4640      	mov	r0, r8
 800888e:	47d0      	blx	sl
 8008890:	3001      	adds	r0, #1
 8008892:	d09d      	beq.n	80087d0 <_printf_i+0x160>
 8008894:	3501      	adds	r5, #1
 8008896:	68e3      	ldr	r3, [r4, #12]
 8008898:	9903      	ldr	r1, [sp, #12]
 800889a:	1a5b      	subs	r3, r3, r1
 800889c:	42ab      	cmp	r3, r5
 800889e:	dcf2      	bgt.n	8008886 <_printf_i+0x216>
 80088a0:	e7eb      	b.n	800887a <_printf_i+0x20a>
 80088a2:	2500      	movs	r5, #0
 80088a4:	f104 0619 	add.w	r6, r4, #25
 80088a8:	e7f5      	b.n	8008896 <_printf_i+0x226>
 80088aa:	bf00      	nop
 80088ac:	0800ad62 	.word	0x0800ad62
 80088b0:	0800ad73 	.word	0x0800ad73

080088b4 <std>:
 80088b4:	2300      	movs	r3, #0
 80088b6:	b510      	push	{r4, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	e9c0 3300 	strd	r3, r3, [r0]
 80088be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088c2:	6083      	str	r3, [r0, #8]
 80088c4:	8181      	strh	r1, [r0, #12]
 80088c6:	6643      	str	r3, [r0, #100]	; 0x64
 80088c8:	81c2      	strh	r2, [r0, #14]
 80088ca:	6183      	str	r3, [r0, #24]
 80088cc:	4619      	mov	r1, r3
 80088ce:	2208      	movs	r2, #8
 80088d0:	305c      	adds	r0, #92	; 0x5c
 80088d2:	f000 f914 	bl	8008afe <memset>
 80088d6:	4b0d      	ldr	r3, [pc, #52]	; (800890c <std+0x58>)
 80088d8:	6263      	str	r3, [r4, #36]	; 0x24
 80088da:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <std+0x5c>)
 80088dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80088de:	4b0d      	ldr	r3, [pc, #52]	; (8008914 <std+0x60>)
 80088e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088e2:	4b0d      	ldr	r3, [pc, #52]	; (8008918 <std+0x64>)
 80088e4:	6323      	str	r3, [r4, #48]	; 0x30
 80088e6:	4b0d      	ldr	r3, [pc, #52]	; (800891c <std+0x68>)
 80088e8:	6224      	str	r4, [r4, #32]
 80088ea:	429c      	cmp	r4, r3
 80088ec:	d006      	beq.n	80088fc <std+0x48>
 80088ee:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80088f2:	4294      	cmp	r4, r2
 80088f4:	d002      	beq.n	80088fc <std+0x48>
 80088f6:	33d0      	adds	r3, #208	; 0xd0
 80088f8:	429c      	cmp	r4, r3
 80088fa:	d105      	bne.n	8008908 <std+0x54>
 80088fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008904:	f000 b9ce 	b.w	8008ca4 <__retarget_lock_init_recursive>
 8008908:	bd10      	pop	{r4, pc}
 800890a:	bf00      	nop
 800890c:	08008a79 	.word	0x08008a79
 8008910:	08008a9b 	.word	0x08008a9b
 8008914:	08008ad3 	.word	0x08008ad3
 8008918:	08008af7 	.word	0x08008af7
 800891c:	24004328 	.word	0x24004328

08008920 <stdio_exit_handler>:
 8008920:	4a02      	ldr	r2, [pc, #8]	; (800892c <stdio_exit_handler+0xc>)
 8008922:	4903      	ldr	r1, [pc, #12]	; (8008930 <stdio_exit_handler+0x10>)
 8008924:	4803      	ldr	r0, [pc, #12]	; (8008934 <stdio_exit_handler+0x14>)
 8008926:	f000 b869 	b.w	80089fc <_fwalk_sglue>
 800892a:	bf00      	nop
 800892c:	24000014 	.word	0x24000014
 8008930:	0800a565 	.word	0x0800a565
 8008934:	24000020 	.word	0x24000020

08008938 <cleanup_stdio>:
 8008938:	6841      	ldr	r1, [r0, #4]
 800893a:	4b0c      	ldr	r3, [pc, #48]	; (800896c <cleanup_stdio+0x34>)
 800893c:	4299      	cmp	r1, r3
 800893e:	b510      	push	{r4, lr}
 8008940:	4604      	mov	r4, r0
 8008942:	d001      	beq.n	8008948 <cleanup_stdio+0x10>
 8008944:	f001 fe0e 	bl	800a564 <_fflush_r>
 8008948:	68a1      	ldr	r1, [r4, #8]
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <cleanup_stdio+0x38>)
 800894c:	4299      	cmp	r1, r3
 800894e:	d002      	beq.n	8008956 <cleanup_stdio+0x1e>
 8008950:	4620      	mov	r0, r4
 8008952:	f001 fe07 	bl	800a564 <_fflush_r>
 8008956:	68e1      	ldr	r1, [r4, #12]
 8008958:	4b06      	ldr	r3, [pc, #24]	; (8008974 <cleanup_stdio+0x3c>)
 800895a:	4299      	cmp	r1, r3
 800895c:	d004      	beq.n	8008968 <cleanup_stdio+0x30>
 800895e:	4620      	mov	r0, r4
 8008960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008964:	f001 bdfe 	b.w	800a564 <_fflush_r>
 8008968:	bd10      	pop	{r4, pc}
 800896a:	bf00      	nop
 800896c:	24004328 	.word	0x24004328
 8008970:	24004390 	.word	0x24004390
 8008974:	240043f8 	.word	0x240043f8

08008978 <global_stdio_init.part.0>:
 8008978:	b510      	push	{r4, lr}
 800897a:	4b0b      	ldr	r3, [pc, #44]	; (80089a8 <global_stdio_init.part.0+0x30>)
 800897c:	4c0b      	ldr	r4, [pc, #44]	; (80089ac <global_stdio_init.part.0+0x34>)
 800897e:	4a0c      	ldr	r2, [pc, #48]	; (80089b0 <global_stdio_init.part.0+0x38>)
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	4620      	mov	r0, r4
 8008984:	2200      	movs	r2, #0
 8008986:	2104      	movs	r1, #4
 8008988:	f7ff ff94 	bl	80088b4 <std>
 800898c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008990:	2201      	movs	r2, #1
 8008992:	2109      	movs	r1, #9
 8008994:	f7ff ff8e 	bl	80088b4 <std>
 8008998:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800899c:	2202      	movs	r2, #2
 800899e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a2:	2112      	movs	r1, #18
 80089a4:	f7ff bf86 	b.w	80088b4 <std>
 80089a8:	24004460 	.word	0x24004460
 80089ac:	24004328 	.word	0x24004328
 80089b0:	08008921 	.word	0x08008921

080089b4 <__sfp_lock_acquire>:
 80089b4:	4801      	ldr	r0, [pc, #4]	; (80089bc <__sfp_lock_acquire+0x8>)
 80089b6:	f000 b976 	b.w	8008ca6 <__retarget_lock_acquire_recursive>
 80089ba:	bf00      	nop
 80089bc:	24004469 	.word	0x24004469

080089c0 <__sfp_lock_release>:
 80089c0:	4801      	ldr	r0, [pc, #4]	; (80089c8 <__sfp_lock_release+0x8>)
 80089c2:	f000 b971 	b.w	8008ca8 <__retarget_lock_release_recursive>
 80089c6:	bf00      	nop
 80089c8:	24004469 	.word	0x24004469

080089cc <__sinit>:
 80089cc:	b510      	push	{r4, lr}
 80089ce:	4604      	mov	r4, r0
 80089d0:	f7ff fff0 	bl	80089b4 <__sfp_lock_acquire>
 80089d4:	6a23      	ldr	r3, [r4, #32]
 80089d6:	b11b      	cbz	r3, 80089e0 <__sinit+0x14>
 80089d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089dc:	f7ff bff0 	b.w	80089c0 <__sfp_lock_release>
 80089e0:	4b04      	ldr	r3, [pc, #16]	; (80089f4 <__sinit+0x28>)
 80089e2:	6223      	str	r3, [r4, #32]
 80089e4:	4b04      	ldr	r3, [pc, #16]	; (80089f8 <__sinit+0x2c>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1f5      	bne.n	80089d8 <__sinit+0xc>
 80089ec:	f7ff ffc4 	bl	8008978 <global_stdio_init.part.0>
 80089f0:	e7f2      	b.n	80089d8 <__sinit+0xc>
 80089f2:	bf00      	nop
 80089f4:	08008939 	.word	0x08008939
 80089f8:	24004460 	.word	0x24004460

080089fc <_fwalk_sglue>:
 80089fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a00:	4607      	mov	r7, r0
 8008a02:	4688      	mov	r8, r1
 8008a04:	4614      	mov	r4, r2
 8008a06:	2600      	movs	r6, #0
 8008a08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a0c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a10:	d505      	bpl.n	8008a1e <_fwalk_sglue+0x22>
 8008a12:	6824      	ldr	r4, [r4, #0]
 8008a14:	2c00      	cmp	r4, #0
 8008a16:	d1f7      	bne.n	8008a08 <_fwalk_sglue+0xc>
 8008a18:	4630      	mov	r0, r6
 8008a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d907      	bls.n	8008a34 <_fwalk_sglue+0x38>
 8008a24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	d003      	beq.n	8008a34 <_fwalk_sglue+0x38>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4638      	mov	r0, r7
 8008a30:	47c0      	blx	r8
 8008a32:	4306      	orrs	r6, r0
 8008a34:	3568      	adds	r5, #104	; 0x68
 8008a36:	e7e9      	b.n	8008a0c <_fwalk_sglue+0x10>

08008a38 <siprintf>:
 8008a38:	b40e      	push	{r1, r2, r3}
 8008a3a:	b500      	push	{lr}
 8008a3c:	b09c      	sub	sp, #112	; 0x70
 8008a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8008a40:	9002      	str	r0, [sp, #8]
 8008a42:	9006      	str	r0, [sp, #24]
 8008a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008a48:	4809      	ldr	r0, [pc, #36]	; (8008a70 <siprintf+0x38>)
 8008a4a:	9107      	str	r1, [sp, #28]
 8008a4c:	9104      	str	r1, [sp, #16]
 8008a4e:	4909      	ldr	r1, [pc, #36]	; (8008a74 <siprintf+0x3c>)
 8008a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a54:	9105      	str	r1, [sp, #20]
 8008a56:	6800      	ldr	r0, [r0, #0]
 8008a58:	9301      	str	r3, [sp, #4]
 8008a5a:	a902      	add	r1, sp, #8
 8008a5c:	f001 fbfe 	bl	800a25c <_svfiprintf_r>
 8008a60:	9b02      	ldr	r3, [sp, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	b01c      	add	sp, #112	; 0x70
 8008a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a6c:	b003      	add	sp, #12
 8008a6e:	4770      	bx	lr
 8008a70:	2400006c 	.word	0x2400006c
 8008a74:	ffff0208 	.word	0xffff0208

08008a78 <__sread>:
 8008a78:	b510      	push	{r4, lr}
 8008a7a:	460c      	mov	r4, r1
 8008a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a80:	f000 f8c2 	bl	8008c08 <_read_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	bfab      	itete	ge
 8008a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a8c:	181b      	addge	r3, r3, r0
 8008a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a92:	bfac      	ite	ge
 8008a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a96:	81a3      	strhlt	r3, [r4, #12]
 8008a98:	bd10      	pop	{r4, pc}

08008a9a <__swrite>:
 8008a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a9e:	461f      	mov	r7, r3
 8008aa0:	898b      	ldrh	r3, [r1, #12]
 8008aa2:	05db      	lsls	r3, r3, #23
 8008aa4:	4605      	mov	r5, r0
 8008aa6:	460c      	mov	r4, r1
 8008aa8:	4616      	mov	r6, r2
 8008aaa:	d505      	bpl.n	8008ab8 <__swrite+0x1e>
 8008aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab0:	2302      	movs	r3, #2
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f000 f896 	bl	8008be4 <_lseek_r>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	4632      	mov	r2, r6
 8008ac6:	463b      	mov	r3, r7
 8008ac8:	4628      	mov	r0, r5
 8008aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ace:	f000 b8ad 	b.w	8008c2c <_write_r>

08008ad2 <__sseek>:
 8008ad2:	b510      	push	{r4, lr}
 8008ad4:	460c      	mov	r4, r1
 8008ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ada:	f000 f883 	bl	8008be4 <_lseek_r>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	bf15      	itete	ne
 8008ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008aee:	81a3      	strheq	r3, [r4, #12]
 8008af0:	bf18      	it	ne
 8008af2:	81a3      	strhne	r3, [r4, #12]
 8008af4:	bd10      	pop	{r4, pc}

08008af6 <__sclose>:
 8008af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008afa:	f000 b80d 	b.w	8008b18 <_close_r>

08008afe <memset>:
 8008afe:	4402      	add	r2, r0
 8008b00:	4603      	mov	r3, r0
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d100      	bne.n	8008b08 <memset+0xa>
 8008b06:	4770      	bx	lr
 8008b08:	f803 1b01 	strb.w	r1, [r3], #1
 8008b0c:	e7f9      	b.n	8008b02 <memset+0x4>
	...

08008b10 <_localeconv_r>:
 8008b10:	4800      	ldr	r0, [pc, #0]	; (8008b14 <_localeconv_r+0x4>)
 8008b12:	4770      	bx	lr
 8008b14:	24000160 	.word	0x24000160

08008b18 <_close_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d06      	ldr	r5, [pc, #24]	; (8008b34 <_close_r+0x1c>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	f7f8 fd54 	bl	80015d0 <_close>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_close_r+0x1a>
 8008b2c:	682b      	ldr	r3, [r5, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_close_r+0x1a>
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	24004464 	.word	0x24004464

08008b38 <_reclaim_reent>:
 8008b38:	4b29      	ldr	r3, [pc, #164]	; (8008be0 <_reclaim_reent+0xa8>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4283      	cmp	r3, r0
 8008b3e:	b570      	push	{r4, r5, r6, lr}
 8008b40:	4604      	mov	r4, r0
 8008b42:	d04b      	beq.n	8008bdc <_reclaim_reent+0xa4>
 8008b44:	69c3      	ldr	r3, [r0, #28]
 8008b46:	b143      	cbz	r3, 8008b5a <_reclaim_reent+0x22>
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d144      	bne.n	8008bd8 <_reclaim_reent+0xa0>
 8008b4e:	69e3      	ldr	r3, [r4, #28]
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	b111      	cbz	r1, 8008b5a <_reclaim_reent+0x22>
 8008b54:	4620      	mov	r0, r4
 8008b56:	f000 feab 	bl	80098b0 <_free_r>
 8008b5a:	6961      	ldr	r1, [r4, #20]
 8008b5c:	b111      	cbz	r1, 8008b64 <_reclaim_reent+0x2c>
 8008b5e:	4620      	mov	r0, r4
 8008b60:	f000 fea6 	bl	80098b0 <_free_r>
 8008b64:	69e1      	ldr	r1, [r4, #28]
 8008b66:	b111      	cbz	r1, 8008b6e <_reclaim_reent+0x36>
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fea1 	bl	80098b0 <_free_r>
 8008b6e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008b70:	b111      	cbz	r1, 8008b78 <_reclaim_reent+0x40>
 8008b72:	4620      	mov	r0, r4
 8008b74:	f000 fe9c 	bl	80098b0 <_free_r>
 8008b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b7a:	b111      	cbz	r1, 8008b82 <_reclaim_reent+0x4a>
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fe97 	bl	80098b0 <_free_r>
 8008b82:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b84:	b111      	cbz	r1, 8008b8c <_reclaim_reent+0x54>
 8008b86:	4620      	mov	r0, r4
 8008b88:	f000 fe92 	bl	80098b0 <_free_r>
 8008b8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b8e:	b111      	cbz	r1, 8008b96 <_reclaim_reent+0x5e>
 8008b90:	4620      	mov	r0, r4
 8008b92:	f000 fe8d 	bl	80098b0 <_free_r>
 8008b96:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008b98:	b111      	cbz	r1, 8008ba0 <_reclaim_reent+0x68>
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	f000 fe88 	bl	80098b0 <_free_r>
 8008ba0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008ba2:	b111      	cbz	r1, 8008baa <_reclaim_reent+0x72>
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 fe83 	bl	80098b0 <_free_r>
 8008baa:	6a23      	ldr	r3, [r4, #32]
 8008bac:	b1b3      	cbz	r3, 8008bdc <_reclaim_reent+0xa4>
 8008bae:	4620      	mov	r0, r4
 8008bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008bb4:	4718      	bx	r3
 8008bb6:	5949      	ldr	r1, [r1, r5]
 8008bb8:	b941      	cbnz	r1, 8008bcc <_reclaim_reent+0x94>
 8008bba:	3504      	adds	r5, #4
 8008bbc:	69e3      	ldr	r3, [r4, #28]
 8008bbe:	2d80      	cmp	r5, #128	; 0x80
 8008bc0:	68d9      	ldr	r1, [r3, #12]
 8008bc2:	d1f8      	bne.n	8008bb6 <_reclaim_reent+0x7e>
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	f000 fe73 	bl	80098b0 <_free_r>
 8008bca:	e7c0      	b.n	8008b4e <_reclaim_reent+0x16>
 8008bcc:	680e      	ldr	r6, [r1, #0]
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f000 fe6e 	bl	80098b0 <_free_r>
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	e7ef      	b.n	8008bb8 <_reclaim_reent+0x80>
 8008bd8:	2500      	movs	r5, #0
 8008bda:	e7ef      	b.n	8008bbc <_reclaim_reent+0x84>
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
 8008bde:	bf00      	nop
 8008be0:	2400006c 	.word	0x2400006c

08008be4 <_lseek_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d07      	ldr	r5, [pc, #28]	; (8008c04 <_lseek_r+0x20>)
 8008be8:	4604      	mov	r4, r0
 8008bea:	4608      	mov	r0, r1
 8008bec:	4611      	mov	r1, r2
 8008bee:	2200      	movs	r2, #0
 8008bf0:	602a      	str	r2, [r5, #0]
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	f7f8 fd13 	bl	800161e <_lseek>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_lseek_r+0x1e>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_lseek_r+0x1e>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	24004464 	.word	0x24004464

08008c08 <_read_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	4d07      	ldr	r5, [pc, #28]	; (8008c28 <_read_r+0x20>)
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	4608      	mov	r0, r1
 8008c10:	4611      	mov	r1, r2
 8008c12:	2200      	movs	r2, #0
 8008c14:	602a      	str	r2, [r5, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	f7f8 fca1 	bl	800155e <_read>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_read_r+0x1e>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_read_r+0x1e>
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	24004464 	.word	0x24004464

08008c2c <_write_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	; (8008c4c <_write_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7f8 fcac 	bl	8001598 <_write>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_write_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_write_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	24004464 	.word	0x24004464

08008c50 <__errno>:
 8008c50:	4b01      	ldr	r3, [pc, #4]	; (8008c58 <__errno+0x8>)
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	2400006c 	.word	0x2400006c

08008c5c <__libc_init_array>:
 8008c5c:	b570      	push	{r4, r5, r6, lr}
 8008c5e:	4d0d      	ldr	r5, [pc, #52]	; (8008c94 <__libc_init_array+0x38>)
 8008c60:	4c0d      	ldr	r4, [pc, #52]	; (8008c98 <__libc_init_array+0x3c>)
 8008c62:	1b64      	subs	r4, r4, r5
 8008c64:	10a4      	asrs	r4, r4, #2
 8008c66:	2600      	movs	r6, #0
 8008c68:	42a6      	cmp	r6, r4
 8008c6a:	d109      	bne.n	8008c80 <__libc_init_array+0x24>
 8008c6c:	4d0b      	ldr	r5, [pc, #44]	; (8008c9c <__libc_init_array+0x40>)
 8008c6e:	4c0c      	ldr	r4, [pc, #48]	; (8008ca0 <__libc_init_array+0x44>)
 8008c70:	f002 f80e 	bl	800ac90 <_init>
 8008c74:	1b64      	subs	r4, r4, r5
 8008c76:	10a4      	asrs	r4, r4, #2
 8008c78:	2600      	movs	r6, #0
 8008c7a:	42a6      	cmp	r6, r4
 8008c7c:	d105      	bne.n	8008c8a <__libc_init_array+0x2e>
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
 8008c80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c84:	4798      	blx	r3
 8008c86:	3601      	adds	r6, #1
 8008c88:	e7ee      	b.n	8008c68 <__libc_init_array+0xc>
 8008c8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c8e:	4798      	blx	r3
 8008c90:	3601      	adds	r6, #1
 8008c92:	e7f2      	b.n	8008c7a <__libc_init_array+0x1e>
 8008c94:	0800b0cc 	.word	0x0800b0cc
 8008c98:	0800b0cc 	.word	0x0800b0cc
 8008c9c:	0800b0cc 	.word	0x0800b0cc
 8008ca0:	0800b0d0 	.word	0x0800b0d0

08008ca4 <__retarget_lock_init_recursive>:
 8008ca4:	4770      	bx	lr

08008ca6 <__retarget_lock_acquire_recursive>:
 8008ca6:	4770      	bx	lr

08008ca8 <__retarget_lock_release_recursive>:
 8008ca8:	4770      	bx	lr

08008caa <memcpy>:
 8008caa:	440a      	add	r2, r1
 8008cac:	4291      	cmp	r1, r2
 8008cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb2:	d100      	bne.n	8008cb6 <memcpy+0xc>
 8008cb4:	4770      	bx	lr
 8008cb6:	b510      	push	{r4, lr}
 8008cb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cc0:	4291      	cmp	r1, r2
 8008cc2:	d1f9      	bne.n	8008cb8 <memcpy+0xe>
 8008cc4:	bd10      	pop	{r4, pc}

08008cc6 <quorem>:
 8008cc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	6903      	ldr	r3, [r0, #16]
 8008ccc:	690c      	ldr	r4, [r1, #16]
 8008cce:	42a3      	cmp	r3, r4
 8008cd0:	4607      	mov	r7, r0
 8008cd2:	db7e      	blt.n	8008dd2 <quorem+0x10c>
 8008cd4:	3c01      	subs	r4, #1
 8008cd6:	f101 0814 	add.w	r8, r1, #20
 8008cda:	f100 0514 	add.w	r5, r0, #20
 8008cde:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ce8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cec:	3301      	adds	r3, #1
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cf8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cfc:	d331      	bcc.n	8008d62 <quorem+0x9c>
 8008cfe:	f04f 0e00 	mov.w	lr, #0
 8008d02:	4640      	mov	r0, r8
 8008d04:	46ac      	mov	ip, r5
 8008d06:	46f2      	mov	sl, lr
 8008d08:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d0c:	b293      	uxth	r3, r2
 8008d0e:	fb06 e303 	mla	r3, r6, r3, lr
 8008d12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d16:	0c1a      	lsrs	r2, r3, #16
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	ebaa 0303 	sub.w	r3, sl, r3
 8008d1e:	f8dc a000 	ldr.w	sl, [ip]
 8008d22:	fa13 f38a 	uxtah	r3, r3, sl
 8008d26:	fb06 220e 	mla	r2, r6, lr, r2
 8008d2a:	9300      	str	r3, [sp, #0]
 8008d2c:	9b00      	ldr	r3, [sp, #0]
 8008d2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d32:	b292      	uxth	r2, r2
 8008d34:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d3c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d40:	4581      	cmp	r9, r0
 8008d42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d46:	f84c 3b04 	str.w	r3, [ip], #4
 8008d4a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d4e:	d2db      	bcs.n	8008d08 <quorem+0x42>
 8008d50:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d54:	b92b      	cbnz	r3, 8008d62 <quorem+0x9c>
 8008d56:	9b01      	ldr	r3, [sp, #4]
 8008d58:	3b04      	subs	r3, #4
 8008d5a:	429d      	cmp	r5, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	d32c      	bcc.n	8008dba <quorem+0xf4>
 8008d60:	613c      	str	r4, [r7, #16]
 8008d62:	4638      	mov	r0, r7
 8008d64:	f001 f920 	bl	8009fa8 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	db22      	blt.n	8008db2 <quorem+0xec>
 8008d6c:	3601      	adds	r6, #1
 8008d6e:	4629      	mov	r1, r5
 8008d70:	2000      	movs	r0, #0
 8008d72:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d76:	f8d1 c000 	ldr.w	ip, [r1]
 8008d7a:	b293      	uxth	r3, r2
 8008d7c:	1ac3      	subs	r3, r0, r3
 8008d7e:	0c12      	lsrs	r2, r2, #16
 8008d80:	fa13 f38c 	uxtah	r3, r3, ip
 8008d84:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008d88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d92:	45c1      	cmp	r9, r8
 8008d94:	f841 3b04 	str.w	r3, [r1], #4
 8008d98:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d9c:	d2e9      	bcs.n	8008d72 <quorem+0xac>
 8008d9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008da6:	b922      	cbnz	r2, 8008db2 <quorem+0xec>
 8008da8:	3b04      	subs	r3, #4
 8008daa:	429d      	cmp	r5, r3
 8008dac:	461a      	mov	r2, r3
 8008dae:	d30a      	bcc.n	8008dc6 <quorem+0x100>
 8008db0:	613c      	str	r4, [r7, #16]
 8008db2:	4630      	mov	r0, r6
 8008db4:	b003      	add	sp, #12
 8008db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dba:	6812      	ldr	r2, [r2, #0]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	d1ce      	bne.n	8008d60 <quorem+0x9a>
 8008dc2:	3c01      	subs	r4, #1
 8008dc4:	e7c9      	b.n	8008d5a <quorem+0x94>
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	3b04      	subs	r3, #4
 8008dca:	2a00      	cmp	r2, #0
 8008dcc:	d1f0      	bne.n	8008db0 <quorem+0xea>
 8008dce:	3c01      	subs	r4, #1
 8008dd0:	e7eb      	b.n	8008daa <quorem+0xe4>
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	e7ee      	b.n	8008db4 <quorem+0xee>
	...

08008dd8 <_dtoa_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b02 	vpush	{d8}
 8008de0:	69c5      	ldr	r5, [r0, #28]
 8008de2:	b091      	sub	sp, #68	; 0x44
 8008de4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008de8:	ec59 8b10 	vmov	r8, r9, d0
 8008dec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008dee:	9106      	str	r1, [sp, #24]
 8008df0:	4606      	mov	r6, r0
 8008df2:	9208      	str	r2, [sp, #32]
 8008df4:	930c      	str	r3, [sp, #48]	; 0x30
 8008df6:	b975      	cbnz	r5, 8008e16 <_dtoa_r+0x3e>
 8008df8:	2010      	movs	r0, #16
 8008dfa:	f000 fda5 	bl	8009948 <malloc>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	61f0      	str	r0, [r6, #28]
 8008e02:	b920      	cbnz	r0, 8008e0e <_dtoa_r+0x36>
 8008e04:	4ba6      	ldr	r3, [pc, #664]	; (80090a0 <_dtoa_r+0x2c8>)
 8008e06:	21ef      	movs	r1, #239	; 0xef
 8008e08:	48a6      	ldr	r0, [pc, #664]	; (80090a4 <_dtoa_r+0x2cc>)
 8008e0a:	f001 fbfd 	bl	800a608 <__assert_func>
 8008e0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e12:	6005      	str	r5, [r0, #0]
 8008e14:	60c5      	str	r5, [r0, #12]
 8008e16:	69f3      	ldr	r3, [r6, #28]
 8008e18:	6819      	ldr	r1, [r3, #0]
 8008e1a:	b151      	cbz	r1, 8008e32 <_dtoa_r+0x5a>
 8008e1c:	685a      	ldr	r2, [r3, #4]
 8008e1e:	604a      	str	r2, [r1, #4]
 8008e20:	2301      	movs	r3, #1
 8008e22:	4093      	lsls	r3, r2
 8008e24:	608b      	str	r3, [r1, #8]
 8008e26:	4630      	mov	r0, r6
 8008e28:	f000 fe82 	bl	8009b30 <_Bfree>
 8008e2c:	69f3      	ldr	r3, [r6, #28]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]
 8008e32:	f1b9 0300 	subs.w	r3, r9, #0
 8008e36:	bfbb      	ittet	lt
 8008e38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e3c:	9303      	strlt	r3, [sp, #12]
 8008e3e:	2300      	movge	r3, #0
 8008e40:	2201      	movlt	r2, #1
 8008e42:	bfac      	ite	ge
 8008e44:	6023      	strge	r3, [r4, #0]
 8008e46:	6022      	strlt	r2, [r4, #0]
 8008e48:	4b97      	ldr	r3, [pc, #604]	; (80090a8 <_dtoa_r+0x2d0>)
 8008e4a:	9c03      	ldr	r4, [sp, #12]
 8008e4c:	43a3      	bics	r3, r4
 8008e4e:	d11c      	bne.n	8008e8a <_dtoa_r+0xb2>
 8008e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e52:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008e5c:	ea53 0308 	orrs.w	r3, r3, r8
 8008e60:	f000 84fb 	beq.w	800985a <_dtoa_r+0xa82>
 8008e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e66:	b963      	cbnz	r3, 8008e82 <_dtoa_r+0xaa>
 8008e68:	4b90      	ldr	r3, [pc, #576]	; (80090ac <_dtoa_r+0x2d4>)
 8008e6a:	e020      	b.n	8008eae <_dtoa_r+0xd6>
 8008e6c:	4b90      	ldr	r3, [pc, #576]	; (80090b0 <_dtoa_r+0x2d8>)
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	3308      	adds	r3, #8
 8008e72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	9801      	ldr	r0, [sp, #4]
 8008e78:	b011      	add	sp, #68	; 0x44
 8008e7a:	ecbd 8b02 	vpop	{d8}
 8008e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e82:	4b8a      	ldr	r3, [pc, #552]	; (80090ac <_dtoa_r+0x2d4>)
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	3303      	adds	r3, #3
 8008e88:	e7f3      	b.n	8008e72 <_dtoa_r+0x9a>
 8008e8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8008e8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	d10c      	bne.n	8008eb2 <_dtoa_r+0xda>
 8008e98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	6013      	str	r3, [r2, #0]
 8008e9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 84d7 	beq.w	8009854 <_dtoa_r+0xa7c>
 8008ea6:	4b83      	ldr	r3, [pc, #524]	; (80090b4 <_dtoa_r+0x2dc>)
 8008ea8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	9301      	str	r3, [sp, #4]
 8008eb0:	e7e1      	b.n	8008e76 <_dtoa_r+0x9e>
 8008eb2:	aa0e      	add	r2, sp, #56	; 0x38
 8008eb4:	a90f      	add	r1, sp, #60	; 0x3c
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	eeb0 0b48 	vmov.f64	d0, d8
 8008ebc:	f001 f91a 	bl	800a0f4 <__d2b>
 8008ec0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8008ec4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d046      	beq.n	8008f5a <_dtoa_r+0x182>
 8008ecc:	eeb0 7b48 	vmov.f64	d7, d8
 8008ed0:	ee18 1a90 	vmov	r1, s17
 8008ed4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008ed8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8008edc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008ee0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	ee07 1a90 	vmov	s15, r1
 8008eea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8008eee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009088 <_dtoa_r+0x2b0>
 8008ef2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008ef6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009090 <_dtoa_r+0x2b8>
 8008efa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008efe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009098 <_dtoa_r+0x2c0>
 8008f02:	ee07 3a90 	vmov	s15, r3
 8008f06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008f0a:	eeb0 7b46 	vmov.f64	d7, d6
 8008f0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008f12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8008f16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1e:	ee16 ba90 	vmov	fp, s13
 8008f22:	9009      	str	r0, [sp, #36]	; 0x24
 8008f24:	d508      	bpl.n	8008f38 <_dtoa_r+0x160>
 8008f26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008f2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8008f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f32:	bf18      	it	ne
 8008f34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008f38:	f1bb 0f16 	cmp.w	fp, #22
 8008f3c:	d82b      	bhi.n	8008f96 <_dtoa_r+0x1be>
 8008f3e:	495e      	ldr	r1, [pc, #376]	; (80090b8 <_dtoa_r+0x2e0>)
 8008f40:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8008f44:	ed91 7b00 	vldr	d7, [r1]
 8008f48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	d501      	bpl.n	8008f56 <_dtoa_r+0x17e>
 8008f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f56:	2100      	movs	r1, #0
 8008f58:	e01e      	b.n	8008f98 <_dtoa_r+0x1c0>
 8008f5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8008f62:	2920      	cmp	r1, #32
 8008f64:	bfc1      	itttt	gt
 8008f66:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8008f6a:	408c      	lslgt	r4, r1
 8008f6c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8008f70:	fa28 f101 	lsrgt.w	r1, r8, r1
 8008f74:	bfd6      	itet	le
 8008f76:	f1c1 0120 	rsble	r1, r1, #32
 8008f7a:	4321      	orrgt	r1, r4
 8008f7c:	fa08 f101 	lslle.w	r1, r8, r1
 8008f80:	ee07 1a90 	vmov	s15, r1
 8008f84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	ee17 1a90 	vmov	r1, s15
 8008f8e:	2001      	movs	r0, #1
 8008f90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008f94:	e7a7      	b.n	8008ee6 <_dtoa_r+0x10e>
 8008f96:	2101      	movs	r1, #1
 8008f98:	1ad2      	subs	r2, r2, r3
 8008f9a:	1e53      	subs	r3, r2, #1
 8008f9c:	9305      	str	r3, [sp, #20]
 8008f9e:	bf45      	ittet	mi
 8008fa0:	f1c2 0301 	rsbmi	r3, r2, #1
 8008fa4:	9304      	strmi	r3, [sp, #16]
 8008fa6:	2300      	movpl	r3, #0
 8008fa8:	2300      	movmi	r3, #0
 8008faa:	bf4c      	ite	mi
 8008fac:	9305      	strmi	r3, [sp, #20]
 8008fae:	9304      	strpl	r3, [sp, #16]
 8008fb0:	f1bb 0f00 	cmp.w	fp, #0
 8008fb4:	910b      	str	r1, [sp, #44]	; 0x2c
 8008fb6:	db18      	blt.n	8008fea <_dtoa_r+0x212>
 8008fb8:	9b05      	ldr	r3, [sp, #20]
 8008fba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8008fbe:	445b      	add	r3, fp
 8008fc0:	9305      	str	r3, [sp, #20]
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9a06      	ldr	r2, [sp, #24]
 8008fc6:	2a09      	cmp	r2, #9
 8008fc8:	d848      	bhi.n	800905c <_dtoa_r+0x284>
 8008fca:	2a05      	cmp	r2, #5
 8008fcc:	bfc4      	itt	gt
 8008fce:	3a04      	subgt	r2, #4
 8008fd0:	9206      	strgt	r2, [sp, #24]
 8008fd2:	9a06      	ldr	r2, [sp, #24]
 8008fd4:	f1a2 0202 	sub.w	r2, r2, #2
 8008fd8:	bfcc      	ite	gt
 8008fda:	2400      	movgt	r4, #0
 8008fdc:	2401      	movle	r4, #1
 8008fde:	2a03      	cmp	r2, #3
 8008fe0:	d847      	bhi.n	8009072 <_dtoa_r+0x29a>
 8008fe2:	e8df f002 	tbb	[pc, r2]
 8008fe6:	2d0b      	.short	0x2d0b
 8008fe8:	392b      	.short	0x392b
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	2200      	movs	r2, #0
 8008fee:	eba3 030b 	sub.w	r3, r3, fp
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	920a      	str	r2, [sp, #40]	; 0x28
 8008ff6:	f1cb 0300 	rsb	r3, fp, #0
 8008ffa:	e7e3      	b.n	8008fc4 <_dtoa_r+0x1ec>
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	9207      	str	r2, [sp, #28]
 8009000:	9a08      	ldr	r2, [sp, #32]
 8009002:	2a00      	cmp	r2, #0
 8009004:	dc38      	bgt.n	8009078 <_dtoa_r+0x2a0>
 8009006:	f04f 0a01 	mov.w	sl, #1
 800900a:	46d1      	mov	r9, sl
 800900c:	4652      	mov	r2, sl
 800900e:	f8cd a020 	str.w	sl, [sp, #32]
 8009012:	69f7      	ldr	r7, [r6, #28]
 8009014:	2100      	movs	r1, #0
 8009016:	2004      	movs	r0, #4
 8009018:	f100 0c14 	add.w	ip, r0, #20
 800901c:	4594      	cmp	ip, r2
 800901e:	d930      	bls.n	8009082 <_dtoa_r+0x2aa>
 8009020:	6079      	str	r1, [r7, #4]
 8009022:	4630      	mov	r0, r6
 8009024:	930d      	str	r3, [sp, #52]	; 0x34
 8009026:	f000 fd43 	bl	8009ab0 <_Balloc>
 800902a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800902c:	9001      	str	r0, [sp, #4]
 800902e:	4602      	mov	r2, r0
 8009030:	2800      	cmp	r0, #0
 8009032:	d145      	bne.n	80090c0 <_dtoa_r+0x2e8>
 8009034:	4b21      	ldr	r3, [pc, #132]	; (80090bc <_dtoa_r+0x2e4>)
 8009036:	f240 11af 	movw	r1, #431	; 0x1af
 800903a:	e6e5      	b.n	8008e08 <_dtoa_r+0x30>
 800903c:	2201      	movs	r2, #1
 800903e:	e7de      	b.n	8008ffe <_dtoa_r+0x226>
 8009040:	2200      	movs	r2, #0
 8009042:	9207      	str	r2, [sp, #28]
 8009044:	9a08      	ldr	r2, [sp, #32]
 8009046:	eb0b 0a02 	add.w	sl, fp, r2
 800904a:	f10a 0901 	add.w	r9, sl, #1
 800904e:	464a      	mov	r2, r9
 8009050:	2a01      	cmp	r2, #1
 8009052:	bfb8      	it	lt
 8009054:	2201      	movlt	r2, #1
 8009056:	e7dc      	b.n	8009012 <_dtoa_r+0x23a>
 8009058:	2201      	movs	r2, #1
 800905a:	e7f2      	b.n	8009042 <_dtoa_r+0x26a>
 800905c:	2401      	movs	r4, #1
 800905e:	2200      	movs	r2, #0
 8009060:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009064:	f04f 3aff 	mov.w	sl, #4294967295
 8009068:	2100      	movs	r1, #0
 800906a:	46d1      	mov	r9, sl
 800906c:	2212      	movs	r2, #18
 800906e:	9108      	str	r1, [sp, #32]
 8009070:	e7cf      	b.n	8009012 <_dtoa_r+0x23a>
 8009072:	2201      	movs	r2, #1
 8009074:	9207      	str	r2, [sp, #28]
 8009076:	e7f5      	b.n	8009064 <_dtoa_r+0x28c>
 8009078:	f8dd a020 	ldr.w	sl, [sp, #32]
 800907c:	46d1      	mov	r9, sl
 800907e:	4652      	mov	r2, sl
 8009080:	e7c7      	b.n	8009012 <_dtoa_r+0x23a>
 8009082:	3101      	adds	r1, #1
 8009084:	0040      	lsls	r0, r0, #1
 8009086:	e7c7      	b.n	8009018 <_dtoa_r+0x240>
 8009088:	636f4361 	.word	0x636f4361
 800908c:	3fd287a7 	.word	0x3fd287a7
 8009090:	8b60c8b3 	.word	0x8b60c8b3
 8009094:	3fc68a28 	.word	0x3fc68a28
 8009098:	509f79fb 	.word	0x509f79fb
 800909c:	3fd34413 	.word	0x3fd34413
 80090a0:	0800ad91 	.word	0x0800ad91
 80090a4:	0800ada8 	.word	0x0800ada8
 80090a8:	7ff00000 	.word	0x7ff00000
 80090ac:	0800ad8d 	.word	0x0800ad8d
 80090b0:	0800ad84 	.word	0x0800ad84
 80090b4:	0800ad61 	.word	0x0800ad61
 80090b8:	0800ae98 	.word	0x0800ae98
 80090bc:	0800ae00 	.word	0x0800ae00
 80090c0:	69f2      	ldr	r2, [r6, #28]
 80090c2:	9901      	ldr	r1, [sp, #4]
 80090c4:	6011      	str	r1, [r2, #0]
 80090c6:	f1b9 0f0e 	cmp.w	r9, #14
 80090ca:	d86c      	bhi.n	80091a6 <_dtoa_r+0x3ce>
 80090cc:	2c00      	cmp	r4, #0
 80090ce:	d06a      	beq.n	80091a6 <_dtoa_r+0x3ce>
 80090d0:	f1bb 0f00 	cmp.w	fp, #0
 80090d4:	f340 80a0 	ble.w	8009218 <_dtoa_r+0x440>
 80090d8:	4ac1      	ldr	r2, [pc, #772]	; (80093e0 <_dtoa_r+0x608>)
 80090da:	f00b 010f 	and.w	r1, fp, #15
 80090de:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80090e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80090e6:	ed92 7b00 	vldr	d7, [r2]
 80090ea:	ea4f 122b 	mov.w	r2, fp, asr #4
 80090ee:	f000 8087 	beq.w	8009200 <_dtoa_r+0x428>
 80090f2:	49bc      	ldr	r1, [pc, #752]	; (80093e4 <_dtoa_r+0x60c>)
 80090f4:	ed91 6b08 	vldr	d6, [r1, #32]
 80090f8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80090fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009100:	f002 020f 	and.w	r2, r2, #15
 8009104:	2103      	movs	r1, #3
 8009106:	48b7      	ldr	r0, [pc, #732]	; (80093e4 <_dtoa_r+0x60c>)
 8009108:	2a00      	cmp	r2, #0
 800910a:	d17b      	bne.n	8009204 <_dtoa_r+0x42c>
 800910c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009110:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009114:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009118:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800911a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800911e:	2a00      	cmp	r2, #0
 8009120:	f000 80a0 	beq.w	8009264 <_dtoa_r+0x48c>
 8009124:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009128:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800912c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009130:	f140 8098 	bpl.w	8009264 <_dtoa_r+0x48c>
 8009134:	f1b9 0f00 	cmp.w	r9, #0
 8009138:	f000 8094 	beq.w	8009264 <_dtoa_r+0x48c>
 800913c:	f1ba 0f00 	cmp.w	sl, #0
 8009140:	dd2f      	ble.n	80091a2 <_dtoa_r+0x3ca>
 8009142:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009146:	ee27 7b06 	vmul.f64	d7, d7, d6
 800914a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800914e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009152:	3101      	adds	r1, #1
 8009154:	4654      	mov	r4, sl
 8009156:	ed9d 6b02 	vldr	d6, [sp, #8]
 800915a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800915e:	ee07 1a90 	vmov	s15, r1
 8009162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009166:	eea7 5b06 	vfma.f64	d5, d7, d6
 800916a:	ee15 7a90 	vmov	r7, s11
 800916e:	ec51 0b15 	vmov	r0, r1, d5
 8009172:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009176:	2c00      	cmp	r4, #0
 8009178:	d177      	bne.n	800926a <_dtoa_r+0x492>
 800917a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800917e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009182:	ec41 0b17 	vmov	d7, r0, r1
 8009186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800918a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800918e:	f300 826a 	bgt.w	8009666 <_dtoa_r+0x88e>
 8009192:	eeb1 7b47 	vneg.f64	d7, d7
 8009196:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800919a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800919e:	f100 8260 	bmi.w	8009662 <_dtoa_r+0x88a>
 80091a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80091a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80091a8:	2a00      	cmp	r2, #0
 80091aa:	f2c0 811d 	blt.w	80093e8 <_dtoa_r+0x610>
 80091ae:	f1bb 0f0e 	cmp.w	fp, #14
 80091b2:	f300 8119 	bgt.w	80093e8 <_dtoa_r+0x610>
 80091b6:	4b8a      	ldr	r3, [pc, #552]	; (80093e0 <_dtoa_r+0x608>)
 80091b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091bc:	ed93 6b00 	vldr	d6, [r3]
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f280 80b7 	bge.w	8009336 <_dtoa_r+0x55e>
 80091c8:	f1b9 0f00 	cmp.w	r9, #0
 80091cc:	f300 80b3 	bgt.w	8009336 <_dtoa_r+0x55e>
 80091d0:	f040 8246 	bne.w	8009660 <_dtoa_r+0x888>
 80091d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80091d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80091dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80091e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e8:	464c      	mov	r4, r9
 80091ea:	464f      	mov	r7, r9
 80091ec:	f280 821c 	bge.w	8009628 <_dtoa_r+0x850>
 80091f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091f4:	2331      	movs	r3, #49	; 0x31
 80091f6:	f808 3b01 	strb.w	r3, [r8], #1
 80091fa:	f10b 0b01 	add.w	fp, fp, #1
 80091fe:	e218      	b.n	8009632 <_dtoa_r+0x85a>
 8009200:	2102      	movs	r1, #2
 8009202:	e780      	b.n	8009106 <_dtoa_r+0x32e>
 8009204:	07d4      	lsls	r4, r2, #31
 8009206:	d504      	bpl.n	8009212 <_dtoa_r+0x43a>
 8009208:	ed90 6b00 	vldr	d6, [r0]
 800920c:	3101      	adds	r1, #1
 800920e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009212:	1052      	asrs	r2, r2, #1
 8009214:	3008      	adds	r0, #8
 8009216:	e777      	b.n	8009108 <_dtoa_r+0x330>
 8009218:	d022      	beq.n	8009260 <_dtoa_r+0x488>
 800921a:	f1cb 0200 	rsb	r2, fp, #0
 800921e:	4970      	ldr	r1, [pc, #448]	; (80093e0 <_dtoa_r+0x608>)
 8009220:	f002 000f 	and.w	r0, r2, #15
 8009224:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009228:	ed91 7b00 	vldr	d7, [r1]
 800922c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009234:	486b      	ldr	r0, [pc, #428]	; (80093e4 <_dtoa_r+0x60c>)
 8009236:	1112      	asrs	r2, r2, #4
 8009238:	2400      	movs	r4, #0
 800923a:	2102      	movs	r1, #2
 800923c:	b92a      	cbnz	r2, 800924a <_dtoa_r+0x472>
 800923e:	2c00      	cmp	r4, #0
 8009240:	f43f af6a 	beq.w	8009118 <_dtoa_r+0x340>
 8009244:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009248:	e766      	b.n	8009118 <_dtoa_r+0x340>
 800924a:	07d7      	lsls	r7, r2, #31
 800924c:	d505      	bpl.n	800925a <_dtoa_r+0x482>
 800924e:	ed90 6b00 	vldr	d6, [r0]
 8009252:	3101      	adds	r1, #1
 8009254:	2401      	movs	r4, #1
 8009256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800925a:	1052      	asrs	r2, r2, #1
 800925c:	3008      	adds	r0, #8
 800925e:	e7ed      	b.n	800923c <_dtoa_r+0x464>
 8009260:	2102      	movs	r1, #2
 8009262:	e759      	b.n	8009118 <_dtoa_r+0x340>
 8009264:	465a      	mov	r2, fp
 8009266:	464c      	mov	r4, r9
 8009268:	e775      	b.n	8009156 <_dtoa_r+0x37e>
 800926a:	ec41 0b17 	vmov	d7, r0, r1
 800926e:	495c      	ldr	r1, [pc, #368]	; (80093e0 <_dtoa_r+0x608>)
 8009270:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009274:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009278:	9901      	ldr	r1, [sp, #4]
 800927a:	440c      	add	r4, r1
 800927c:	9907      	ldr	r1, [sp, #28]
 800927e:	b351      	cbz	r1, 80092d6 <_dtoa_r+0x4fe>
 8009280:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009284:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009288:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800928c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009290:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009294:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009298:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800929c:	ee14 1a90 	vmov	r1, s9
 80092a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80092a4:	3130      	adds	r1, #48	; 0x30
 80092a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80092aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80092ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b2:	f808 1b01 	strb.w	r1, [r8], #1
 80092b6:	d439      	bmi.n	800932c <_dtoa_r+0x554>
 80092b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80092bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80092c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c4:	d472      	bmi.n	80093ac <_dtoa_r+0x5d4>
 80092c6:	45a0      	cmp	r8, r4
 80092c8:	f43f af6b 	beq.w	80091a2 <_dtoa_r+0x3ca>
 80092cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80092d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80092d4:	e7e0      	b.n	8009298 <_dtoa_r+0x4c0>
 80092d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80092de:	4620      	mov	r0, r4
 80092e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80092e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80092e8:	ee14 1a90 	vmov	r1, s9
 80092ec:	3130      	adds	r1, #48	; 0x30
 80092ee:	f808 1b01 	strb.w	r1, [r8], #1
 80092f2:	45a0      	cmp	r8, r4
 80092f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80092f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80092fc:	d118      	bne.n	8009330 <_dtoa_r+0x558>
 80092fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009302:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009306:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800930a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800930e:	dc4d      	bgt.n	80093ac <_dtoa_r+0x5d4>
 8009310:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009314:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800931c:	f57f af41 	bpl.w	80091a2 <_dtoa_r+0x3ca>
 8009320:	4680      	mov	r8, r0
 8009322:	3801      	subs	r0, #1
 8009324:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009328:	2b30      	cmp	r3, #48	; 0x30
 800932a:	d0f9      	beq.n	8009320 <_dtoa_r+0x548>
 800932c:	4693      	mov	fp, r2
 800932e:	e02a      	b.n	8009386 <_dtoa_r+0x5ae>
 8009330:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009334:	e7d6      	b.n	80092e4 <_dtoa_r+0x50c>
 8009336:	ed9d 7b02 	vldr	d7, [sp, #8]
 800933a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800933e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009342:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009346:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800934a:	ee15 3a10 	vmov	r3, s10
 800934e:	3330      	adds	r3, #48	; 0x30
 8009350:	f808 3b01 	strb.w	r3, [r8], #1
 8009354:	9b01      	ldr	r3, [sp, #4]
 8009356:	eba8 0303 	sub.w	r3, r8, r3
 800935a:	4599      	cmp	r9, r3
 800935c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009360:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009364:	d133      	bne.n	80093ce <_dtoa_r+0x5f6>
 8009366:	ee37 7b07 	vadd.f64	d7, d7, d7
 800936a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800936e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009372:	dc1a      	bgt.n	80093aa <_dtoa_r+0x5d2>
 8009374:	eeb4 7b46 	vcmp.f64	d7, d6
 8009378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800937c:	d103      	bne.n	8009386 <_dtoa_r+0x5ae>
 800937e:	ee15 3a10 	vmov	r3, s10
 8009382:	07d9      	lsls	r1, r3, #31
 8009384:	d411      	bmi.n	80093aa <_dtoa_r+0x5d2>
 8009386:	4629      	mov	r1, r5
 8009388:	4630      	mov	r0, r6
 800938a:	f000 fbd1 	bl	8009b30 <_Bfree>
 800938e:	2300      	movs	r3, #0
 8009390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009392:	f888 3000 	strb.w	r3, [r8]
 8009396:	f10b 0301 	add.w	r3, fp, #1
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f43f ad69 	beq.w	8008e76 <_dtoa_r+0x9e>
 80093a4:	f8c3 8000 	str.w	r8, [r3]
 80093a8:	e565      	b.n	8008e76 <_dtoa_r+0x9e>
 80093aa:	465a      	mov	r2, fp
 80093ac:	4643      	mov	r3, r8
 80093ae:	4698      	mov	r8, r3
 80093b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80093b4:	2939      	cmp	r1, #57	; 0x39
 80093b6:	d106      	bne.n	80093c6 <_dtoa_r+0x5ee>
 80093b8:	9901      	ldr	r1, [sp, #4]
 80093ba:	4299      	cmp	r1, r3
 80093bc:	d1f7      	bne.n	80093ae <_dtoa_r+0x5d6>
 80093be:	9801      	ldr	r0, [sp, #4]
 80093c0:	2130      	movs	r1, #48	; 0x30
 80093c2:	3201      	adds	r2, #1
 80093c4:	7001      	strb	r1, [r0, #0]
 80093c6:	7819      	ldrb	r1, [r3, #0]
 80093c8:	3101      	adds	r1, #1
 80093ca:	7019      	strb	r1, [r3, #0]
 80093cc:	e7ae      	b.n	800932c <_dtoa_r+0x554>
 80093ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80093d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093da:	d1b2      	bne.n	8009342 <_dtoa_r+0x56a>
 80093dc:	e7d3      	b.n	8009386 <_dtoa_r+0x5ae>
 80093de:	bf00      	nop
 80093e0:	0800ae98 	.word	0x0800ae98
 80093e4:	0800ae70 	.word	0x0800ae70
 80093e8:	9907      	ldr	r1, [sp, #28]
 80093ea:	2900      	cmp	r1, #0
 80093ec:	f000 80d0 	beq.w	8009590 <_dtoa_r+0x7b8>
 80093f0:	9906      	ldr	r1, [sp, #24]
 80093f2:	2901      	cmp	r1, #1
 80093f4:	f300 80b4 	bgt.w	8009560 <_dtoa_r+0x788>
 80093f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093fa:	2900      	cmp	r1, #0
 80093fc:	f000 80ac 	beq.w	8009558 <_dtoa_r+0x780>
 8009400:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009404:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009408:	461c      	mov	r4, r3
 800940a:	9309      	str	r3, [sp, #36]	; 0x24
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	4413      	add	r3, r2
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	9b05      	ldr	r3, [sp, #20]
 8009414:	2101      	movs	r1, #1
 8009416:	4413      	add	r3, r2
 8009418:	4630      	mov	r0, r6
 800941a:	9305      	str	r3, [sp, #20]
 800941c:	f000 fc3e 	bl	8009c9c <__i2b>
 8009420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009422:	4607      	mov	r7, r0
 8009424:	f1b8 0f00 	cmp.w	r8, #0
 8009428:	d00d      	beq.n	8009446 <_dtoa_r+0x66e>
 800942a:	9a05      	ldr	r2, [sp, #20]
 800942c:	2a00      	cmp	r2, #0
 800942e:	dd0a      	ble.n	8009446 <_dtoa_r+0x66e>
 8009430:	4542      	cmp	r2, r8
 8009432:	9904      	ldr	r1, [sp, #16]
 8009434:	bfa8      	it	ge
 8009436:	4642      	movge	r2, r8
 8009438:	1a89      	subs	r1, r1, r2
 800943a:	9104      	str	r1, [sp, #16]
 800943c:	9905      	ldr	r1, [sp, #20]
 800943e:	eba8 0802 	sub.w	r8, r8, r2
 8009442:	1a8a      	subs	r2, r1, r2
 8009444:	9205      	str	r2, [sp, #20]
 8009446:	b303      	cbz	r3, 800948a <_dtoa_r+0x6b2>
 8009448:	9a07      	ldr	r2, [sp, #28]
 800944a:	2a00      	cmp	r2, #0
 800944c:	f000 80a5 	beq.w	800959a <_dtoa_r+0x7c2>
 8009450:	2c00      	cmp	r4, #0
 8009452:	dd13      	ble.n	800947c <_dtoa_r+0x6a4>
 8009454:	4639      	mov	r1, r7
 8009456:	4622      	mov	r2, r4
 8009458:	4630      	mov	r0, r6
 800945a:	930d      	str	r3, [sp, #52]	; 0x34
 800945c:	f000 fcde 	bl	8009e1c <__pow5mult>
 8009460:	462a      	mov	r2, r5
 8009462:	4601      	mov	r1, r0
 8009464:	4607      	mov	r7, r0
 8009466:	4630      	mov	r0, r6
 8009468:	f000 fc2e 	bl	8009cc8 <__multiply>
 800946c:	4629      	mov	r1, r5
 800946e:	9009      	str	r0, [sp, #36]	; 0x24
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fb5d 	bl	8009b30 <_Bfree>
 8009476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009478:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800947a:	4615      	mov	r5, r2
 800947c:	1b1a      	subs	r2, r3, r4
 800947e:	d004      	beq.n	800948a <_dtoa_r+0x6b2>
 8009480:	4629      	mov	r1, r5
 8009482:	4630      	mov	r0, r6
 8009484:	f000 fcca 	bl	8009e1c <__pow5mult>
 8009488:	4605      	mov	r5, r0
 800948a:	2101      	movs	r1, #1
 800948c:	4630      	mov	r0, r6
 800948e:	f000 fc05 	bl	8009c9c <__i2b>
 8009492:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009494:	2b00      	cmp	r3, #0
 8009496:	4604      	mov	r4, r0
 8009498:	f340 8081 	ble.w	800959e <_dtoa_r+0x7c6>
 800949c:	461a      	mov	r2, r3
 800949e:	4601      	mov	r1, r0
 80094a0:	4630      	mov	r0, r6
 80094a2:	f000 fcbb 	bl	8009e1c <__pow5mult>
 80094a6:	9b06      	ldr	r3, [sp, #24]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	4604      	mov	r4, r0
 80094ac:	dd7a      	ble.n	80095a4 <_dtoa_r+0x7cc>
 80094ae:	2300      	movs	r3, #0
 80094b0:	9309      	str	r3, [sp, #36]	; 0x24
 80094b2:	6922      	ldr	r2, [r4, #16]
 80094b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80094b8:	6910      	ldr	r0, [r2, #16]
 80094ba:	f000 fba1 	bl	8009c00 <__hi0bits>
 80094be:	f1c0 0020 	rsb	r0, r0, #32
 80094c2:	9b05      	ldr	r3, [sp, #20]
 80094c4:	4418      	add	r0, r3
 80094c6:	f010 001f 	ands.w	r0, r0, #31
 80094ca:	f000 8093 	beq.w	80095f4 <_dtoa_r+0x81c>
 80094ce:	f1c0 0220 	rsb	r2, r0, #32
 80094d2:	2a04      	cmp	r2, #4
 80094d4:	f340 8085 	ble.w	80095e2 <_dtoa_r+0x80a>
 80094d8:	9b04      	ldr	r3, [sp, #16]
 80094da:	f1c0 001c 	rsb	r0, r0, #28
 80094de:	4403      	add	r3, r0
 80094e0:	9304      	str	r3, [sp, #16]
 80094e2:	9b05      	ldr	r3, [sp, #20]
 80094e4:	4480      	add	r8, r0
 80094e6:	4403      	add	r3, r0
 80094e8:	9305      	str	r3, [sp, #20]
 80094ea:	9b04      	ldr	r3, [sp, #16]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd05      	ble.n	80094fc <_dtoa_r+0x724>
 80094f0:	4629      	mov	r1, r5
 80094f2:	461a      	mov	r2, r3
 80094f4:	4630      	mov	r0, r6
 80094f6:	f000 fceb 	bl	8009ed0 <__lshift>
 80094fa:	4605      	mov	r5, r0
 80094fc:	9b05      	ldr	r3, [sp, #20]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dd05      	ble.n	800950e <_dtoa_r+0x736>
 8009502:	4621      	mov	r1, r4
 8009504:	461a      	mov	r2, r3
 8009506:	4630      	mov	r0, r6
 8009508:	f000 fce2 	bl	8009ed0 <__lshift>
 800950c:	4604      	mov	r4, r0
 800950e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009510:	2b00      	cmp	r3, #0
 8009512:	d071      	beq.n	80095f8 <_dtoa_r+0x820>
 8009514:	4621      	mov	r1, r4
 8009516:	4628      	mov	r0, r5
 8009518:	f000 fd46 	bl	8009fa8 <__mcmp>
 800951c:	2800      	cmp	r0, #0
 800951e:	da6b      	bge.n	80095f8 <_dtoa_r+0x820>
 8009520:	2300      	movs	r3, #0
 8009522:	4629      	mov	r1, r5
 8009524:	220a      	movs	r2, #10
 8009526:	4630      	mov	r0, r6
 8009528:	f000 fb24 	bl	8009b74 <__multadd>
 800952c:	9b07      	ldr	r3, [sp, #28]
 800952e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009532:	4605      	mov	r5, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	f000 8197 	beq.w	8009868 <_dtoa_r+0xa90>
 800953a:	4639      	mov	r1, r7
 800953c:	2300      	movs	r3, #0
 800953e:	220a      	movs	r2, #10
 8009540:	4630      	mov	r0, r6
 8009542:	f000 fb17 	bl	8009b74 <__multadd>
 8009546:	f1ba 0f00 	cmp.w	sl, #0
 800954a:	4607      	mov	r7, r0
 800954c:	f300 8093 	bgt.w	8009676 <_dtoa_r+0x89e>
 8009550:	9b06      	ldr	r3, [sp, #24]
 8009552:	2b02      	cmp	r3, #2
 8009554:	dc57      	bgt.n	8009606 <_dtoa_r+0x82e>
 8009556:	e08e      	b.n	8009676 <_dtoa_r+0x89e>
 8009558:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800955a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800955e:	e751      	b.n	8009404 <_dtoa_r+0x62c>
 8009560:	f109 34ff 	add.w	r4, r9, #4294967295
 8009564:	42a3      	cmp	r3, r4
 8009566:	bfbf      	itttt	lt
 8009568:	1ae2      	sublt	r2, r4, r3
 800956a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800956c:	189b      	addlt	r3, r3, r2
 800956e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009570:	bfae      	itee	ge
 8009572:	1b1c      	subge	r4, r3, r4
 8009574:	4623      	movlt	r3, r4
 8009576:	2400      	movlt	r4, #0
 8009578:	f1b9 0f00 	cmp.w	r9, #0
 800957c:	bfb5      	itete	lt
 800957e:	9a04      	ldrlt	r2, [sp, #16]
 8009580:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8009584:	eba2 0809 	sublt.w	r8, r2, r9
 8009588:	464a      	movge	r2, r9
 800958a:	bfb8      	it	lt
 800958c:	2200      	movlt	r2, #0
 800958e:	e73c      	b.n	800940a <_dtoa_r+0x632>
 8009590:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009594:	9f07      	ldr	r7, [sp, #28]
 8009596:	461c      	mov	r4, r3
 8009598:	e744      	b.n	8009424 <_dtoa_r+0x64c>
 800959a:	461a      	mov	r2, r3
 800959c:	e770      	b.n	8009480 <_dtoa_r+0x6a8>
 800959e:	9b06      	ldr	r3, [sp, #24]
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	dc18      	bgt.n	80095d6 <_dtoa_r+0x7fe>
 80095a4:	9b02      	ldr	r3, [sp, #8]
 80095a6:	b9b3      	cbnz	r3, 80095d6 <_dtoa_r+0x7fe>
 80095a8:	9b03      	ldr	r3, [sp, #12]
 80095aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80095ae:	b9a2      	cbnz	r2, 80095da <_dtoa_r+0x802>
 80095b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80095b4:	0d12      	lsrs	r2, r2, #20
 80095b6:	0512      	lsls	r2, r2, #20
 80095b8:	b18a      	cbz	r2, 80095de <_dtoa_r+0x806>
 80095ba:	9b04      	ldr	r3, [sp, #16]
 80095bc:	3301      	adds	r3, #1
 80095be:	9304      	str	r3, [sp, #16]
 80095c0:	9b05      	ldr	r3, [sp, #20]
 80095c2:	3301      	adds	r3, #1
 80095c4:	9305      	str	r3, [sp, #20]
 80095c6:	2301      	movs	r3, #1
 80095c8:	9309      	str	r3, [sp, #36]	; 0x24
 80095ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	f47f af70 	bne.w	80094b2 <_dtoa_r+0x6da>
 80095d2:	2001      	movs	r0, #1
 80095d4:	e775      	b.n	80094c2 <_dtoa_r+0x6ea>
 80095d6:	2300      	movs	r3, #0
 80095d8:	e7f6      	b.n	80095c8 <_dtoa_r+0x7f0>
 80095da:	9b02      	ldr	r3, [sp, #8]
 80095dc:	e7f4      	b.n	80095c8 <_dtoa_r+0x7f0>
 80095de:	9209      	str	r2, [sp, #36]	; 0x24
 80095e0:	e7f3      	b.n	80095ca <_dtoa_r+0x7f2>
 80095e2:	d082      	beq.n	80094ea <_dtoa_r+0x712>
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	321c      	adds	r2, #28
 80095e8:	4413      	add	r3, r2
 80095ea:	9304      	str	r3, [sp, #16]
 80095ec:	9b05      	ldr	r3, [sp, #20]
 80095ee:	4490      	add	r8, r2
 80095f0:	4413      	add	r3, r2
 80095f2:	e779      	b.n	80094e8 <_dtoa_r+0x710>
 80095f4:	4602      	mov	r2, r0
 80095f6:	e7f5      	b.n	80095e4 <_dtoa_r+0x80c>
 80095f8:	f1b9 0f00 	cmp.w	r9, #0
 80095fc:	dc36      	bgt.n	800966c <_dtoa_r+0x894>
 80095fe:	9b06      	ldr	r3, [sp, #24]
 8009600:	2b02      	cmp	r3, #2
 8009602:	dd33      	ble.n	800966c <_dtoa_r+0x894>
 8009604:	46ca      	mov	sl, r9
 8009606:	f1ba 0f00 	cmp.w	sl, #0
 800960a:	d10d      	bne.n	8009628 <_dtoa_r+0x850>
 800960c:	4621      	mov	r1, r4
 800960e:	4653      	mov	r3, sl
 8009610:	2205      	movs	r2, #5
 8009612:	4630      	mov	r0, r6
 8009614:	f000 faae 	bl	8009b74 <__multadd>
 8009618:	4601      	mov	r1, r0
 800961a:	4604      	mov	r4, r0
 800961c:	4628      	mov	r0, r5
 800961e:	f000 fcc3 	bl	8009fa8 <__mcmp>
 8009622:	2800      	cmp	r0, #0
 8009624:	f73f ade4 	bgt.w	80091f0 <_dtoa_r+0x418>
 8009628:	9b08      	ldr	r3, [sp, #32]
 800962a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800962e:	ea6f 0b03 	mvn.w	fp, r3
 8009632:	f04f 0900 	mov.w	r9, #0
 8009636:	4621      	mov	r1, r4
 8009638:	4630      	mov	r0, r6
 800963a:	f000 fa79 	bl	8009b30 <_Bfree>
 800963e:	2f00      	cmp	r7, #0
 8009640:	f43f aea1 	beq.w	8009386 <_dtoa_r+0x5ae>
 8009644:	f1b9 0f00 	cmp.w	r9, #0
 8009648:	d005      	beq.n	8009656 <_dtoa_r+0x87e>
 800964a:	45b9      	cmp	r9, r7
 800964c:	d003      	beq.n	8009656 <_dtoa_r+0x87e>
 800964e:	4649      	mov	r1, r9
 8009650:	4630      	mov	r0, r6
 8009652:	f000 fa6d 	bl	8009b30 <_Bfree>
 8009656:	4639      	mov	r1, r7
 8009658:	4630      	mov	r0, r6
 800965a:	f000 fa69 	bl	8009b30 <_Bfree>
 800965e:	e692      	b.n	8009386 <_dtoa_r+0x5ae>
 8009660:	2400      	movs	r4, #0
 8009662:	4627      	mov	r7, r4
 8009664:	e7e0      	b.n	8009628 <_dtoa_r+0x850>
 8009666:	4693      	mov	fp, r2
 8009668:	4627      	mov	r7, r4
 800966a:	e5c1      	b.n	80091f0 <_dtoa_r+0x418>
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	46ca      	mov	sl, r9
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 8100 	beq.w	8009876 <_dtoa_r+0xa9e>
 8009676:	f1b8 0f00 	cmp.w	r8, #0
 800967a:	dd05      	ble.n	8009688 <_dtoa_r+0x8b0>
 800967c:	4639      	mov	r1, r7
 800967e:	4642      	mov	r2, r8
 8009680:	4630      	mov	r0, r6
 8009682:	f000 fc25 	bl	8009ed0 <__lshift>
 8009686:	4607      	mov	r7, r0
 8009688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800968a:	2b00      	cmp	r3, #0
 800968c:	d05d      	beq.n	800974a <_dtoa_r+0x972>
 800968e:	6879      	ldr	r1, [r7, #4]
 8009690:	4630      	mov	r0, r6
 8009692:	f000 fa0d 	bl	8009ab0 <_Balloc>
 8009696:	4680      	mov	r8, r0
 8009698:	b928      	cbnz	r0, 80096a6 <_dtoa_r+0x8ce>
 800969a:	4b82      	ldr	r3, [pc, #520]	; (80098a4 <_dtoa_r+0xacc>)
 800969c:	4602      	mov	r2, r0
 800969e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80096a2:	f7ff bbb1 	b.w	8008e08 <_dtoa_r+0x30>
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	3202      	adds	r2, #2
 80096aa:	0092      	lsls	r2, r2, #2
 80096ac:	f107 010c 	add.w	r1, r7, #12
 80096b0:	300c      	adds	r0, #12
 80096b2:	f7ff fafa 	bl	8008caa <memcpy>
 80096b6:	2201      	movs	r2, #1
 80096b8:	4641      	mov	r1, r8
 80096ba:	4630      	mov	r0, r6
 80096bc:	f000 fc08 	bl	8009ed0 <__lshift>
 80096c0:	9b01      	ldr	r3, [sp, #4]
 80096c2:	3301      	adds	r3, #1
 80096c4:	9304      	str	r3, [sp, #16]
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	4453      	add	r3, sl
 80096ca:	9308      	str	r3, [sp, #32]
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	46b9      	mov	r9, r7
 80096d4:	9307      	str	r3, [sp, #28]
 80096d6:	4607      	mov	r7, r0
 80096d8:	9b04      	ldr	r3, [sp, #16]
 80096da:	4621      	mov	r1, r4
 80096dc:	3b01      	subs	r3, #1
 80096de:	4628      	mov	r0, r5
 80096e0:	9302      	str	r3, [sp, #8]
 80096e2:	f7ff faf0 	bl	8008cc6 <quorem>
 80096e6:	4603      	mov	r3, r0
 80096e8:	3330      	adds	r3, #48	; 0x30
 80096ea:	9005      	str	r0, [sp, #20]
 80096ec:	4649      	mov	r1, r9
 80096ee:	4628      	mov	r0, r5
 80096f0:	9309      	str	r3, [sp, #36]	; 0x24
 80096f2:	f000 fc59 	bl	8009fa8 <__mcmp>
 80096f6:	463a      	mov	r2, r7
 80096f8:	4682      	mov	sl, r0
 80096fa:	4621      	mov	r1, r4
 80096fc:	4630      	mov	r0, r6
 80096fe:	f000 fc6f 	bl	8009fe0 <__mdiff>
 8009702:	68c2      	ldr	r2, [r0, #12]
 8009704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009706:	4680      	mov	r8, r0
 8009708:	bb0a      	cbnz	r2, 800974e <_dtoa_r+0x976>
 800970a:	4601      	mov	r1, r0
 800970c:	4628      	mov	r0, r5
 800970e:	f000 fc4b 	bl	8009fa8 <__mcmp>
 8009712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009714:	4602      	mov	r2, r0
 8009716:	4641      	mov	r1, r8
 8009718:	4630      	mov	r0, r6
 800971a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800971e:	f000 fa07 	bl	8009b30 <_Bfree>
 8009722:	9b06      	ldr	r3, [sp, #24]
 8009724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009726:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800972a:	ea43 0102 	orr.w	r1, r3, r2
 800972e:	9b07      	ldr	r3, [sp, #28]
 8009730:	4319      	orrs	r1, r3
 8009732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009734:	d10d      	bne.n	8009752 <_dtoa_r+0x97a>
 8009736:	2b39      	cmp	r3, #57	; 0x39
 8009738:	d029      	beq.n	800978e <_dtoa_r+0x9b6>
 800973a:	f1ba 0f00 	cmp.w	sl, #0
 800973e:	dd01      	ble.n	8009744 <_dtoa_r+0x96c>
 8009740:	9b05      	ldr	r3, [sp, #20]
 8009742:	3331      	adds	r3, #49	; 0x31
 8009744:	9a02      	ldr	r2, [sp, #8]
 8009746:	7013      	strb	r3, [r2, #0]
 8009748:	e775      	b.n	8009636 <_dtoa_r+0x85e>
 800974a:	4638      	mov	r0, r7
 800974c:	e7b8      	b.n	80096c0 <_dtoa_r+0x8e8>
 800974e:	2201      	movs	r2, #1
 8009750:	e7e1      	b.n	8009716 <_dtoa_r+0x93e>
 8009752:	f1ba 0f00 	cmp.w	sl, #0
 8009756:	db06      	blt.n	8009766 <_dtoa_r+0x98e>
 8009758:	9906      	ldr	r1, [sp, #24]
 800975a:	ea41 0a0a 	orr.w	sl, r1, sl
 800975e:	9907      	ldr	r1, [sp, #28]
 8009760:	ea5a 0a01 	orrs.w	sl, sl, r1
 8009764:	d120      	bne.n	80097a8 <_dtoa_r+0x9d0>
 8009766:	2a00      	cmp	r2, #0
 8009768:	ddec      	ble.n	8009744 <_dtoa_r+0x96c>
 800976a:	4629      	mov	r1, r5
 800976c:	2201      	movs	r2, #1
 800976e:	4630      	mov	r0, r6
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	f000 fbad 	bl	8009ed0 <__lshift>
 8009776:	4621      	mov	r1, r4
 8009778:	4605      	mov	r5, r0
 800977a:	f000 fc15 	bl	8009fa8 <__mcmp>
 800977e:	2800      	cmp	r0, #0
 8009780:	9b04      	ldr	r3, [sp, #16]
 8009782:	dc02      	bgt.n	800978a <_dtoa_r+0x9b2>
 8009784:	d1de      	bne.n	8009744 <_dtoa_r+0x96c>
 8009786:	07da      	lsls	r2, r3, #31
 8009788:	d5dc      	bpl.n	8009744 <_dtoa_r+0x96c>
 800978a:	2b39      	cmp	r3, #57	; 0x39
 800978c:	d1d8      	bne.n	8009740 <_dtoa_r+0x968>
 800978e:	9a02      	ldr	r2, [sp, #8]
 8009790:	2339      	movs	r3, #57	; 0x39
 8009792:	7013      	strb	r3, [r2, #0]
 8009794:	4643      	mov	r3, r8
 8009796:	4698      	mov	r8, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800979e:	2a39      	cmp	r2, #57	; 0x39
 80097a0:	d051      	beq.n	8009846 <_dtoa_r+0xa6e>
 80097a2:	3201      	adds	r2, #1
 80097a4:	701a      	strb	r2, [r3, #0]
 80097a6:	e746      	b.n	8009636 <_dtoa_r+0x85e>
 80097a8:	2a00      	cmp	r2, #0
 80097aa:	dd03      	ble.n	80097b4 <_dtoa_r+0x9dc>
 80097ac:	2b39      	cmp	r3, #57	; 0x39
 80097ae:	d0ee      	beq.n	800978e <_dtoa_r+0x9b6>
 80097b0:	3301      	adds	r3, #1
 80097b2:	e7c7      	b.n	8009744 <_dtoa_r+0x96c>
 80097b4:	9a04      	ldr	r2, [sp, #16]
 80097b6:	9908      	ldr	r1, [sp, #32]
 80097b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80097bc:	428a      	cmp	r2, r1
 80097be:	d02b      	beq.n	8009818 <_dtoa_r+0xa40>
 80097c0:	4629      	mov	r1, r5
 80097c2:	2300      	movs	r3, #0
 80097c4:	220a      	movs	r2, #10
 80097c6:	4630      	mov	r0, r6
 80097c8:	f000 f9d4 	bl	8009b74 <__multadd>
 80097cc:	45b9      	cmp	r9, r7
 80097ce:	4605      	mov	r5, r0
 80097d0:	f04f 0300 	mov.w	r3, #0
 80097d4:	f04f 020a 	mov.w	r2, #10
 80097d8:	4649      	mov	r1, r9
 80097da:	4630      	mov	r0, r6
 80097dc:	d107      	bne.n	80097ee <_dtoa_r+0xa16>
 80097de:	f000 f9c9 	bl	8009b74 <__multadd>
 80097e2:	4681      	mov	r9, r0
 80097e4:	4607      	mov	r7, r0
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	3301      	adds	r3, #1
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	e774      	b.n	80096d8 <_dtoa_r+0x900>
 80097ee:	f000 f9c1 	bl	8009b74 <__multadd>
 80097f2:	4639      	mov	r1, r7
 80097f4:	4681      	mov	r9, r0
 80097f6:	2300      	movs	r3, #0
 80097f8:	220a      	movs	r2, #10
 80097fa:	4630      	mov	r0, r6
 80097fc:	f000 f9ba 	bl	8009b74 <__multadd>
 8009800:	4607      	mov	r7, r0
 8009802:	e7f0      	b.n	80097e6 <_dtoa_r+0xa0e>
 8009804:	f1ba 0f00 	cmp.w	sl, #0
 8009808:	9a01      	ldr	r2, [sp, #4]
 800980a:	bfcc      	ite	gt
 800980c:	46d0      	movgt	r8, sl
 800980e:	f04f 0801 	movle.w	r8, #1
 8009812:	4490      	add	r8, r2
 8009814:	f04f 0900 	mov.w	r9, #0
 8009818:	4629      	mov	r1, r5
 800981a:	2201      	movs	r2, #1
 800981c:	4630      	mov	r0, r6
 800981e:	9302      	str	r3, [sp, #8]
 8009820:	f000 fb56 	bl	8009ed0 <__lshift>
 8009824:	4621      	mov	r1, r4
 8009826:	4605      	mov	r5, r0
 8009828:	f000 fbbe 	bl	8009fa8 <__mcmp>
 800982c:	2800      	cmp	r0, #0
 800982e:	dcb1      	bgt.n	8009794 <_dtoa_r+0x9bc>
 8009830:	d102      	bne.n	8009838 <_dtoa_r+0xa60>
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	07db      	lsls	r3, r3, #31
 8009836:	d4ad      	bmi.n	8009794 <_dtoa_r+0x9bc>
 8009838:	4643      	mov	r3, r8
 800983a:	4698      	mov	r8, r3
 800983c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009840:	2a30      	cmp	r2, #48	; 0x30
 8009842:	d0fa      	beq.n	800983a <_dtoa_r+0xa62>
 8009844:	e6f7      	b.n	8009636 <_dtoa_r+0x85e>
 8009846:	9a01      	ldr	r2, [sp, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d1a4      	bne.n	8009796 <_dtoa_r+0x9be>
 800984c:	f10b 0b01 	add.w	fp, fp, #1
 8009850:	2331      	movs	r3, #49	; 0x31
 8009852:	e778      	b.n	8009746 <_dtoa_r+0x96e>
 8009854:	4b14      	ldr	r3, [pc, #80]	; (80098a8 <_dtoa_r+0xad0>)
 8009856:	f7ff bb2a 	b.w	8008eae <_dtoa_r+0xd6>
 800985a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800985c:	2b00      	cmp	r3, #0
 800985e:	f47f ab05 	bne.w	8008e6c <_dtoa_r+0x94>
 8009862:	4b12      	ldr	r3, [pc, #72]	; (80098ac <_dtoa_r+0xad4>)
 8009864:	f7ff bb23 	b.w	8008eae <_dtoa_r+0xd6>
 8009868:	f1ba 0f00 	cmp.w	sl, #0
 800986c:	dc03      	bgt.n	8009876 <_dtoa_r+0xa9e>
 800986e:	9b06      	ldr	r3, [sp, #24]
 8009870:	2b02      	cmp	r3, #2
 8009872:	f73f aec8 	bgt.w	8009606 <_dtoa_r+0x82e>
 8009876:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800987a:	4621      	mov	r1, r4
 800987c:	4628      	mov	r0, r5
 800987e:	f7ff fa22 	bl	8008cc6 <quorem>
 8009882:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009886:	f808 3b01 	strb.w	r3, [r8], #1
 800988a:	9a01      	ldr	r2, [sp, #4]
 800988c:	eba8 0202 	sub.w	r2, r8, r2
 8009890:	4592      	cmp	sl, r2
 8009892:	ddb7      	ble.n	8009804 <_dtoa_r+0xa2c>
 8009894:	4629      	mov	r1, r5
 8009896:	2300      	movs	r3, #0
 8009898:	220a      	movs	r2, #10
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f96a 	bl	8009b74 <__multadd>
 80098a0:	4605      	mov	r5, r0
 80098a2:	e7ea      	b.n	800987a <_dtoa_r+0xaa2>
 80098a4:	0800ae00 	.word	0x0800ae00
 80098a8:	0800ad60 	.word	0x0800ad60
 80098ac:	0800ad84 	.word	0x0800ad84

080098b0 <_free_r>:
 80098b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098b2:	2900      	cmp	r1, #0
 80098b4:	d044      	beq.n	8009940 <_free_r+0x90>
 80098b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ba:	9001      	str	r0, [sp, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	f1a1 0404 	sub.w	r4, r1, #4
 80098c2:	bfb8      	it	lt
 80098c4:	18e4      	addlt	r4, r4, r3
 80098c6:	f000 f8e7 	bl	8009a98 <__malloc_lock>
 80098ca:	4a1e      	ldr	r2, [pc, #120]	; (8009944 <_free_r+0x94>)
 80098cc:	9801      	ldr	r0, [sp, #4]
 80098ce:	6813      	ldr	r3, [r2, #0]
 80098d0:	b933      	cbnz	r3, 80098e0 <_free_r+0x30>
 80098d2:	6063      	str	r3, [r4, #4]
 80098d4:	6014      	str	r4, [r2, #0]
 80098d6:	b003      	add	sp, #12
 80098d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098dc:	f000 b8e2 	b.w	8009aa4 <__malloc_unlock>
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d908      	bls.n	80098f6 <_free_r+0x46>
 80098e4:	6825      	ldr	r5, [r4, #0]
 80098e6:	1961      	adds	r1, r4, r5
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf01      	itttt	eq
 80098ec:	6819      	ldreq	r1, [r3, #0]
 80098ee:	685b      	ldreq	r3, [r3, #4]
 80098f0:	1949      	addeq	r1, r1, r5
 80098f2:	6021      	streq	r1, [r4, #0]
 80098f4:	e7ed      	b.n	80098d2 <_free_r+0x22>
 80098f6:	461a      	mov	r2, r3
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	b10b      	cbz	r3, 8009900 <_free_r+0x50>
 80098fc:	42a3      	cmp	r3, r4
 80098fe:	d9fa      	bls.n	80098f6 <_free_r+0x46>
 8009900:	6811      	ldr	r1, [r2, #0]
 8009902:	1855      	adds	r5, r2, r1
 8009904:	42a5      	cmp	r5, r4
 8009906:	d10b      	bne.n	8009920 <_free_r+0x70>
 8009908:	6824      	ldr	r4, [r4, #0]
 800990a:	4421      	add	r1, r4
 800990c:	1854      	adds	r4, r2, r1
 800990e:	42a3      	cmp	r3, r4
 8009910:	6011      	str	r1, [r2, #0]
 8009912:	d1e0      	bne.n	80098d6 <_free_r+0x26>
 8009914:	681c      	ldr	r4, [r3, #0]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	6053      	str	r3, [r2, #4]
 800991a:	440c      	add	r4, r1
 800991c:	6014      	str	r4, [r2, #0]
 800991e:	e7da      	b.n	80098d6 <_free_r+0x26>
 8009920:	d902      	bls.n	8009928 <_free_r+0x78>
 8009922:	230c      	movs	r3, #12
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	e7d6      	b.n	80098d6 <_free_r+0x26>
 8009928:	6825      	ldr	r5, [r4, #0]
 800992a:	1961      	adds	r1, r4, r5
 800992c:	428b      	cmp	r3, r1
 800992e:	bf04      	itt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	6063      	str	r3, [r4, #4]
 8009936:	bf04      	itt	eq
 8009938:	1949      	addeq	r1, r1, r5
 800993a:	6021      	streq	r1, [r4, #0]
 800993c:	6054      	str	r4, [r2, #4]
 800993e:	e7ca      	b.n	80098d6 <_free_r+0x26>
 8009940:	b003      	add	sp, #12
 8009942:	bd30      	pop	{r4, r5, pc}
 8009944:	2400446c 	.word	0x2400446c

08009948 <malloc>:
 8009948:	4b02      	ldr	r3, [pc, #8]	; (8009954 <malloc+0xc>)
 800994a:	4601      	mov	r1, r0
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	f000 b823 	b.w	8009998 <_malloc_r>
 8009952:	bf00      	nop
 8009954:	2400006c 	.word	0x2400006c

08009958 <sbrk_aligned>:
 8009958:	b570      	push	{r4, r5, r6, lr}
 800995a:	4e0e      	ldr	r6, [pc, #56]	; (8009994 <sbrk_aligned+0x3c>)
 800995c:	460c      	mov	r4, r1
 800995e:	6831      	ldr	r1, [r6, #0]
 8009960:	4605      	mov	r5, r0
 8009962:	b911      	cbnz	r1, 800996a <sbrk_aligned+0x12>
 8009964:	f000 fe40 	bl	800a5e8 <_sbrk_r>
 8009968:	6030      	str	r0, [r6, #0]
 800996a:	4621      	mov	r1, r4
 800996c:	4628      	mov	r0, r5
 800996e:	f000 fe3b 	bl	800a5e8 <_sbrk_r>
 8009972:	1c43      	adds	r3, r0, #1
 8009974:	d00a      	beq.n	800998c <sbrk_aligned+0x34>
 8009976:	1cc4      	adds	r4, r0, #3
 8009978:	f024 0403 	bic.w	r4, r4, #3
 800997c:	42a0      	cmp	r0, r4
 800997e:	d007      	beq.n	8009990 <sbrk_aligned+0x38>
 8009980:	1a21      	subs	r1, r4, r0
 8009982:	4628      	mov	r0, r5
 8009984:	f000 fe30 	bl	800a5e8 <_sbrk_r>
 8009988:	3001      	adds	r0, #1
 800998a:	d101      	bne.n	8009990 <sbrk_aligned+0x38>
 800998c:	f04f 34ff 	mov.w	r4, #4294967295
 8009990:	4620      	mov	r0, r4
 8009992:	bd70      	pop	{r4, r5, r6, pc}
 8009994:	24004470 	.word	0x24004470

08009998 <_malloc_r>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	1ccd      	adds	r5, r1, #3
 800999e:	f025 0503 	bic.w	r5, r5, #3
 80099a2:	3508      	adds	r5, #8
 80099a4:	2d0c      	cmp	r5, #12
 80099a6:	bf38      	it	cc
 80099a8:	250c      	movcc	r5, #12
 80099aa:	2d00      	cmp	r5, #0
 80099ac:	4607      	mov	r7, r0
 80099ae:	db01      	blt.n	80099b4 <_malloc_r+0x1c>
 80099b0:	42a9      	cmp	r1, r5
 80099b2:	d905      	bls.n	80099c0 <_malloc_r+0x28>
 80099b4:	230c      	movs	r3, #12
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	2600      	movs	r6, #0
 80099ba:	4630      	mov	r0, r6
 80099bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a94 <_malloc_r+0xfc>
 80099c4:	f000 f868 	bl	8009a98 <__malloc_lock>
 80099c8:	f8d8 3000 	ldr.w	r3, [r8]
 80099cc:	461c      	mov	r4, r3
 80099ce:	bb5c      	cbnz	r4, 8009a28 <_malloc_r+0x90>
 80099d0:	4629      	mov	r1, r5
 80099d2:	4638      	mov	r0, r7
 80099d4:	f7ff ffc0 	bl	8009958 <sbrk_aligned>
 80099d8:	1c43      	adds	r3, r0, #1
 80099da:	4604      	mov	r4, r0
 80099dc:	d155      	bne.n	8009a8a <_malloc_r+0xf2>
 80099de:	f8d8 4000 	ldr.w	r4, [r8]
 80099e2:	4626      	mov	r6, r4
 80099e4:	2e00      	cmp	r6, #0
 80099e6:	d145      	bne.n	8009a74 <_malloc_r+0xdc>
 80099e8:	2c00      	cmp	r4, #0
 80099ea:	d048      	beq.n	8009a7e <_malloc_r+0xe6>
 80099ec:	6823      	ldr	r3, [r4, #0]
 80099ee:	4631      	mov	r1, r6
 80099f0:	4638      	mov	r0, r7
 80099f2:	eb04 0903 	add.w	r9, r4, r3
 80099f6:	f000 fdf7 	bl	800a5e8 <_sbrk_r>
 80099fa:	4581      	cmp	r9, r0
 80099fc:	d13f      	bne.n	8009a7e <_malloc_r+0xe6>
 80099fe:	6821      	ldr	r1, [r4, #0]
 8009a00:	1a6d      	subs	r5, r5, r1
 8009a02:	4629      	mov	r1, r5
 8009a04:	4638      	mov	r0, r7
 8009a06:	f7ff ffa7 	bl	8009958 <sbrk_aligned>
 8009a0a:	3001      	adds	r0, #1
 8009a0c:	d037      	beq.n	8009a7e <_malloc_r+0xe6>
 8009a0e:	6823      	ldr	r3, [r4, #0]
 8009a10:	442b      	add	r3, r5
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	f8d8 3000 	ldr.w	r3, [r8]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d038      	beq.n	8009a8e <_malloc_r+0xf6>
 8009a1c:	685a      	ldr	r2, [r3, #4]
 8009a1e:	42a2      	cmp	r2, r4
 8009a20:	d12b      	bne.n	8009a7a <_malloc_r+0xe2>
 8009a22:	2200      	movs	r2, #0
 8009a24:	605a      	str	r2, [r3, #4]
 8009a26:	e00f      	b.n	8009a48 <_malloc_r+0xb0>
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	1b52      	subs	r2, r2, r5
 8009a2c:	d41f      	bmi.n	8009a6e <_malloc_r+0xd6>
 8009a2e:	2a0b      	cmp	r2, #11
 8009a30:	d917      	bls.n	8009a62 <_malloc_r+0xca>
 8009a32:	1961      	adds	r1, r4, r5
 8009a34:	42a3      	cmp	r3, r4
 8009a36:	6025      	str	r5, [r4, #0]
 8009a38:	bf18      	it	ne
 8009a3a:	6059      	strne	r1, [r3, #4]
 8009a3c:	6863      	ldr	r3, [r4, #4]
 8009a3e:	bf08      	it	eq
 8009a40:	f8c8 1000 	streq.w	r1, [r8]
 8009a44:	5162      	str	r2, [r4, r5]
 8009a46:	604b      	str	r3, [r1, #4]
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f104 060b 	add.w	r6, r4, #11
 8009a4e:	f000 f829 	bl	8009aa4 <__malloc_unlock>
 8009a52:	f026 0607 	bic.w	r6, r6, #7
 8009a56:	1d23      	adds	r3, r4, #4
 8009a58:	1af2      	subs	r2, r6, r3
 8009a5a:	d0ae      	beq.n	80099ba <_malloc_r+0x22>
 8009a5c:	1b9b      	subs	r3, r3, r6
 8009a5e:	50a3      	str	r3, [r4, r2]
 8009a60:	e7ab      	b.n	80099ba <_malloc_r+0x22>
 8009a62:	42a3      	cmp	r3, r4
 8009a64:	6862      	ldr	r2, [r4, #4]
 8009a66:	d1dd      	bne.n	8009a24 <_malloc_r+0x8c>
 8009a68:	f8c8 2000 	str.w	r2, [r8]
 8009a6c:	e7ec      	b.n	8009a48 <_malloc_r+0xb0>
 8009a6e:	4623      	mov	r3, r4
 8009a70:	6864      	ldr	r4, [r4, #4]
 8009a72:	e7ac      	b.n	80099ce <_malloc_r+0x36>
 8009a74:	4634      	mov	r4, r6
 8009a76:	6876      	ldr	r6, [r6, #4]
 8009a78:	e7b4      	b.n	80099e4 <_malloc_r+0x4c>
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	e7cc      	b.n	8009a18 <_malloc_r+0x80>
 8009a7e:	230c      	movs	r3, #12
 8009a80:	603b      	str	r3, [r7, #0]
 8009a82:	4638      	mov	r0, r7
 8009a84:	f000 f80e 	bl	8009aa4 <__malloc_unlock>
 8009a88:	e797      	b.n	80099ba <_malloc_r+0x22>
 8009a8a:	6025      	str	r5, [r4, #0]
 8009a8c:	e7dc      	b.n	8009a48 <_malloc_r+0xb0>
 8009a8e:	605b      	str	r3, [r3, #4]
 8009a90:	deff      	udf	#255	; 0xff
 8009a92:	bf00      	nop
 8009a94:	2400446c 	.word	0x2400446c

08009a98 <__malloc_lock>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__malloc_lock+0x8>)
 8009a9a:	f7ff b904 	b.w	8008ca6 <__retarget_lock_acquire_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	24004468 	.word	0x24004468

08009aa4 <__malloc_unlock>:
 8009aa4:	4801      	ldr	r0, [pc, #4]	; (8009aac <__malloc_unlock+0x8>)
 8009aa6:	f7ff b8ff 	b.w	8008ca8 <__retarget_lock_release_recursive>
 8009aaa:	bf00      	nop
 8009aac:	24004468 	.word	0x24004468

08009ab0 <_Balloc>:
 8009ab0:	b570      	push	{r4, r5, r6, lr}
 8009ab2:	69c6      	ldr	r6, [r0, #28]
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	460d      	mov	r5, r1
 8009ab8:	b976      	cbnz	r6, 8009ad8 <_Balloc+0x28>
 8009aba:	2010      	movs	r0, #16
 8009abc:	f7ff ff44 	bl	8009948 <malloc>
 8009ac0:	4602      	mov	r2, r0
 8009ac2:	61e0      	str	r0, [r4, #28]
 8009ac4:	b920      	cbnz	r0, 8009ad0 <_Balloc+0x20>
 8009ac6:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <_Balloc+0x78>)
 8009ac8:	4818      	ldr	r0, [pc, #96]	; (8009b2c <_Balloc+0x7c>)
 8009aca:	216b      	movs	r1, #107	; 0x6b
 8009acc:	f000 fd9c 	bl	800a608 <__assert_func>
 8009ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ad4:	6006      	str	r6, [r0, #0]
 8009ad6:	60c6      	str	r6, [r0, #12]
 8009ad8:	69e6      	ldr	r6, [r4, #28]
 8009ada:	68f3      	ldr	r3, [r6, #12]
 8009adc:	b183      	cbz	r3, 8009b00 <_Balloc+0x50>
 8009ade:	69e3      	ldr	r3, [r4, #28]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ae6:	b9b8      	cbnz	r0, 8009b18 <_Balloc+0x68>
 8009ae8:	2101      	movs	r1, #1
 8009aea:	fa01 f605 	lsl.w	r6, r1, r5
 8009aee:	1d72      	adds	r2, r6, #5
 8009af0:	0092      	lsls	r2, r2, #2
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 fda6 	bl	800a644 <_calloc_r>
 8009af8:	b160      	cbz	r0, 8009b14 <_Balloc+0x64>
 8009afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009afe:	e00e      	b.n	8009b1e <_Balloc+0x6e>
 8009b00:	2221      	movs	r2, #33	; 0x21
 8009b02:	2104      	movs	r1, #4
 8009b04:	4620      	mov	r0, r4
 8009b06:	f000 fd9d 	bl	800a644 <_calloc_r>
 8009b0a:	69e3      	ldr	r3, [r4, #28]
 8009b0c:	60f0      	str	r0, [r6, #12]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e4      	bne.n	8009ade <_Balloc+0x2e>
 8009b14:	2000      	movs	r0, #0
 8009b16:	bd70      	pop	{r4, r5, r6, pc}
 8009b18:	6802      	ldr	r2, [r0, #0]
 8009b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b24:	e7f7      	b.n	8009b16 <_Balloc+0x66>
 8009b26:	bf00      	nop
 8009b28:	0800ad91 	.word	0x0800ad91
 8009b2c:	0800ae11 	.word	0x0800ae11

08009b30 <_Bfree>:
 8009b30:	b570      	push	{r4, r5, r6, lr}
 8009b32:	69c6      	ldr	r6, [r0, #28]
 8009b34:	4605      	mov	r5, r0
 8009b36:	460c      	mov	r4, r1
 8009b38:	b976      	cbnz	r6, 8009b58 <_Bfree+0x28>
 8009b3a:	2010      	movs	r0, #16
 8009b3c:	f7ff ff04 	bl	8009948 <malloc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	61e8      	str	r0, [r5, #28]
 8009b44:	b920      	cbnz	r0, 8009b50 <_Bfree+0x20>
 8009b46:	4b09      	ldr	r3, [pc, #36]	; (8009b6c <_Bfree+0x3c>)
 8009b48:	4809      	ldr	r0, [pc, #36]	; (8009b70 <_Bfree+0x40>)
 8009b4a:	218f      	movs	r1, #143	; 0x8f
 8009b4c:	f000 fd5c 	bl	800a608 <__assert_func>
 8009b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b54:	6006      	str	r6, [r0, #0]
 8009b56:	60c6      	str	r6, [r0, #12]
 8009b58:	b13c      	cbz	r4, 8009b6a <_Bfree+0x3a>
 8009b5a:	69eb      	ldr	r3, [r5, #28]
 8009b5c:	6862      	ldr	r2, [r4, #4]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b64:	6021      	str	r1, [r4, #0]
 8009b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b6a:	bd70      	pop	{r4, r5, r6, pc}
 8009b6c:	0800ad91 	.word	0x0800ad91
 8009b70:	0800ae11 	.word	0x0800ae11

08009b74 <__multadd>:
 8009b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b78:	690d      	ldr	r5, [r1, #16]
 8009b7a:	4607      	mov	r7, r0
 8009b7c:	460c      	mov	r4, r1
 8009b7e:	461e      	mov	r6, r3
 8009b80:	f101 0c14 	add.w	ip, r1, #20
 8009b84:	2000      	movs	r0, #0
 8009b86:	f8dc 3000 	ldr.w	r3, [ip]
 8009b8a:	b299      	uxth	r1, r3
 8009b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b90:	0c1e      	lsrs	r6, r3, #16
 8009b92:	0c0b      	lsrs	r3, r1, #16
 8009b94:	fb02 3306 	mla	r3, r2, r6, r3
 8009b98:	b289      	uxth	r1, r1
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ba0:	4285      	cmp	r5, r0
 8009ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009baa:	dcec      	bgt.n	8009b86 <__multadd+0x12>
 8009bac:	b30e      	cbz	r6, 8009bf2 <__multadd+0x7e>
 8009bae:	68a3      	ldr	r3, [r4, #8]
 8009bb0:	42ab      	cmp	r3, r5
 8009bb2:	dc19      	bgt.n	8009be8 <__multadd+0x74>
 8009bb4:	6861      	ldr	r1, [r4, #4]
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	3101      	adds	r1, #1
 8009bba:	f7ff ff79 	bl	8009ab0 <_Balloc>
 8009bbe:	4680      	mov	r8, r0
 8009bc0:	b928      	cbnz	r0, 8009bce <__multadd+0x5a>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <__multadd+0x84>)
 8009bc6:	480d      	ldr	r0, [pc, #52]	; (8009bfc <__multadd+0x88>)
 8009bc8:	21ba      	movs	r1, #186	; 0xba
 8009bca:	f000 fd1d 	bl	800a608 <__assert_func>
 8009bce:	6922      	ldr	r2, [r4, #16]
 8009bd0:	3202      	adds	r2, #2
 8009bd2:	f104 010c 	add.w	r1, r4, #12
 8009bd6:	0092      	lsls	r2, r2, #2
 8009bd8:	300c      	adds	r0, #12
 8009bda:	f7ff f866 	bl	8008caa <memcpy>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4638      	mov	r0, r7
 8009be2:	f7ff ffa5 	bl	8009b30 <_Bfree>
 8009be6:	4644      	mov	r4, r8
 8009be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bec:	3501      	adds	r5, #1
 8009bee:	615e      	str	r6, [r3, #20]
 8009bf0:	6125      	str	r5, [r4, #16]
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bf8:	0800ae00 	.word	0x0800ae00
 8009bfc:	0800ae11 	.word	0x0800ae11

08009c00 <__hi0bits>:
 8009c00:	0c03      	lsrs	r3, r0, #16
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	b9d3      	cbnz	r3, 8009c3c <__hi0bits+0x3c>
 8009c06:	0400      	lsls	r0, r0, #16
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c0e:	bf04      	itt	eq
 8009c10:	0200      	lsleq	r0, r0, #8
 8009c12:	3308      	addeq	r3, #8
 8009c14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c18:	bf04      	itt	eq
 8009c1a:	0100      	lsleq	r0, r0, #4
 8009c1c:	3304      	addeq	r3, #4
 8009c1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c22:	bf04      	itt	eq
 8009c24:	0080      	lsleq	r0, r0, #2
 8009c26:	3302      	addeq	r3, #2
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	db05      	blt.n	8009c38 <__hi0bits+0x38>
 8009c2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c30:	f103 0301 	add.w	r3, r3, #1
 8009c34:	bf08      	it	eq
 8009c36:	2320      	moveq	r3, #32
 8009c38:	4618      	mov	r0, r3
 8009c3a:	4770      	bx	lr
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e7e4      	b.n	8009c0a <__hi0bits+0xa>

08009c40 <__lo0bits>:
 8009c40:	6803      	ldr	r3, [r0, #0]
 8009c42:	f013 0207 	ands.w	r2, r3, #7
 8009c46:	d00c      	beq.n	8009c62 <__lo0bits+0x22>
 8009c48:	07d9      	lsls	r1, r3, #31
 8009c4a:	d422      	bmi.n	8009c92 <__lo0bits+0x52>
 8009c4c:	079a      	lsls	r2, r3, #30
 8009c4e:	bf49      	itett	mi
 8009c50:	085b      	lsrmi	r3, r3, #1
 8009c52:	089b      	lsrpl	r3, r3, #2
 8009c54:	6003      	strmi	r3, [r0, #0]
 8009c56:	2201      	movmi	r2, #1
 8009c58:	bf5c      	itt	pl
 8009c5a:	6003      	strpl	r3, [r0, #0]
 8009c5c:	2202      	movpl	r2, #2
 8009c5e:	4610      	mov	r0, r2
 8009c60:	4770      	bx	lr
 8009c62:	b299      	uxth	r1, r3
 8009c64:	b909      	cbnz	r1, 8009c6a <__lo0bits+0x2a>
 8009c66:	0c1b      	lsrs	r3, r3, #16
 8009c68:	2210      	movs	r2, #16
 8009c6a:	b2d9      	uxtb	r1, r3
 8009c6c:	b909      	cbnz	r1, 8009c72 <__lo0bits+0x32>
 8009c6e:	3208      	adds	r2, #8
 8009c70:	0a1b      	lsrs	r3, r3, #8
 8009c72:	0719      	lsls	r1, r3, #28
 8009c74:	bf04      	itt	eq
 8009c76:	091b      	lsreq	r3, r3, #4
 8009c78:	3204      	addeq	r2, #4
 8009c7a:	0799      	lsls	r1, r3, #30
 8009c7c:	bf04      	itt	eq
 8009c7e:	089b      	lsreq	r3, r3, #2
 8009c80:	3202      	addeq	r2, #2
 8009c82:	07d9      	lsls	r1, r3, #31
 8009c84:	d403      	bmi.n	8009c8e <__lo0bits+0x4e>
 8009c86:	085b      	lsrs	r3, r3, #1
 8009c88:	f102 0201 	add.w	r2, r2, #1
 8009c8c:	d003      	beq.n	8009c96 <__lo0bits+0x56>
 8009c8e:	6003      	str	r3, [r0, #0]
 8009c90:	e7e5      	b.n	8009c5e <__lo0bits+0x1e>
 8009c92:	2200      	movs	r2, #0
 8009c94:	e7e3      	b.n	8009c5e <__lo0bits+0x1e>
 8009c96:	2220      	movs	r2, #32
 8009c98:	e7e1      	b.n	8009c5e <__lo0bits+0x1e>
	...

08009c9c <__i2b>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	2101      	movs	r1, #1
 8009ca2:	f7ff ff05 	bl	8009ab0 <_Balloc>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	b928      	cbnz	r0, 8009cb6 <__i2b+0x1a>
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <__i2b+0x24>)
 8009cac:	4805      	ldr	r0, [pc, #20]	; (8009cc4 <__i2b+0x28>)
 8009cae:	f240 1145 	movw	r1, #325	; 0x145
 8009cb2:	f000 fca9 	bl	800a608 <__assert_func>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	6144      	str	r4, [r0, #20]
 8009cba:	6103      	str	r3, [r0, #16]
 8009cbc:	bd10      	pop	{r4, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0800ae00 	.word	0x0800ae00
 8009cc4:	0800ae11 	.word	0x0800ae11

08009cc8 <__multiply>:
 8009cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ccc:	4691      	mov	r9, r2
 8009cce:	690a      	ldr	r2, [r1, #16]
 8009cd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	bfb8      	it	lt
 8009cd8:	460b      	movlt	r3, r1
 8009cda:	460c      	mov	r4, r1
 8009cdc:	bfbc      	itt	lt
 8009cde:	464c      	movlt	r4, r9
 8009ce0:	4699      	movlt	r9, r3
 8009ce2:	6927      	ldr	r7, [r4, #16]
 8009ce4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009ce8:	68a3      	ldr	r3, [r4, #8]
 8009cea:	6861      	ldr	r1, [r4, #4]
 8009cec:	eb07 060a 	add.w	r6, r7, sl
 8009cf0:	42b3      	cmp	r3, r6
 8009cf2:	b085      	sub	sp, #20
 8009cf4:	bfb8      	it	lt
 8009cf6:	3101      	addlt	r1, #1
 8009cf8:	f7ff feda 	bl	8009ab0 <_Balloc>
 8009cfc:	b930      	cbnz	r0, 8009d0c <__multiply+0x44>
 8009cfe:	4602      	mov	r2, r0
 8009d00:	4b44      	ldr	r3, [pc, #272]	; (8009e14 <__multiply+0x14c>)
 8009d02:	4845      	ldr	r0, [pc, #276]	; (8009e18 <__multiply+0x150>)
 8009d04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d08:	f000 fc7e 	bl	800a608 <__assert_func>
 8009d0c:	f100 0514 	add.w	r5, r0, #20
 8009d10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d14:	462b      	mov	r3, r5
 8009d16:	2200      	movs	r2, #0
 8009d18:	4543      	cmp	r3, r8
 8009d1a:	d321      	bcc.n	8009d60 <__multiply+0x98>
 8009d1c:	f104 0314 	add.w	r3, r4, #20
 8009d20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d24:	f109 0314 	add.w	r3, r9, #20
 8009d28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d2c:	9202      	str	r2, [sp, #8]
 8009d2e:	1b3a      	subs	r2, r7, r4
 8009d30:	3a15      	subs	r2, #21
 8009d32:	f022 0203 	bic.w	r2, r2, #3
 8009d36:	3204      	adds	r2, #4
 8009d38:	f104 0115 	add.w	r1, r4, #21
 8009d3c:	428f      	cmp	r7, r1
 8009d3e:	bf38      	it	cc
 8009d40:	2204      	movcc	r2, #4
 8009d42:	9201      	str	r2, [sp, #4]
 8009d44:	9a02      	ldr	r2, [sp, #8]
 8009d46:	9303      	str	r3, [sp, #12]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d80c      	bhi.n	8009d66 <__multiply+0x9e>
 8009d4c:	2e00      	cmp	r6, #0
 8009d4e:	dd03      	ble.n	8009d58 <__multiply+0x90>
 8009d50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d05b      	beq.n	8009e10 <__multiply+0x148>
 8009d58:	6106      	str	r6, [r0, #16]
 8009d5a:	b005      	add	sp, #20
 8009d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d60:	f843 2b04 	str.w	r2, [r3], #4
 8009d64:	e7d8      	b.n	8009d18 <__multiply+0x50>
 8009d66:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d6a:	f1ba 0f00 	cmp.w	sl, #0
 8009d6e:	d024      	beq.n	8009dba <__multiply+0xf2>
 8009d70:	f104 0e14 	add.w	lr, r4, #20
 8009d74:	46a9      	mov	r9, r5
 8009d76:	f04f 0c00 	mov.w	ip, #0
 8009d7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d7e:	f8d9 1000 	ldr.w	r1, [r9]
 8009d82:	fa1f fb82 	uxth.w	fp, r2
 8009d86:	b289      	uxth	r1, r1
 8009d88:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d90:	f8d9 2000 	ldr.w	r2, [r9]
 8009d94:	4461      	add	r1, ip
 8009d96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009da2:	b289      	uxth	r1, r1
 8009da4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009da8:	4577      	cmp	r7, lr
 8009daa:	f849 1b04 	str.w	r1, [r9], #4
 8009dae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009db2:	d8e2      	bhi.n	8009d7a <__multiply+0xb2>
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	f845 c002 	str.w	ip, [r5, r2]
 8009dba:	9a03      	ldr	r2, [sp, #12]
 8009dbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	f1b9 0f00 	cmp.w	r9, #0
 8009dc6:	d021      	beq.n	8009e0c <__multiply+0x144>
 8009dc8:	6829      	ldr	r1, [r5, #0]
 8009dca:	f104 0c14 	add.w	ip, r4, #20
 8009dce:	46ae      	mov	lr, r5
 8009dd0:	f04f 0a00 	mov.w	sl, #0
 8009dd4:	f8bc b000 	ldrh.w	fp, [ip]
 8009dd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009ddc:	fb09 220b 	mla	r2, r9, fp, r2
 8009de0:	4452      	add	r2, sl
 8009de2:	b289      	uxth	r1, r1
 8009de4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009de8:	f84e 1b04 	str.w	r1, [lr], #4
 8009dec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009df0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009df4:	f8be 1000 	ldrh.w	r1, [lr]
 8009df8:	fb09 110a 	mla	r1, r9, sl, r1
 8009dfc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e00:	4567      	cmp	r7, ip
 8009e02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e06:	d8e5      	bhi.n	8009dd4 <__multiply+0x10c>
 8009e08:	9a01      	ldr	r2, [sp, #4]
 8009e0a:	50a9      	str	r1, [r5, r2]
 8009e0c:	3504      	adds	r5, #4
 8009e0e:	e799      	b.n	8009d44 <__multiply+0x7c>
 8009e10:	3e01      	subs	r6, #1
 8009e12:	e79b      	b.n	8009d4c <__multiply+0x84>
 8009e14:	0800ae00 	.word	0x0800ae00
 8009e18:	0800ae11 	.word	0x0800ae11

08009e1c <__pow5mult>:
 8009e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e20:	4615      	mov	r5, r2
 8009e22:	f012 0203 	ands.w	r2, r2, #3
 8009e26:	4606      	mov	r6, r0
 8009e28:	460f      	mov	r7, r1
 8009e2a:	d007      	beq.n	8009e3c <__pow5mult+0x20>
 8009e2c:	4c25      	ldr	r4, [pc, #148]	; (8009ec4 <__pow5mult+0xa8>)
 8009e2e:	3a01      	subs	r2, #1
 8009e30:	2300      	movs	r3, #0
 8009e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e36:	f7ff fe9d 	bl	8009b74 <__multadd>
 8009e3a:	4607      	mov	r7, r0
 8009e3c:	10ad      	asrs	r5, r5, #2
 8009e3e:	d03d      	beq.n	8009ebc <__pow5mult+0xa0>
 8009e40:	69f4      	ldr	r4, [r6, #28]
 8009e42:	b97c      	cbnz	r4, 8009e64 <__pow5mult+0x48>
 8009e44:	2010      	movs	r0, #16
 8009e46:	f7ff fd7f 	bl	8009948 <malloc>
 8009e4a:	4602      	mov	r2, r0
 8009e4c:	61f0      	str	r0, [r6, #28]
 8009e4e:	b928      	cbnz	r0, 8009e5c <__pow5mult+0x40>
 8009e50:	4b1d      	ldr	r3, [pc, #116]	; (8009ec8 <__pow5mult+0xac>)
 8009e52:	481e      	ldr	r0, [pc, #120]	; (8009ecc <__pow5mult+0xb0>)
 8009e54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e58:	f000 fbd6 	bl	800a608 <__assert_func>
 8009e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e60:	6004      	str	r4, [r0, #0]
 8009e62:	60c4      	str	r4, [r0, #12]
 8009e64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e6c:	b94c      	cbnz	r4, 8009e82 <__pow5mult+0x66>
 8009e6e:	f240 2171 	movw	r1, #625	; 0x271
 8009e72:	4630      	mov	r0, r6
 8009e74:	f7ff ff12 	bl	8009c9c <__i2b>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e7e:	4604      	mov	r4, r0
 8009e80:	6003      	str	r3, [r0, #0]
 8009e82:	f04f 0900 	mov.w	r9, #0
 8009e86:	07eb      	lsls	r3, r5, #31
 8009e88:	d50a      	bpl.n	8009ea0 <__pow5mult+0x84>
 8009e8a:	4639      	mov	r1, r7
 8009e8c:	4622      	mov	r2, r4
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7ff ff1a 	bl	8009cc8 <__multiply>
 8009e94:	4639      	mov	r1, r7
 8009e96:	4680      	mov	r8, r0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff fe49 	bl	8009b30 <_Bfree>
 8009e9e:	4647      	mov	r7, r8
 8009ea0:	106d      	asrs	r5, r5, #1
 8009ea2:	d00b      	beq.n	8009ebc <__pow5mult+0xa0>
 8009ea4:	6820      	ldr	r0, [r4, #0]
 8009ea6:	b938      	cbnz	r0, 8009eb8 <__pow5mult+0x9c>
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	4621      	mov	r1, r4
 8009eac:	4630      	mov	r0, r6
 8009eae:	f7ff ff0b 	bl	8009cc8 <__multiply>
 8009eb2:	6020      	str	r0, [r4, #0]
 8009eb4:	f8c0 9000 	str.w	r9, [r0]
 8009eb8:	4604      	mov	r4, r0
 8009eba:	e7e4      	b.n	8009e86 <__pow5mult+0x6a>
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ec2:	bf00      	nop
 8009ec4:	0800af60 	.word	0x0800af60
 8009ec8:	0800ad91 	.word	0x0800ad91
 8009ecc:	0800ae11 	.word	0x0800ae11

08009ed0 <__lshift>:
 8009ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	6849      	ldr	r1, [r1, #4]
 8009ed8:	6923      	ldr	r3, [r4, #16]
 8009eda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	4691      	mov	r9, r2
 8009ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ee8:	f108 0601 	add.w	r6, r8, #1
 8009eec:	42b3      	cmp	r3, r6
 8009eee:	db0b      	blt.n	8009f08 <__lshift+0x38>
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff fddd 	bl	8009ab0 <_Balloc>
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	b948      	cbnz	r0, 8009f0e <__lshift+0x3e>
 8009efa:	4602      	mov	r2, r0
 8009efc:	4b28      	ldr	r3, [pc, #160]	; (8009fa0 <__lshift+0xd0>)
 8009efe:	4829      	ldr	r0, [pc, #164]	; (8009fa4 <__lshift+0xd4>)
 8009f00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f04:	f000 fb80 	bl	800a608 <__assert_func>
 8009f08:	3101      	adds	r1, #1
 8009f0a:	005b      	lsls	r3, r3, #1
 8009f0c:	e7ee      	b.n	8009eec <__lshift+0x1c>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f100 0114 	add.w	r1, r0, #20
 8009f14:	f100 0210 	add.w	r2, r0, #16
 8009f18:	4618      	mov	r0, r3
 8009f1a:	4553      	cmp	r3, sl
 8009f1c:	db33      	blt.n	8009f86 <__lshift+0xb6>
 8009f1e:	6920      	ldr	r0, [r4, #16]
 8009f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f24:	f104 0314 	add.w	r3, r4, #20
 8009f28:	f019 091f 	ands.w	r9, r9, #31
 8009f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f34:	d02b      	beq.n	8009f8e <__lshift+0xbe>
 8009f36:	f1c9 0e20 	rsb	lr, r9, #32
 8009f3a:	468a      	mov	sl, r1
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	6818      	ldr	r0, [r3, #0]
 8009f40:	fa00 f009 	lsl.w	r0, r0, r9
 8009f44:	4310      	orrs	r0, r2
 8009f46:	f84a 0b04 	str.w	r0, [sl], #4
 8009f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f4e:	459c      	cmp	ip, r3
 8009f50:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f54:	d8f3      	bhi.n	8009f3e <__lshift+0x6e>
 8009f56:	ebac 0304 	sub.w	r3, ip, r4
 8009f5a:	3b15      	subs	r3, #21
 8009f5c:	f023 0303 	bic.w	r3, r3, #3
 8009f60:	3304      	adds	r3, #4
 8009f62:	f104 0015 	add.w	r0, r4, #21
 8009f66:	4584      	cmp	ip, r0
 8009f68:	bf38      	it	cc
 8009f6a:	2304      	movcc	r3, #4
 8009f6c:	50ca      	str	r2, [r1, r3]
 8009f6e:	b10a      	cbz	r2, 8009f74 <__lshift+0xa4>
 8009f70:	f108 0602 	add.w	r6, r8, #2
 8009f74:	3e01      	subs	r6, #1
 8009f76:	4638      	mov	r0, r7
 8009f78:	612e      	str	r6, [r5, #16]
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	f7ff fdd8 	bl	8009b30 <_Bfree>
 8009f80:	4628      	mov	r0, r5
 8009f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f8a:	3301      	adds	r3, #1
 8009f8c:	e7c5      	b.n	8009f1a <__lshift+0x4a>
 8009f8e:	3904      	subs	r1, #4
 8009f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f98:	459c      	cmp	ip, r3
 8009f9a:	d8f9      	bhi.n	8009f90 <__lshift+0xc0>
 8009f9c:	e7ea      	b.n	8009f74 <__lshift+0xa4>
 8009f9e:	bf00      	nop
 8009fa0:	0800ae00 	.word	0x0800ae00
 8009fa4:	0800ae11 	.word	0x0800ae11

08009fa8 <__mcmp>:
 8009fa8:	b530      	push	{r4, r5, lr}
 8009faa:	6902      	ldr	r2, [r0, #16]
 8009fac:	690c      	ldr	r4, [r1, #16]
 8009fae:	1b12      	subs	r2, r2, r4
 8009fb0:	d10e      	bne.n	8009fd0 <__mcmp+0x28>
 8009fb2:	f100 0314 	add.w	r3, r0, #20
 8009fb6:	3114      	adds	r1, #20
 8009fb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fc8:	42a5      	cmp	r5, r4
 8009fca:	d003      	beq.n	8009fd4 <__mcmp+0x2c>
 8009fcc:	d305      	bcc.n	8009fda <__mcmp+0x32>
 8009fce:	2201      	movs	r2, #1
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	bd30      	pop	{r4, r5, pc}
 8009fd4:	4283      	cmp	r3, r0
 8009fd6:	d3f3      	bcc.n	8009fc0 <__mcmp+0x18>
 8009fd8:	e7fa      	b.n	8009fd0 <__mcmp+0x28>
 8009fda:	f04f 32ff 	mov.w	r2, #4294967295
 8009fde:	e7f7      	b.n	8009fd0 <__mcmp+0x28>

08009fe0 <__mdiff>:
 8009fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	4606      	mov	r6, r0
 8009fe8:	4611      	mov	r1, r2
 8009fea:	4620      	mov	r0, r4
 8009fec:	4690      	mov	r8, r2
 8009fee:	f7ff ffdb 	bl	8009fa8 <__mcmp>
 8009ff2:	1e05      	subs	r5, r0, #0
 8009ff4:	d110      	bne.n	800a018 <__mdiff+0x38>
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7ff fd59 	bl	8009ab0 <_Balloc>
 8009ffe:	b930      	cbnz	r0, 800a00e <__mdiff+0x2e>
 800a000:	4b3a      	ldr	r3, [pc, #232]	; (800a0ec <__mdiff+0x10c>)
 800a002:	4602      	mov	r2, r0
 800a004:	f240 2137 	movw	r1, #567	; 0x237
 800a008:	4839      	ldr	r0, [pc, #228]	; (800a0f0 <__mdiff+0x110>)
 800a00a:	f000 fafd 	bl	800a608 <__assert_func>
 800a00e:	2301      	movs	r3, #1
 800a010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a014:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a018:	bfa4      	itt	ge
 800a01a:	4643      	movge	r3, r8
 800a01c:	46a0      	movge	r8, r4
 800a01e:	4630      	mov	r0, r6
 800a020:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a024:	bfa6      	itte	ge
 800a026:	461c      	movge	r4, r3
 800a028:	2500      	movge	r5, #0
 800a02a:	2501      	movlt	r5, #1
 800a02c:	f7ff fd40 	bl	8009ab0 <_Balloc>
 800a030:	b920      	cbnz	r0, 800a03c <__mdiff+0x5c>
 800a032:	4b2e      	ldr	r3, [pc, #184]	; (800a0ec <__mdiff+0x10c>)
 800a034:	4602      	mov	r2, r0
 800a036:	f240 2145 	movw	r1, #581	; 0x245
 800a03a:	e7e5      	b.n	800a008 <__mdiff+0x28>
 800a03c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a040:	6926      	ldr	r6, [r4, #16]
 800a042:	60c5      	str	r5, [r0, #12]
 800a044:	f104 0914 	add.w	r9, r4, #20
 800a048:	f108 0514 	add.w	r5, r8, #20
 800a04c:	f100 0e14 	add.w	lr, r0, #20
 800a050:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a054:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a058:	f108 0210 	add.w	r2, r8, #16
 800a05c:	46f2      	mov	sl, lr
 800a05e:	2100      	movs	r1, #0
 800a060:	f859 3b04 	ldr.w	r3, [r9], #4
 800a064:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a068:	fa11 f88b 	uxtah	r8, r1, fp
 800a06c:	b299      	uxth	r1, r3
 800a06e:	0c1b      	lsrs	r3, r3, #16
 800a070:	eba8 0801 	sub.w	r8, r8, r1
 800a074:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a078:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a07c:	fa1f f888 	uxth.w	r8, r8
 800a080:	1419      	asrs	r1, r3, #16
 800a082:	454e      	cmp	r6, r9
 800a084:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a088:	f84a 3b04 	str.w	r3, [sl], #4
 800a08c:	d8e8      	bhi.n	800a060 <__mdiff+0x80>
 800a08e:	1b33      	subs	r3, r6, r4
 800a090:	3b15      	subs	r3, #21
 800a092:	f023 0303 	bic.w	r3, r3, #3
 800a096:	3304      	adds	r3, #4
 800a098:	3415      	adds	r4, #21
 800a09a:	42a6      	cmp	r6, r4
 800a09c:	bf38      	it	cc
 800a09e:	2304      	movcc	r3, #4
 800a0a0:	441d      	add	r5, r3
 800a0a2:	4473      	add	r3, lr
 800a0a4:	469e      	mov	lr, r3
 800a0a6:	462e      	mov	r6, r5
 800a0a8:	4566      	cmp	r6, ip
 800a0aa:	d30e      	bcc.n	800a0ca <__mdiff+0xea>
 800a0ac:	f10c 0203 	add.w	r2, ip, #3
 800a0b0:	1b52      	subs	r2, r2, r5
 800a0b2:	f022 0203 	bic.w	r2, r2, #3
 800a0b6:	3d03      	subs	r5, #3
 800a0b8:	45ac      	cmp	ip, r5
 800a0ba:	bf38      	it	cc
 800a0bc:	2200      	movcc	r2, #0
 800a0be:	4413      	add	r3, r2
 800a0c0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a0c4:	b17a      	cbz	r2, 800a0e6 <__mdiff+0x106>
 800a0c6:	6107      	str	r7, [r0, #16]
 800a0c8:	e7a4      	b.n	800a014 <__mdiff+0x34>
 800a0ca:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0ce:	fa11 f288 	uxtah	r2, r1, r8
 800a0d2:	1414      	asrs	r4, r2, #16
 800a0d4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0d8:	b292      	uxth	r2, r2
 800a0da:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0de:	f84e 2b04 	str.w	r2, [lr], #4
 800a0e2:	1421      	asrs	r1, r4, #16
 800a0e4:	e7e0      	b.n	800a0a8 <__mdiff+0xc8>
 800a0e6:	3f01      	subs	r7, #1
 800a0e8:	e7ea      	b.n	800a0c0 <__mdiff+0xe0>
 800a0ea:	bf00      	nop
 800a0ec:	0800ae00 	.word	0x0800ae00
 800a0f0:	0800ae11 	.word	0x0800ae11

0800a0f4 <__d2b>:
 800a0f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0f8:	460f      	mov	r7, r1
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	ec59 8b10 	vmov	r8, r9, d0
 800a100:	4616      	mov	r6, r2
 800a102:	f7ff fcd5 	bl	8009ab0 <_Balloc>
 800a106:	4604      	mov	r4, r0
 800a108:	b930      	cbnz	r0, 800a118 <__d2b+0x24>
 800a10a:	4602      	mov	r2, r0
 800a10c:	4b24      	ldr	r3, [pc, #144]	; (800a1a0 <__d2b+0xac>)
 800a10e:	4825      	ldr	r0, [pc, #148]	; (800a1a4 <__d2b+0xb0>)
 800a110:	f240 310f 	movw	r1, #783	; 0x30f
 800a114:	f000 fa78 	bl	800a608 <__assert_func>
 800a118:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a11c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a120:	bb2d      	cbnz	r5, 800a16e <__d2b+0x7a>
 800a122:	9301      	str	r3, [sp, #4]
 800a124:	f1b8 0300 	subs.w	r3, r8, #0
 800a128:	d026      	beq.n	800a178 <__d2b+0x84>
 800a12a:	4668      	mov	r0, sp
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	f7ff fd87 	bl	8009c40 <__lo0bits>
 800a132:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a136:	b1e8      	cbz	r0, 800a174 <__d2b+0x80>
 800a138:	f1c0 0320 	rsb	r3, r0, #32
 800a13c:	fa02 f303 	lsl.w	r3, r2, r3
 800a140:	430b      	orrs	r3, r1
 800a142:	40c2      	lsrs	r2, r0
 800a144:	6163      	str	r3, [r4, #20]
 800a146:	9201      	str	r2, [sp, #4]
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	61a3      	str	r3, [r4, #24]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bf14      	ite	ne
 800a150:	2202      	movne	r2, #2
 800a152:	2201      	moveq	r2, #1
 800a154:	6122      	str	r2, [r4, #16]
 800a156:	b1bd      	cbz	r5, 800a188 <__d2b+0x94>
 800a158:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a15c:	4405      	add	r5, r0
 800a15e:	603d      	str	r5, [r7, #0]
 800a160:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a164:	6030      	str	r0, [r6, #0]
 800a166:	4620      	mov	r0, r4
 800a168:	b003      	add	sp, #12
 800a16a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a16e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a172:	e7d6      	b.n	800a122 <__d2b+0x2e>
 800a174:	6161      	str	r1, [r4, #20]
 800a176:	e7e7      	b.n	800a148 <__d2b+0x54>
 800a178:	a801      	add	r0, sp, #4
 800a17a:	f7ff fd61 	bl	8009c40 <__lo0bits>
 800a17e:	9b01      	ldr	r3, [sp, #4]
 800a180:	6163      	str	r3, [r4, #20]
 800a182:	3020      	adds	r0, #32
 800a184:	2201      	movs	r2, #1
 800a186:	e7e5      	b.n	800a154 <__d2b+0x60>
 800a188:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a18c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a190:	6038      	str	r0, [r7, #0]
 800a192:	6918      	ldr	r0, [r3, #16]
 800a194:	f7ff fd34 	bl	8009c00 <__hi0bits>
 800a198:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a19c:	e7e2      	b.n	800a164 <__d2b+0x70>
 800a19e:	bf00      	nop
 800a1a0:	0800ae00 	.word	0x0800ae00
 800a1a4:	0800ae11 	.word	0x0800ae11

0800a1a8 <__ssputs_r>:
 800a1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1ac:	688e      	ldr	r6, [r1, #8]
 800a1ae:	461f      	mov	r7, r3
 800a1b0:	42be      	cmp	r6, r7
 800a1b2:	680b      	ldr	r3, [r1, #0]
 800a1b4:	4682      	mov	sl, r0
 800a1b6:	460c      	mov	r4, r1
 800a1b8:	4690      	mov	r8, r2
 800a1ba:	d82c      	bhi.n	800a216 <__ssputs_r+0x6e>
 800a1bc:	898a      	ldrh	r2, [r1, #12]
 800a1be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1c2:	d026      	beq.n	800a212 <__ssputs_r+0x6a>
 800a1c4:	6965      	ldr	r5, [r4, #20]
 800a1c6:	6909      	ldr	r1, [r1, #16]
 800a1c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1cc:	eba3 0901 	sub.w	r9, r3, r1
 800a1d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1d4:	1c7b      	adds	r3, r7, #1
 800a1d6:	444b      	add	r3, r9
 800a1d8:	106d      	asrs	r5, r5, #1
 800a1da:	429d      	cmp	r5, r3
 800a1dc:	bf38      	it	cc
 800a1de:	461d      	movcc	r5, r3
 800a1e0:	0553      	lsls	r3, r2, #21
 800a1e2:	d527      	bpl.n	800a234 <__ssputs_r+0x8c>
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f7ff fbd7 	bl	8009998 <_malloc_r>
 800a1ea:	4606      	mov	r6, r0
 800a1ec:	b360      	cbz	r0, 800a248 <__ssputs_r+0xa0>
 800a1ee:	6921      	ldr	r1, [r4, #16]
 800a1f0:	464a      	mov	r2, r9
 800a1f2:	f7fe fd5a 	bl	8008caa <memcpy>
 800a1f6:	89a3      	ldrh	r3, [r4, #12]
 800a1f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a200:	81a3      	strh	r3, [r4, #12]
 800a202:	6126      	str	r6, [r4, #16]
 800a204:	6165      	str	r5, [r4, #20]
 800a206:	444e      	add	r6, r9
 800a208:	eba5 0509 	sub.w	r5, r5, r9
 800a20c:	6026      	str	r6, [r4, #0]
 800a20e:	60a5      	str	r5, [r4, #8]
 800a210:	463e      	mov	r6, r7
 800a212:	42be      	cmp	r6, r7
 800a214:	d900      	bls.n	800a218 <__ssputs_r+0x70>
 800a216:	463e      	mov	r6, r7
 800a218:	6820      	ldr	r0, [r4, #0]
 800a21a:	4632      	mov	r2, r6
 800a21c:	4641      	mov	r1, r8
 800a21e:	f000 f9c9 	bl	800a5b4 <memmove>
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	1b9b      	subs	r3, r3, r6
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	4433      	add	r3, r6
 800a22c:	6023      	str	r3, [r4, #0]
 800a22e:	2000      	movs	r0, #0
 800a230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a234:	462a      	mov	r2, r5
 800a236:	f000 fa2d 	bl	800a694 <_realloc_r>
 800a23a:	4606      	mov	r6, r0
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d1e0      	bne.n	800a202 <__ssputs_r+0x5a>
 800a240:	6921      	ldr	r1, [r4, #16]
 800a242:	4650      	mov	r0, sl
 800a244:	f7ff fb34 	bl	80098b0 <_free_r>
 800a248:	230c      	movs	r3, #12
 800a24a:	f8ca 3000 	str.w	r3, [sl]
 800a24e:	89a3      	ldrh	r3, [r4, #12]
 800a250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	f04f 30ff 	mov.w	r0, #4294967295
 800a25a:	e7e9      	b.n	800a230 <__ssputs_r+0x88>

0800a25c <_svfiprintf_r>:
 800a25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a260:	4698      	mov	r8, r3
 800a262:	898b      	ldrh	r3, [r1, #12]
 800a264:	061b      	lsls	r3, r3, #24
 800a266:	b09d      	sub	sp, #116	; 0x74
 800a268:	4607      	mov	r7, r0
 800a26a:	460d      	mov	r5, r1
 800a26c:	4614      	mov	r4, r2
 800a26e:	d50e      	bpl.n	800a28e <_svfiprintf_r+0x32>
 800a270:	690b      	ldr	r3, [r1, #16]
 800a272:	b963      	cbnz	r3, 800a28e <_svfiprintf_r+0x32>
 800a274:	2140      	movs	r1, #64	; 0x40
 800a276:	f7ff fb8f 	bl	8009998 <_malloc_r>
 800a27a:	6028      	str	r0, [r5, #0]
 800a27c:	6128      	str	r0, [r5, #16]
 800a27e:	b920      	cbnz	r0, 800a28a <_svfiprintf_r+0x2e>
 800a280:	230c      	movs	r3, #12
 800a282:	603b      	str	r3, [r7, #0]
 800a284:	f04f 30ff 	mov.w	r0, #4294967295
 800a288:	e0d0      	b.n	800a42c <_svfiprintf_r+0x1d0>
 800a28a:	2340      	movs	r3, #64	; 0x40
 800a28c:	616b      	str	r3, [r5, #20]
 800a28e:	2300      	movs	r3, #0
 800a290:	9309      	str	r3, [sp, #36]	; 0x24
 800a292:	2320      	movs	r3, #32
 800a294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a298:	f8cd 800c 	str.w	r8, [sp, #12]
 800a29c:	2330      	movs	r3, #48	; 0x30
 800a29e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a444 <_svfiprintf_r+0x1e8>
 800a2a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a2a6:	f04f 0901 	mov.w	r9, #1
 800a2aa:	4623      	mov	r3, r4
 800a2ac:	469a      	mov	sl, r3
 800a2ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2b2:	b10a      	cbz	r2, 800a2b8 <_svfiprintf_r+0x5c>
 800a2b4:	2a25      	cmp	r2, #37	; 0x25
 800a2b6:	d1f9      	bne.n	800a2ac <_svfiprintf_r+0x50>
 800a2b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a2bc:	d00b      	beq.n	800a2d6 <_svfiprintf_r+0x7a>
 800a2be:	465b      	mov	r3, fp
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4638      	mov	r0, r7
 800a2c6:	f7ff ff6f 	bl	800a1a8 <__ssputs_r>
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	f000 80a9 	beq.w	800a422 <_svfiprintf_r+0x1c6>
 800a2d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2d2:	445a      	add	r2, fp
 800a2d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	f000 80a1 	beq.w	800a422 <_svfiprintf_r+0x1c6>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a2e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2ea:	f10a 0a01 	add.w	sl, sl, #1
 800a2ee:	9304      	str	r3, [sp, #16]
 800a2f0:	9307      	str	r3, [sp, #28]
 800a2f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a2f8:	4654      	mov	r4, sl
 800a2fa:	2205      	movs	r2, #5
 800a2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a300:	4850      	ldr	r0, [pc, #320]	; (800a444 <_svfiprintf_r+0x1e8>)
 800a302:	f7f6 f805 	bl	8000310 <memchr>
 800a306:	9a04      	ldr	r2, [sp, #16]
 800a308:	b9d8      	cbnz	r0, 800a342 <_svfiprintf_r+0xe6>
 800a30a:	06d0      	lsls	r0, r2, #27
 800a30c:	bf44      	itt	mi
 800a30e:	2320      	movmi	r3, #32
 800a310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a314:	0711      	lsls	r1, r2, #28
 800a316:	bf44      	itt	mi
 800a318:	232b      	movmi	r3, #43	; 0x2b
 800a31a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a31e:	f89a 3000 	ldrb.w	r3, [sl]
 800a322:	2b2a      	cmp	r3, #42	; 0x2a
 800a324:	d015      	beq.n	800a352 <_svfiprintf_r+0xf6>
 800a326:	9a07      	ldr	r2, [sp, #28]
 800a328:	4654      	mov	r4, sl
 800a32a:	2000      	movs	r0, #0
 800a32c:	f04f 0c0a 	mov.w	ip, #10
 800a330:	4621      	mov	r1, r4
 800a332:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a336:	3b30      	subs	r3, #48	; 0x30
 800a338:	2b09      	cmp	r3, #9
 800a33a:	d94d      	bls.n	800a3d8 <_svfiprintf_r+0x17c>
 800a33c:	b1b0      	cbz	r0, 800a36c <_svfiprintf_r+0x110>
 800a33e:	9207      	str	r2, [sp, #28]
 800a340:	e014      	b.n	800a36c <_svfiprintf_r+0x110>
 800a342:	eba0 0308 	sub.w	r3, r0, r8
 800a346:	fa09 f303 	lsl.w	r3, r9, r3
 800a34a:	4313      	orrs	r3, r2
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	46a2      	mov	sl, r4
 800a350:	e7d2      	b.n	800a2f8 <_svfiprintf_r+0x9c>
 800a352:	9b03      	ldr	r3, [sp, #12]
 800a354:	1d19      	adds	r1, r3, #4
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	9103      	str	r1, [sp, #12]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	bfbb      	ittet	lt
 800a35e:	425b      	neglt	r3, r3
 800a360:	f042 0202 	orrlt.w	r2, r2, #2
 800a364:	9307      	strge	r3, [sp, #28]
 800a366:	9307      	strlt	r3, [sp, #28]
 800a368:	bfb8      	it	lt
 800a36a:	9204      	strlt	r2, [sp, #16]
 800a36c:	7823      	ldrb	r3, [r4, #0]
 800a36e:	2b2e      	cmp	r3, #46	; 0x2e
 800a370:	d10c      	bne.n	800a38c <_svfiprintf_r+0x130>
 800a372:	7863      	ldrb	r3, [r4, #1]
 800a374:	2b2a      	cmp	r3, #42	; 0x2a
 800a376:	d134      	bne.n	800a3e2 <_svfiprintf_r+0x186>
 800a378:	9b03      	ldr	r3, [sp, #12]
 800a37a:	1d1a      	adds	r2, r3, #4
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	9203      	str	r2, [sp, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	bfb8      	it	lt
 800a384:	f04f 33ff 	movlt.w	r3, #4294967295
 800a388:	3402      	adds	r4, #2
 800a38a:	9305      	str	r3, [sp, #20]
 800a38c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a454 <_svfiprintf_r+0x1f8>
 800a390:	7821      	ldrb	r1, [r4, #0]
 800a392:	2203      	movs	r2, #3
 800a394:	4650      	mov	r0, sl
 800a396:	f7f5 ffbb 	bl	8000310 <memchr>
 800a39a:	b138      	cbz	r0, 800a3ac <_svfiprintf_r+0x150>
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	eba0 000a 	sub.w	r0, r0, sl
 800a3a2:	2240      	movs	r2, #64	; 0x40
 800a3a4:	4082      	lsls	r2, r0
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	3401      	adds	r4, #1
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3b0:	4825      	ldr	r0, [pc, #148]	; (800a448 <_svfiprintf_r+0x1ec>)
 800a3b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3b6:	2206      	movs	r2, #6
 800a3b8:	f7f5 ffaa 	bl	8000310 <memchr>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d038      	beq.n	800a432 <_svfiprintf_r+0x1d6>
 800a3c0:	4b22      	ldr	r3, [pc, #136]	; (800a44c <_svfiprintf_r+0x1f0>)
 800a3c2:	bb1b      	cbnz	r3, 800a40c <_svfiprintf_r+0x1b0>
 800a3c4:	9b03      	ldr	r3, [sp, #12]
 800a3c6:	3307      	adds	r3, #7
 800a3c8:	f023 0307 	bic.w	r3, r3, #7
 800a3cc:	3308      	adds	r3, #8
 800a3ce:	9303      	str	r3, [sp, #12]
 800a3d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3d2:	4433      	add	r3, r6
 800a3d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d6:	e768      	b.n	800a2aa <_svfiprintf_r+0x4e>
 800a3d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3dc:	460c      	mov	r4, r1
 800a3de:	2001      	movs	r0, #1
 800a3e0:	e7a6      	b.n	800a330 <_svfiprintf_r+0xd4>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	3401      	adds	r4, #1
 800a3e6:	9305      	str	r3, [sp, #20]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	f04f 0c0a 	mov.w	ip, #10
 800a3ee:	4620      	mov	r0, r4
 800a3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3f4:	3a30      	subs	r2, #48	; 0x30
 800a3f6:	2a09      	cmp	r2, #9
 800a3f8:	d903      	bls.n	800a402 <_svfiprintf_r+0x1a6>
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d0c6      	beq.n	800a38c <_svfiprintf_r+0x130>
 800a3fe:	9105      	str	r1, [sp, #20]
 800a400:	e7c4      	b.n	800a38c <_svfiprintf_r+0x130>
 800a402:	fb0c 2101 	mla	r1, ip, r1, r2
 800a406:	4604      	mov	r4, r0
 800a408:	2301      	movs	r3, #1
 800a40a:	e7f0      	b.n	800a3ee <_svfiprintf_r+0x192>
 800a40c:	ab03      	add	r3, sp, #12
 800a40e:	9300      	str	r3, [sp, #0]
 800a410:	462a      	mov	r2, r5
 800a412:	4b0f      	ldr	r3, [pc, #60]	; (800a450 <_svfiprintf_r+0x1f4>)
 800a414:	a904      	add	r1, sp, #16
 800a416:	4638      	mov	r0, r7
 800a418:	f7fd fea2 	bl	8008160 <_printf_float>
 800a41c:	1c42      	adds	r2, r0, #1
 800a41e:	4606      	mov	r6, r0
 800a420:	d1d6      	bne.n	800a3d0 <_svfiprintf_r+0x174>
 800a422:	89ab      	ldrh	r3, [r5, #12]
 800a424:	065b      	lsls	r3, r3, #25
 800a426:	f53f af2d 	bmi.w	800a284 <_svfiprintf_r+0x28>
 800a42a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a42c:	b01d      	add	sp, #116	; 0x74
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	ab03      	add	r3, sp, #12
 800a434:	9300      	str	r3, [sp, #0]
 800a436:	462a      	mov	r2, r5
 800a438:	4b05      	ldr	r3, [pc, #20]	; (800a450 <_svfiprintf_r+0x1f4>)
 800a43a:	a904      	add	r1, sp, #16
 800a43c:	4638      	mov	r0, r7
 800a43e:	f7fe f917 	bl	8008670 <_printf_i>
 800a442:	e7eb      	b.n	800a41c <_svfiprintf_r+0x1c0>
 800a444:	0800af6c 	.word	0x0800af6c
 800a448:	0800af76 	.word	0x0800af76
 800a44c:	08008161 	.word	0x08008161
 800a450:	0800a1a9 	.word	0x0800a1a9
 800a454:	0800af72 	.word	0x0800af72

0800a458 <__sflush_r>:
 800a458:	898a      	ldrh	r2, [r1, #12]
 800a45a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a45e:	4605      	mov	r5, r0
 800a460:	0710      	lsls	r0, r2, #28
 800a462:	460c      	mov	r4, r1
 800a464:	d458      	bmi.n	800a518 <__sflush_r+0xc0>
 800a466:	684b      	ldr	r3, [r1, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	dc05      	bgt.n	800a478 <__sflush_r+0x20>
 800a46c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dc02      	bgt.n	800a478 <__sflush_r+0x20>
 800a472:	2000      	movs	r0, #0
 800a474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a47a:	2e00      	cmp	r6, #0
 800a47c:	d0f9      	beq.n	800a472 <__sflush_r+0x1a>
 800a47e:	2300      	movs	r3, #0
 800a480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a484:	682f      	ldr	r7, [r5, #0]
 800a486:	6a21      	ldr	r1, [r4, #32]
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	d032      	beq.n	800a4f2 <__sflush_r+0x9a>
 800a48c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a48e:	89a3      	ldrh	r3, [r4, #12]
 800a490:	075a      	lsls	r2, r3, #29
 800a492:	d505      	bpl.n	800a4a0 <__sflush_r+0x48>
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	1ac0      	subs	r0, r0, r3
 800a498:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a49a:	b10b      	cbz	r3, 800a4a0 <__sflush_r+0x48>
 800a49c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a49e:	1ac0      	subs	r0, r0, r3
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	4602      	mov	r2, r0
 800a4a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4a6:	6a21      	ldr	r1, [r4, #32]
 800a4a8:	4628      	mov	r0, r5
 800a4aa:	47b0      	blx	r6
 800a4ac:	1c43      	adds	r3, r0, #1
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	d106      	bne.n	800a4c0 <__sflush_r+0x68>
 800a4b2:	6829      	ldr	r1, [r5, #0]
 800a4b4:	291d      	cmp	r1, #29
 800a4b6:	d82b      	bhi.n	800a510 <__sflush_r+0xb8>
 800a4b8:	4a29      	ldr	r2, [pc, #164]	; (800a560 <__sflush_r+0x108>)
 800a4ba:	410a      	asrs	r2, r1
 800a4bc:	07d6      	lsls	r6, r2, #31
 800a4be:	d427      	bmi.n	800a510 <__sflush_r+0xb8>
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	6062      	str	r2, [r4, #4]
 800a4c4:	04d9      	lsls	r1, r3, #19
 800a4c6:	6922      	ldr	r2, [r4, #16]
 800a4c8:	6022      	str	r2, [r4, #0]
 800a4ca:	d504      	bpl.n	800a4d6 <__sflush_r+0x7e>
 800a4cc:	1c42      	adds	r2, r0, #1
 800a4ce:	d101      	bne.n	800a4d4 <__sflush_r+0x7c>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b903      	cbnz	r3, 800a4d6 <__sflush_r+0x7e>
 800a4d4:	6560      	str	r0, [r4, #84]	; 0x54
 800a4d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4d8:	602f      	str	r7, [r5, #0]
 800a4da:	2900      	cmp	r1, #0
 800a4dc:	d0c9      	beq.n	800a472 <__sflush_r+0x1a>
 800a4de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	d002      	beq.n	800a4ec <__sflush_r+0x94>
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f7ff f9e2 	bl	80098b0 <_free_r>
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	6360      	str	r0, [r4, #52]	; 0x34
 800a4f0:	e7c0      	b.n	800a474 <__sflush_r+0x1c>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	47b0      	blx	r6
 800a4f8:	1c41      	adds	r1, r0, #1
 800a4fa:	d1c8      	bne.n	800a48e <__sflush_r+0x36>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0c5      	beq.n	800a48e <__sflush_r+0x36>
 800a502:	2b1d      	cmp	r3, #29
 800a504:	d001      	beq.n	800a50a <__sflush_r+0xb2>
 800a506:	2b16      	cmp	r3, #22
 800a508:	d101      	bne.n	800a50e <__sflush_r+0xb6>
 800a50a:	602f      	str	r7, [r5, #0]
 800a50c:	e7b1      	b.n	800a472 <__sflush_r+0x1a>
 800a50e:	89a3      	ldrh	r3, [r4, #12]
 800a510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a514:	81a3      	strh	r3, [r4, #12]
 800a516:	e7ad      	b.n	800a474 <__sflush_r+0x1c>
 800a518:	690f      	ldr	r7, [r1, #16]
 800a51a:	2f00      	cmp	r7, #0
 800a51c:	d0a9      	beq.n	800a472 <__sflush_r+0x1a>
 800a51e:	0793      	lsls	r3, r2, #30
 800a520:	680e      	ldr	r6, [r1, #0]
 800a522:	bf08      	it	eq
 800a524:	694b      	ldreq	r3, [r1, #20]
 800a526:	600f      	str	r7, [r1, #0]
 800a528:	bf18      	it	ne
 800a52a:	2300      	movne	r3, #0
 800a52c:	eba6 0807 	sub.w	r8, r6, r7
 800a530:	608b      	str	r3, [r1, #8]
 800a532:	f1b8 0f00 	cmp.w	r8, #0
 800a536:	dd9c      	ble.n	800a472 <__sflush_r+0x1a>
 800a538:	6a21      	ldr	r1, [r4, #32]
 800a53a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a53c:	4643      	mov	r3, r8
 800a53e:	463a      	mov	r2, r7
 800a540:	4628      	mov	r0, r5
 800a542:	47b0      	blx	r6
 800a544:	2800      	cmp	r0, #0
 800a546:	dc06      	bgt.n	800a556 <__sflush_r+0xfe>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a54e:	81a3      	strh	r3, [r4, #12]
 800a550:	f04f 30ff 	mov.w	r0, #4294967295
 800a554:	e78e      	b.n	800a474 <__sflush_r+0x1c>
 800a556:	4407      	add	r7, r0
 800a558:	eba8 0800 	sub.w	r8, r8, r0
 800a55c:	e7e9      	b.n	800a532 <__sflush_r+0xda>
 800a55e:	bf00      	nop
 800a560:	dfbffffe 	.word	0xdfbffffe

0800a564 <_fflush_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	690b      	ldr	r3, [r1, #16]
 800a568:	4605      	mov	r5, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	b913      	cbnz	r3, 800a574 <_fflush_r+0x10>
 800a56e:	2500      	movs	r5, #0
 800a570:	4628      	mov	r0, r5
 800a572:	bd38      	pop	{r3, r4, r5, pc}
 800a574:	b118      	cbz	r0, 800a57e <_fflush_r+0x1a>
 800a576:	6a03      	ldr	r3, [r0, #32]
 800a578:	b90b      	cbnz	r3, 800a57e <_fflush_r+0x1a>
 800a57a:	f7fe fa27 	bl	80089cc <__sinit>
 800a57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d0f3      	beq.n	800a56e <_fflush_r+0xa>
 800a586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a588:	07d0      	lsls	r0, r2, #31
 800a58a:	d404      	bmi.n	800a596 <_fflush_r+0x32>
 800a58c:	0599      	lsls	r1, r3, #22
 800a58e:	d402      	bmi.n	800a596 <_fflush_r+0x32>
 800a590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a592:	f7fe fb88 	bl	8008ca6 <__retarget_lock_acquire_recursive>
 800a596:	4628      	mov	r0, r5
 800a598:	4621      	mov	r1, r4
 800a59a:	f7ff ff5d 	bl	800a458 <__sflush_r>
 800a59e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5a0:	07da      	lsls	r2, r3, #31
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	d4e4      	bmi.n	800a570 <_fflush_r+0xc>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	059b      	lsls	r3, r3, #22
 800a5aa:	d4e1      	bmi.n	800a570 <_fflush_r+0xc>
 800a5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ae:	f7fe fb7b 	bl	8008ca8 <__retarget_lock_release_recursive>
 800a5b2:	e7dd      	b.n	800a570 <_fflush_r+0xc>

0800a5b4 <memmove>:
 800a5b4:	4288      	cmp	r0, r1
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	eb01 0402 	add.w	r4, r1, r2
 800a5bc:	d902      	bls.n	800a5c4 <memmove+0x10>
 800a5be:	4284      	cmp	r4, r0
 800a5c0:	4623      	mov	r3, r4
 800a5c2:	d807      	bhi.n	800a5d4 <memmove+0x20>
 800a5c4:	1e43      	subs	r3, r0, #1
 800a5c6:	42a1      	cmp	r1, r4
 800a5c8:	d008      	beq.n	800a5dc <memmove+0x28>
 800a5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5d2:	e7f8      	b.n	800a5c6 <memmove+0x12>
 800a5d4:	4402      	add	r2, r0
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	428a      	cmp	r2, r1
 800a5da:	d100      	bne.n	800a5de <memmove+0x2a>
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5e6:	e7f7      	b.n	800a5d8 <memmove+0x24>

0800a5e8 <_sbrk_r>:
 800a5e8:	b538      	push	{r3, r4, r5, lr}
 800a5ea:	4d06      	ldr	r5, [pc, #24]	; (800a604 <_sbrk_r+0x1c>)
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	4608      	mov	r0, r1
 800a5f2:	602b      	str	r3, [r5, #0]
 800a5f4:	f7f7 f820 	bl	8001638 <_sbrk>
 800a5f8:	1c43      	adds	r3, r0, #1
 800a5fa:	d102      	bne.n	800a602 <_sbrk_r+0x1a>
 800a5fc:	682b      	ldr	r3, [r5, #0]
 800a5fe:	b103      	cbz	r3, 800a602 <_sbrk_r+0x1a>
 800a600:	6023      	str	r3, [r4, #0]
 800a602:	bd38      	pop	{r3, r4, r5, pc}
 800a604:	24004464 	.word	0x24004464

0800a608 <__assert_func>:
 800a608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a60a:	4614      	mov	r4, r2
 800a60c:	461a      	mov	r2, r3
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <__assert_func+0x2c>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4605      	mov	r5, r0
 800a614:	68d8      	ldr	r0, [r3, #12]
 800a616:	b14c      	cbz	r4, 800a62c <__assert_func+0x24>
 800a618:	4b07      	ldr	r3, [pc, #28]	; (800a638 <__assert_func+0x30>)
 800a61a:	9100      	str	r1, [sp, #0]
 800a61c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a620:	4906      	ldr	r1, [pc, #24]	; (800a63c <__assert_func+0x34>)
 800a622:	462b      	mov	r3, r5
 800a624:	f000 f872 	bl	800a70c <fiprintf>
 800a628:	f000 f882 	bl	800a730 <abort>
 800a62c:	4b04      	ldr	r3, [pc, #16]	; (800a640 <__assert_func+0x38>)
 800a62e:	461c      	mov	r4, r3
 800a630:	e7f3      	b.n	800a61a <__assert_func+0x12>
 800a632:	bf00      	nop
 800a634:	2400006c 	.word	0x2400006c
 800a638:	0800af87 	.word	0x0800af87
 800a63c:	0800af94 	.word	0x0800af94
 800a640:	0800afc2 	.word	0x0800afc2

0800a644 <_calloc_r>:
 800a644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a646:	fba1 2402 	umull	r2, r4, r1, r2
 800a64a:	b94c      	cbnz	r4, 800a660 <_calloc_r+0x1c>
 800a64c:	4611      	mov	r1, r2
 800a64e:	9201      	str	r2, [sp, #4]
 800a650:	f7ff f9a2 	bl	8009998 <_malloc_r>
 800a654:	9a01      	ldr	r2, [sp, #4]
 800a656:	4605      	mov	r5, r0
 800a658:	b930      	cbnz	r0, 800a668 <_calloc_r+0x24>
 800a65a:	4628      	mov	r0, r5
 800a65c:	b003      	add	sp, #12
 800a65e:	bd30      	pop	{r4, r5, pc}
 800a660:	220c      	movs	r2, #12
 800a662:	6002      	str	r2, [r0, #0]
 800a664:	2500      	movs	r5, #0
 800a666:	e7f8      	b.n	800a65a <_calloc_r+0x16>
 800a668:	4621      	mov	r1, r4
 800a66a:	f7fe fa48 	bl	8008afe <memset>
 800a66e:	e7f4      	b.n	800a65a <_calloc_r+0x16>

0800a670 <__ascii_mbtowc>:
 800a670:	b082      	sub	sp, #8
 800a672:	b901      	cbnz	r1, 800a676 <__ascii_mbtowc+0x6>
 800a674:	a901      	add	r1, sp, #4
 800a676:	b142      	cbz	r2, 800a68a <__ascii_mbtowc+0x1a>
 800a678:	b14b      	cbz	r3, 800a68e <__ascii_mbtowc+0x1e>
 800a67a:	7813      	ldrb	r3, [r2, #0]
 800a67c:	600b      	str	r3, [r1, #0]
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	1e10      	subs	r0, r2, #0
 800a682:	bf18      	it	ne
 800a684:	2001      	movne	r0, #1
 800a686:	b002      	add	sp, #8
 800a688:	4770      	bx	lr
 800a68a:	4610      	mov	r0, r2
 800a68c:	e7fb      	b.n	800a686 <__ascii_mbtowc+0x16>
 800a68e:	f06f 0001 	mvn.w	r0, #1
 800a692:	e7f8      	b.n	800a686 <__ascii_mbtowc+0x16>

0800a694 <_realloc_r>:
 800a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a698:	4680      	mov	r8, r0
 800a69a:	4614      	mov	r4, r2
 800a69c:	460e      	mov	r6, r1
 800a69e:	b921      	cbnz	r1, 800a6aa <_realloc_r+0x16>
 800a6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a4:	4611      	mov	r1, r2
 800a6a6:	f7ff b977 	b.w	8009998 <_malloc_r>
 800a6aa:	b92a      	cbnz	r2, 800a6b8 <_realloc_r+0x24>
 800a6ac:	f7ff f900 	bl	80098b0 <_free_r>
 800a6b0:	4625      	mov	r5, r4
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6b8:	f000 f841 	bl	800a73e <_malloc_usable_size_r>
 800a6bc:	4284      	cmp	r4, r0
 800a6be:	4607      	mov	r7, r0
 800a6c0:	d802      	bhi.n	800a6c8 <_realloc_r+0x34>
 800a6c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6c6:	d812      	bhi.n	800a6ee <_realloc_r+0x5a>
 800a6c8:	4621      	mov	r1, r4
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	f7ff f964 	bl	8009998 <_malloc_r>
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	d0ed      	beq.n	800a6b2 <_realloc_r+0x1e>
 800a6d6:	42bc      	cmp	r4, r7
 800a6d8:	4622      	mov	r2, r4
 800a6da:	4631      	mov	r1, r6
 800a6dc:	bf28      	it	cs
 800a6de:	463a      	movcs	r2, r7
 800a6e0:	f7fe fae3 	bl	8008caa <memcpy>
 800a6e4:	4631      	mov	r1, r6
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	f7ff f8e2 	bl	80098b0 <_free_r>
 800a6ec:	e7e1      	b.n	800a6b2 <_realloc_r+0x1e>
 800a6ee:	4635      	mov	r5, r6
 800a6f0:	e7df      	b.n	800a6b2 <_realloc_r+0x1e>

0800a6f2 <__ascii_wctomb>:
 800a6f2:	b149      	cbz	r1, 800a708 <__ascii_wctomb+0x16>
 800a6f4:	2aff      	cmp	r2, #255	; 0xff
 800a6f6:	bf85      	ittet	hi
 800a6f8:	238a      	movhi	r3, #138	; 0x8a
 800a6fa:	6003      	strhi	r3, [r0, #0]
 800a6fc:	700a      	strbls	r2, [r1, #0]
 800a6fe:	f04f 30ff 	movhi.w	r0, #4294967295
 800a702:	bf98      	it	ls
 800a704:	2001      	movls	r0, #1
 800a706:	4770      	bx	lr
 800a708:	4608      	mov	r0, r1
 800a70a:	4770      	bx	lr

0800a70c <fiprintf>:
 800a70c:	b40e      	push	{r1, r2, r3}
 800a70e:	b503      	push	{r0, r1, lr}
 800a710:	4601      	mov	r1, r0
 800a712:	ab03      	add	r3, sp, #12
 800a714:	4805      	ldr	r0, [pc, #20]	; (800a72c <fiprintf+0x20>)
 800a716:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71a:	6800      	ldr	r0, [r0, #0]
 800a71c:	9301      	str	r3, [sp, #4]
 800a71e:	f000 f83f 	bl	800a7a0 <_vfiprintf_r>
 800a722:	b002      	add	sp, #8
 800a724:	f85d eb04 	ldr.w	lr, [sp], #4
 800a728:	b003      	add	sp, #12
 800a72a:	4770      	bx	lr
 800a72c:	2400006c 	.word	0x2400006c

0800a730 <abort>:
 800a730:	b508      	push	{r3, lr}
 800a732:	2006      	movs	r0, #6
 800a734:	f000 fa0c 	bl	800ab50 <raise>
 800a738:	2001      	movs	r0, #1
 800a73a:	f7f6 ff06 	bl	800154a <_exit>

0800a73e <_malloc_usable_size_r>:
 800a73e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a742:	1f18      	subs	r0, r3, #4
 800a744:	2b00      	cmp	r3, #0
 800a746:	bfbc      	itt	lt
 800a748:	580b      	ldrlt	r3, [r1, r0]
 800a74a:	18c0      	addlt	r0, r0, r3
 800a74c:	4770      	bx	lr

0800a74e <__sfputc_r>:
 800a74e:	6893      	ldr	r3, [r2, #8]
 800a750:	3b01      	subs	r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	b410      	push	{r4}
 800a756:	6093      	str	r3, [r2, #8]
 800a758:	da08      	bge.n	800a76c <__sfputc_r+0x1e>
 800a75a:	6994      	ldr	r4, [r2, #24]
 800a75c:	42a3      	cmp	r3, r4
 800a75e:	db01      	blt.n	800a764 <__sfputc_r+0x16>
 800a760:	290a      	cmp	r1, #10
 800a762:	d103      	bne.n	800a76c <__sfputc_r+0x1e>
 800a764:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a768:	f000 b934 	b.w	800a9d4 <__swbuf_r>
 800a76c:	6813      	ldr	r3, [r2, #0]
 800a76e:	1c58      	adds	r0, r3, #1
 800a770:	6010      	str	r0, [r2, #0]
 800a772:	7019      	strb	r1, [r3, #0]
 800a774:	4608      	mov	r0, r1
 800a776:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <__sfputs_r>:
 800a77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	4614      	mov	r4, r2
 800a784:	18d5      	adds	r5, r2, r3
 800a786:	42ac      	cmp	r4, r5
 800a788:	d101      	bne.n	800a78e <__sfputs_r+0x12>
 800a78a:	2000      	movs	r0, #0
 800a78c:	e007      	b.n	800a79e <__sfputs_r+0x22>
 800a78e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a792:	463a      	mov	r2, r7
 800a794:	4630      	mov	r0, r6
 800a796:	f7ff ffda 	bl	800a74e <__sfputc_r>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d1f3      	bne.n	800a786 <__sfputs_r+0xa>
 800a79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7a0 <_vfiprintf_r>:
 800a7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a4:	460d      	mov	r5, r1
 800a7a6:	b09d      	sub	sp, #116	; 0x74
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	4698      	mov	r8, r3
 800a7ac:	4606      	mov	r6, r0
 800a7ae:	b118      	cbz	r0, 800a7b8 <_vfiprintf_r+0x18>
 800a7b0:	6a03      	ldr	r3, [r0, #32]
 800a7b2:	b90b      	cbnz	r3, 800a7b8 <_vfiprintf_r+0x18>
 800a7b4:	f7fe f90a 	bl	80089cc <__sinit>
 800a7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ba:	07d9      	lsls	r1, r3, #31
 800a7bc:	d405      	bmi.n	800a7ca <_vfiprintf_r+0x2a>
 800a7be:	89ab      	ldrh	r3, [r5, #12]
 800a7c0:	059a      	lsls	r2, r3, #22
 800a7c2:	d402      	bmi.n	800a7ca <_vfiprintf_r+0x2a>
 800a7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7c6:	f7fe fa6e 	bl	8008ca6 <__retarget_lock_acquire_recursive>
 800a7ca:	89ab      	ldrh	r3, [r5, #12]
 800a7cc:	071b      	lsls	r3, r3, #28
 800a7ce:	d501      	bpl.n	800a7d4 <_vfiprintf_r+0x34>
 800a7d0:	692b      	ldr	r3, [r5, #16]
 800a7d2:	b99b      	cbnz	r3, 800a7fc <_vfiprintf_r+0x5c>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4630      	mov	r0, r6
 800a7d8:	f000 f93a 	bl	800aa50 <__swsetup_r>
 800a7dc:	b170      	cbz	r0, 800a7fc <_vfiprintf_r+0x5c>
 800a7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7e0:	07dc      	lsls	r4, r3, #31
 800a7e2:	d504      	bpl.n	800a7ee <_vfiprintf_r+0x4e>
 800a7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7e8:	b01d      	add	sp, #116	; 0x74
 800a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ee:	89ab      	ldrh	r3, [r5, #12]
 800a7f0:	0598      	lsls	r0, r3, #22
 800a7f2:	d4f7      	bmi.n	800a7e4 <_vfiprintf_r+0x44>
 800a7f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7f6:	f7fe fa57 	bl	8008ca8 <__retarget_lock_release_recursive>
 800a7fa:	e7f3      	b.n	800a7e4 <_vfiprintf_r+0x44>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a800:	2320      	movs	r3, #32
 800a802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a806:	f8cd 800c 	str.w	r8, [sp, #12]
 800a80a:	2330      	movs	r3, #48	; 0x30
 800a80c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a9c0 <_vfiprintf_r+0x220>
 800a810:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a814:	f04f 0901 	mov.w	r9, #1
 800a818:	4623      	mov	r3, r4
 800a81a:	469a      	mov	sl, r3
 800a81c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a820:	b10a      	cbz	r2, 800a826 <_vfiprintf_r+0x86>
 800a822:	2a25      	cmp	r2, #37	; 0x25
 800a824:	d1f9      	bne.n	800a81a <_vfiprintf_r+0x7a>
 800a826:	ebba 0b04 	subs.w	fp, sl, r4
 800a82a:	d00b      	beq.n	800a844 <_vfiprintf_r+0xa4>
 800a82c:	465b      	mov	r3, fp
 800a82e:	4622      	mov	r2, r4
 800a830:	4629      	mov	r1, r5
 800a832:	4630      	mov	r0, r6
 800a834:	f7ff ffa2 	bl	800a77c <__sfputs_r>
 800a838:	3001      	adds	r0, #1
 800a83a:	f000 80a9 	beq.w	800a990 <_vfiprintf_r+0x1f0>
 800a83e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a840:	445a      	add	r2, fp
 800a842:	9209      	str	r2, [sp, #36]	; 0x24
 800a844:	f89a 3000 	ldrb.w	r3, [sl]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 80a1 	beq.w	800a990 <_vfiprintf_r+0x1f0>
 800a84e:	2300      	movs	r3, #0
 800a850:	f04f 32ff 	mov.w	r2, #4294967295
 800a854:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a858:	f10a 0a01 	add.w	sl, sl, #1
 800a85c:	9304      	str	r3, [sp, #16]
 800a85e:	9307      	str	r3, [sp, #28]
 800a860:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a864:	931a      	str	r3, [sp, #104]	; 0x68
 800a866:	4654      	mov	r4, sl
 800a868:	2205      	movs	r2, #5
 800a86a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a86e:	4854      	ldr	r0, [pc, #336]	; (800a9c0 <_vfiprintf_r+0x220>)
 800a870:	f7f5 fd4e 	bl	8000310 <memchr>
 800a874:	9a04      	ldr	r2, [sp, #16]
 800a876:	b9d8      	cbnz	r0, 800a8b0 <_vfiprintf_r+0x110>
 800a878:	06d1      	lsls	r1, r2, #27
 800a87a:	bf44      	itt	mi
 800a87c:	2320      	movmi	r3, #32
 800a87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a882:	0713      	lsls	r3, r2, #28
 800a884:	bf44      	itt	mi
 800a886:	232b      	movmi	r3, #43	; 0x2b
 800a888:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a88c:	f89a 3000 	ldrb.w	r3, [sl]
 800a890:	2b2a      	cmp	r3, #42	; 0x2a
 800a892:	d015      	beq.n	800a8c0 <_vfiprintf_r+0x120>
 800a894:	9a07      	ldr	r2, [sp, #28]
 800a896:	4654      	mov	r4, sl
 800a898:	2000      	movs	r0, #0
 800a89a:	f04f 0c0a 	mov.w	ip, #10
 800a89e:	4621      	mov	r1, r4
 800a8a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8a4:	3b30      	subs	r3, #48	; 0x30
 800a8a6:	2b09      	cmp	r3, #9
 800a8a8:	d94d      	bls.n	800a946 <_vfiprintf_r+0x1a6>
 800a8aa:	b1b0      	cbz	r0, 800a8da <_vfiprintf_r+0x13a>
 800a8ac:	9207      	str	r2, [sp, #28]
 800a8ae:	e014      	b.n	800a8da <_vfiprintf_r+0x13a>
 800a8b0:	eba0 0308 	sub.w	r3, r0, r8
 800a8b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	46a2      	mov	sl, r4
 800a8be:	e7d2      	b.n	800a866 <_vfiprintf_r+0xc6>
 800a8c0:	9b03      	ldr	r3, [sp, #12]
 800a8c2:	1d19      	adds	r1, r3, #4
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	9103      	str	r1, [sp, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfbb      	ittet	lt
 800a8cc:	425b      	neglt	r3, r3
 800a8ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a8d2:	9307      	strge	r3, [sp, #28]
 800a8d4:	9307      	strlt	r3, [sp, #28]
 800a8d6:	bfb8      	it	lt
 800a8d8:	9204      	strlt	r2, [sp, #16]
 800a8da:	7823      	ldrb	r3, [r4, #0]
 800a8dc:	2b2e      	cmp	r3, #46	; 0x2e
 800a8de:	d10c      	bne.n	800a8fa <_vfiprintf_r+0x15a>
 800a8e0:	7863      	ldrb	r3, [r4, #1]
 800a8e2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8e4:	d134      	bne.n	800a950 <_vfiprintf_r+0x1b0>
 800a8e6:	9b03      	ldr	r3, [sp, #12]
 800a8e8:	1d1a      	adds	r2, r3, #4
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	9203      	str	r2, [sp, #12]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	bfb8      	it	lt
 800a8f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a8f6:	3402      	adds	r4, #2
 800a8f8:	9305      	str	r3, [sp, #20]
 800a8fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a9d0 <_vfiprintf_r+0x230>
 800a8fe:	7821      	ldrb	r1, [r4, #0]
 800a900:	2203      	movs	r2, #3
 800a902:	4650      	mov	r0, sl
 800a904:	f7f5 fd04 	bl	8000310 <memchr>
 800a908:	b138      	cbz	r0, 800a91a <_vfiprintf_r+0x17a>
 800a90a:	9b04      	ldr	r3, [sp, #16]
 800a90c:	eba0 000a 	sub.w	r0, r0, sl
 800a910:	2240      	movs	r2, #64	; 0x40
 800a912:	4082      	lsls	r2, r0
 800a914:	4313      	orrs	r3, r2
 800a916:	3401      	adds	r4, #1
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91e:	4829      	ldr	r0, [pc, #164]	; (800a9c4 <_vfiprintf_r+0x224>)
 800a920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a924:	2206      	movs	r2, #6
 800a926:	f7f5 fcf3 	bl	8000310 <memchr>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d03f      	beq.n	800a9ae <_vfiprintf_r+0x20e>
 800a92e:	4b26      	ldr	r3, [pc, #152]	; (800a9c8 <_vfiprintf_r+0x228>)
 800a930:	bb1b      	cbnz	r3, 800a97a <_vfiprintf_r+0x1da>
 800a932:	9b03      	ldr	r3, [sp, #12]
 800a934:	3307      	adds	r3, #7
 800a936:	f023 0307 	bic.w	r3, r3, #7
 800a93a:	3308      	adds	r3, #8
 800a93c:	9303      	str	r3, [sp, #12]
 800a93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a940:	443b      	add	r3, r7
 800a942:	9309      	str	r3, [sp, #36]	; 0x24
 800a944:	e768      	b.n	800a818 <_vfiprintf_r+0x78>
 800a946:	fb0c 3202 	mla	r2, ip, r2, r3
 800a94a:	460c      	mov	r4, r1
 800a94c:	2001      	movs	r0, #1
 800a94e:	e7a6      	b.n	800a89e <_vfiprintf_r+0xfe>
 800a950:	2300      	movs	r3, #0
 800a952:	3401      	adds	r4, #1
 800a954:	9305      	str	r3, [sp, #20]
 800a956:	4619      	mov	r1, r3
 800a958:	f04f 0c0a 	mov.w	ip, #10
 800a95c:	4620      	mov	r0, r4
 800a95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a962:	3a30      	subs	r2, #48	; 0x30
 800a964:	2a09      	cmp	r2, #9
 800a966:	d903      	bls.n	800a970 <_vfiprintf_r+0x1d0>
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d0c6      	beq.n	800a8fa <_vfiprintf_r+0x15a>
 800a96c:	9105      	str	r1, [sp, #20]
 800a96e:	e7c4      	b.n	800a8fa <_vfiprintf_r+0x15a>
 800a970:	fb0c 2101 	mla	r1, ip, r1, r2
 800a974:	4604      	mov	r4, r0
 800a976:	2301      	movs	r3, #1
 800a978:	e7f0      	b.n	800a95c <_vfiprintf_r+0x1bc>
 800a97a:	ab03      	add	r3, sp, #12
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	462a      	mov	r2, r5
 800a980:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <_vfiprintf_r+0x22c>)
 800a982:	a904      	add	r1, sp, #16
 800a984:	4630      	mov	r0, r6
 800a986:	f7fd fbeb 	bl	8008160 <_printf_float>
 800a98a:	4607      	mov	r7, r0
 800a98c:	1c78      	adds	r0, r7, #1
 800a98e:	d1d6      	bne.n	800a93e <_vfiprintf_r+0x19e>
 800a990:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a992:	07d9      	lsls	r1, r3, #31
 800a994:	d405      	bmi.n	800a9a2 <_vfiprintf_r+0x202>
 800a996:	89ab      	ldrh	r3, [r5, #12]
 800a998:	059a      	lsls	r2, r3, #22
 800a99a:	d402      	bmi.n	800a9a2 <_vfiprintf_r+0x202>
 800a99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a99e:	f7fe f983 	bl	8008ca8 <__retarget_lock_release_recursive>
 800a9a2:	89ab      	ldrh	r3, [r5, #12]
 800a9a4:	065b      	lsls	r3, r3, #25
 800a9a6:	f53f af1d 	bmi.w	800a7e4 <_vfiprintf_r+0x44>
 800a9aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9ac:	e71c      	b.n	800a7e8 <_vfiprintf_r+0x48>
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <_vfiprintf_r+0x22c>)
 800a9b6:	a904      	add	r1, sp, #16
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7fd fe59 	bl	8008670 <_printf_i>
 800a9be:	e7e4      	b.n	800a98a <_vfiprintf_r+0x1ea>
 800a9c0:	0800af6c 	.word	0x0800af6c
 800a9c4:	0800af76 	.word	0x0800af76
 800a9c8:	08008161 	.word	0x08008161
 800a9cc:	0800a77d 	.word	0x0800a77d
 800a9d0:	0800af72 	.word	0x0800af72

0800a9d4 <__swbuf_r>:
 800a9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9d6:	460e      	mov	r6, r1
 800a9d8:	4614      	mov	r4, r2
 800a9da:	4605      	mov	r5, r0
 800a9dc:	b118      	cbz	r0, 800a9e6 <__swbuf_r+0x12>
 800a9de:	6a03      	ldr	r3, [r0, #32]
 800a9e0:	b90b      	cbnz	r3, 800a9e6 <__swbuf_r+0x12>
 800a9e2:	f7fd fff3 	bl	80089cc <__sinit>
 800a9e6:	69a3      	ldr	r3, [r4, #24]
 800a9e8:	60a3      	str	r3, [r4, #8]
 800a9ea:	89a3      	ldrh	r3, [r4, #12]
 800a9ec:	071a      	lsls	r2, r3, #28
 800a9ee:	d525      	bpl.n	800aa3c <__swbuf_r+0x68>
 800a9f0:	6923      	ldr	r3, [r4, #16]
 800a9f2:	b31b      	cbz	r3, 800aa3c <__swbuf_r+0x68>
 800a9f4:	6823      	ldr	r3, [r4, #0]
 800a9f6:	6922      	ldr	r2, [r4, #16]
 800a9f8:	1a98      	subs	r0, r3, r2
 800a9fa:	6963      	ldr	r3, [r4, #20]
 800a9fc:	b2f6      	uxtb	r6, r6
 800a9fe:	4283      	cmp	r3, r0
 800aa00:	4637      	mov	r7, r6
 800aa02:	dc04      	bgt.n	800aa0e <__swbuf_r+0x3a>
 800aa04:	4621      	mov	r1, r4
 800aa06:	4628      	mov	r0, r5
 800aa08:	f7ff fdac 	bl	800a564 <_fflush_r>
 800aa0c:	b9e0      	cbnz	r0, 800aa48 <__swbuf_r+0x74>
 800aa0e:	68a3      	ldr	r3, [r4, #8]
 800aa10:	3b01      	subs	r3, #1
 800aa12:	60a3      	str	r3, [r4, #8]
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	6022      	str	r2, [r4, #0]
 800aa1a:	701e      	strb	r6, [r3, #0]
 800aa1c:	6962      	ldr	r2, [r4, #20]
 800aa1e:	1c43      	adds	r3, r0, #1
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d004      	beq.n	800aa2e <__swbuf_r+0x5a>
 800aa24:	89a3      	ldrh	r3, [r4, #12]
 800aa26:	07db      	lsls	r3, r3, #31
 800aa28:	d506      	bpl.n	800aa38 <__swbuf_r+0x64>
 800aa2a:	2e0a      	cmp	r6, #10
 800aa2c:	d104      	bne.n	800aa38 <__swbuf_r+0x64>
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4628      	mov	r0, r5
 800aa32:	f7ff fd97 	bl	800a564 <_fflush_r>
 800aa36:	b938      	cbnz	r0, 800aa48 <__swbuf_r+0x74>
 800aa38:	4638      	mov	r0, r7
 800aa3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa3c:	4621      	mov	r1, r4
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f000 f806 	bl	800aa50 <__swsetup_r>
 800aa44:	2800      	cmp	r0, #0
 800aa46:	d0d5      	beq.n	800a9f4 <__swbuf_r+0x20>
 800aa48:	f04f 37ff 	mov.w	r7, #4294967295
 800aa4c:	e7f4      	b.n	800aa38 <__swbuf_r+0x64>
	...

0800aa50 <__swsetup_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4b2a      	ldr	r3, [pc, #168]	; (800aafc <__swsetup_r+0xac>)
 800aa54:	4605      	mov	r5, r0
 800aa56:	6818      	ldr	r0, [r3, #0]
 800aa58:	460c      	mov	r4, r1
 800aa5a:	b118      	cbz	r0, 800aa64 <__swsetup_r+0x14>
 800aa5c:	6a03      	ldr	r3, [r0, #32]
 800aa5e:	b90b      	cbnz	r3, 800aa64 <__swsetup_r+0x14>
 800aa60:	f7fd ffb4 	bl	80089cc <__sinit>
 800aa64:	89a3      	ldrh	r3, [r4, #12]
 800aa66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa6a:	0718      	lsls	r0, r3, #28
 800aa6c:	d422      	bmi.n	800aab4 <__swsetup_r+0x64>
 800aa6e:	06d9      	lsls	r1, r3, #27
 800aa70:	d407      	bmi.n	800aa82 <__swsetup_r+0x32>
 800aa72:	2309      	movs	r3, #9
 800aa74:	602b      	str	r3, [r5, #0]
 800aa76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa7a:	81a3      	strh	r3, [r4, #12]
 800aa7c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa80:	e034      	b.n	800aaec <__swsetup_r+0x9c>
 800aa82:	0758      	lsls	r0, r3, #29
 800aa84:	d512      	bpl.n	800aaac <__swsetup_r+0x5c>
 800aa86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa88:	b141      	cbz	r1, 800aa9c <__swsetup_r+0x4c>
 800aa8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa8e:	4299      	cmp	r1, r3
 800aa90:	d002      	beq.n	800aa98 <__swsetup_r+0x48>
 800aa92:	4628      	mov	r0, r5
 800aa94:	f7fe ff0c 	bl	80098b0 <_free_r>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	6363      	str	r3, [r4, #52]	; 0x34
 800aa9c:	89a3      	ldrh	r3, [r4, #12]
 800aa9e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aaa2:	81a3      	strh	r3, [r4, #12]
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	6063      	str	r3, [r4, #4]
 800aaa8:	6923      	ldr	r3, [r4, #16]
 800aaaa:	6023      	str	r3, [r4, #0]
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f043 0308 	orr.w	r3, r3, #8
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	b94b      	cbnz	r3, 800aacc <__swsetup_r+0x7c>
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aabe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aac2:	d003      	beq.n	800aacc <__swsetup_r+0x7c>
 800aac4:	4621      	mov	r1, r4
 800aac6:	4628      	mov	r0, r5
 800aac8:	f000 f884 	bl	800abd4 <__smakebuf_r>
 800aacc:	89a0      	ldrh	r0, [r4, #12]
 800aace:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aad2:	f010 0301 	ands.w	r3, r0, #1
 800aad6:	d00a      	beq.n	800aaee <__swsetup_r+0x9e>
 800aad8:	2300      	movs	r3, #0
 800aada:	60a3      	str	r3, [r4, #8]
 800aadc:	6963      	ldr	r3, [r4, #20]
 800aade:	425b      	negs	r3, r3
 800aae0:	61a3      	str	r3, [r4, #24]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	b943      	cbnz	r3, 800aaf8 <__swsetup_r+0xa8>
 800aae6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aaea:	d1c4      	bne.n	800aa76 <__swsetup_r+0x26>
 800aaec:	bd38      	pop	{r3, r4, r5, pc}
 800aaee:	0781      	lsls	r1, r0, #30
 800aaf0:	bf58      	it	pl
 800aaf2:	6963      	ldrpl	r3, [r4, #20]
 800aaf4:	60a3      	str	r3, [r4, #8]
 800aaf6:	e7f4      	b.n	800aae2 <__swsetup_r+0x92>
 800aaf8:	2000      	movs	r0, #0
 800aafa:	e7f7      	b.n	800aaec <__swsetup_r+0x9c>
 800aafc:	2400006c 	.word	0x2400006c

0800ab00 <_raise_r>:
 800ab00:	291f      	cmp	r1, #31
 800ab02:	b538      	push	{r3, r4, r5, lr}
 800ab04:	4604      	mov	r4, r0
 800ab06:	460d      	mov	r5, r1
 800ab08:	d904      	bls.n	800ab14 <_raise_r+0x14>
 800ab0a:	2316      	movs	r3, #22
 800ab0c:	6003      	str	r3, [r0, #0]
 800ab0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ab16:	b112      	cbz	r2, 800ab1e <_raise_r+0x1e>
 800ab18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab1c:	b94b      	cbnz	r3, 800ab32 <_raise_r+0x32>
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f000 f830 	bl	800ab84 <_getpid_r>
 800ab24:	462a      	mov	r2, r5
 800ab26:	4601      	mov	r1, r0
 800ab28:	4620      	mov	r0, r4
 800ab2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab2e:	f000 b817 	b.w	800ab60 <_kill_r>
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d00a      	beq.n	800ab4c <_raise_r+0x4c>
 800ab36:	1c59      	adds	r1, r3, #1
 800ab38:	d103      	bne.n	800ab42 <_raise_r+0x42>
 800ab3a:	2316      	movs	r3, #22
 800ab3c:	6003      	str	r3, [r0, #0]
 800ab3e:	2001      	movs	r0, #1
 800ab40:	e7e7      	b.n	800ab12 <_raise_r+0x12>
 800ab42:	2400      	movs	r4, #0
 800ab44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab48:	4628      	mov	r0, r5
 800ab4a:	4798      	blx	r3
 800ab4c:	2000      	movs	r0, #0
 800ab4e:	e7e0      	b.n	800ab12 <_raise_r+0x12>

0800ab50 <raise>:
 800ab50:	4b02      	ldr	r3, [pc, #8]	; (800ab5c <raise+0xc>)
 800ab52:	4601      	mov	r1, r0
 800ab54:	6818      	ldr	r0, [r3, #0]
 800ab56:	f7ff bfd3 	b.w	800ab00 <_raise_r>
 800ab5a:	bf00      	nop
 800ab5c:	2400006c 	.word	0x2400006c

0800ab60 <_kill_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	4d07      	ldr	r5, [pc, #28]	; (800ab80 <_kill_r+0x20>)
 800ab64:	2300      	movs	r3, #0
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	602b      	str	r3, [r5, #0]
 800ab6e:	f7f6 fcdc 	bl	800152a <_kill>
 800ab72:	1c43      	adds	r3, r0, #1
 800ab74:	d102      	bne.n	800ab7c <_kill_r+0x1c>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	b103      	cbz	r3, 800ab7c <_kill_r+0x1c>
 800ab7a:	6023      	str	r3, [r4, #0]
 800ab7c:	bd38      	pop	{r3, r4, r5, pc}
 800ab7e:	bf00      	nop
 800ab80:	24004464 	.word	0x24004464

0800ab84 <_getpid_r>:
 800ab84:	f7f6 bcc9 	b.w	800151a <_getpid>

0800ab88 <__swhatbuf_r>:
 800ab88:	b570      	push	{r4, r5, r6, lr}
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab90:	2900      	cmp	r1, #0
 800ab92:	b096      	sub	sp, #88	; 0x58
 800ab94:	4615      	mov	r5, r2
 800ab96:	461e      	mov	r6, r3
 800ab98:	da0d      	bge.n	800abb6 <__swhatbuf_r+0x2e>
 800ab9a:	89a3      	ldrh	r3, [r4, #12]
 800ab9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aba0:	f04f 0100 	mov.w	r1, #0
 800aba4:	bf0c      	ite	eq
 800aba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800abaa:	2340      	movne	r3, #64	; 0x40
 800abac:	2000      	movs	r0, #0
 800abae:	6031      	str	r1, [r6, #0]
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	b016      	add	sp, #88	; 0x58
 800abb4:	bd70      	pop	{r4, r5, r6, pc}
 800abb6:	466a      	mov	r2, sp
 800abb8:	f000 f848 	bl	800ac4c <_fstat_r>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	dbec      	blt.n	800ab9a <__swhatbuf_r+0x12>
 800abc0:	9901      	ldr	r1, [sp, #4]
 800abc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800abc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800abca:	4259      	negs	r1, r3
 800abcc:	4159      	adcs	r1, r3
 800abce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abd2:	e7eb      	b.n	800abac <__swhatbuf_r+0x24>

0800abd4 <__smakebuf_r>:
 800abd4:	898b      	ldrh	r3, [r1, #12]
 800abd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abd8:	079d      	lsls	r5, r3, #30
 800abda:	4606      	mov	r6, r0
 800abdc:	460c      	mov	r4, r1
 800abde:	d507      	bpl.n	800abf0 <__smakebuf_r+0x1c>
 800abe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	6123      	str	r3, [r4, #16]
 800abe8:	2301      	movs	r3, #1
 800abea:	6163      	str	r3, [r4, #20]
 800abec:	b002      	add	sp, #8
 800abee:	bd70      	pop	{r4, r5, r6, pc}
 800abf0:	ab01      	add	r3, sp, #4
 800abf2:	466a      	mov	r2, sp
 800abf4:	f7ff ffc8 	bl	800ab88 <__swhatbuf_r>
 800abf8:	9900      	ldr	r1, [sp, #0]
 800abfa:	4605      	mov	r5, r0
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7fe fecb 	bl	8009998 <_malloc_r>
 800ac02:	b948      	cbnz	r0, 800ac18 <__smakebuf_r+0x44>
 800ac04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac08:	059a      	lsls	r2, r3, #22
 800ac0a:	d4ef      	bmi.n	800abec <__smakebuf_r+0x18>
 800ac0c:	f023 0303 	bic.w	r3, r3, #3
 800ac10:	f043 0302 	orr.w	r3, r3, #2
 800ac14:	81a3      	strh	r3, [r4, #12]
 800ac16:	e7e3      	b.n	800abe0 <__smakebuf_r+0xc>
 800ac18:	89a3      	ldrh	r3, [r4, #12]
 800ac1a:	6020      	str	r0, [r4, #0]
 800ac1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac20:	81a3      	strh	r3, [r4, #12]
 800ac22:	9b00      	ldr	r3, [sp, #0]
 800ac24:	6163      	str	r3, [r4, #20]
 800ac26:	9b01      	ldr	r3, [sp, #4]
 800ac28:	6120      	str	r0, [r4, #16]
 800ac2a:	b15b      	cbz	r3, 800ac44 <__smakebuf_r+0x70>
 800ac2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac30:	4630      	mov	r0, r6
 800ac32:	f000 f81d 	bl	800ac70 <_isatty_r>
 800ac36:	b128      	cbz	r0, 800ac44 <__smakebuf_r+0x70>
 800ac38:	89a3      	ldrh	r3, [r4, #12]
 800ac3a:	f023 0303 	bic.w	r3, r3, #3
 800ac3e:	f043 0301 	orr.w	r3, r3, #1
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	431d      	orrs	r5, r3
 800ac48:	81a5      	strh	r5, [r4, #12]
 800ac4a:	e7cf      	b.n	800abec <__smakebuf_r+0x18>

0800ac4c <_fstat_r>:
 800ac4c:	b538      	push	{r3, r4, r5, lr}
 800ac4e:	4d07      	ldr	r5, [pc, #28]	; (800ac6c <_fstat_r+0x20>)
 800ac50:	2300      	movs	r3, #0
 800ac52:	4604      	mov	r4, r0
 800ac54:	4608      	mov	r0, r1
 800ac56:	4611      	mov	r1, r2
 800ac58:	602b      	str	r3, [r5, #0]
 800ac5a:	f7f6 fcc5 	bl	80015e8 <_fstat>
 800ac5e:	1c43      	adds	r3, r0, #1
 800ac60:	d102      	bne.n	800ac68 <_fstat_r+0x1c>
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	b103      	cbz	r3, 800ac68 <_fstat_r+0x1c>
 800ac66:	6023      	str	r3, [r4, #0]
 800ac68:	bd38      	pop	{r3, r4, r5, pc}
 800ac6a:	bf00      	nop
 800ac6c:	24004464 	.word	0x24004464

0800ac70 <_isatty_r>:
 800ac70:	b538      	push	{r3, r4, r5, lr}
 800ac72:	4d06      	ldr	r5, [pc, #24]	; (800ac8c <_isatty_r+0x1c>)
 800ac74:	2300      	movs	r3, #0
 800ac76:	4604      	mov	r4, r0
 800ac78:	4608      	mov	r0, r1
 800ac7a:	602b      	str	r3, [r5, #0]
 800ac7c:	f7f6 fcc4 	bl	8001608 <_isatty>
 800ac80:	1c43      	adds	r3, r0, #1
 800ac82:	d102      	bne.n	800ac8a <_isatty_r+0x1a>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	b103      	cbz	r3, 800ac8a <_isatty_r+0x1a>
 800ac88:	6023      	str	r3, [r4, #0]
 800ac8a:	bd38      	pop	{r3, r4, r5, pc}
 800ac8c:	24004464 	.word	0x24004464

0800ac90 <_init>:
 800ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac92:	bf00      	nop
 800ac94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac96:	bc08      	pop	{r3}
 800ac98:	469e      	mov	lr, r3
 800ac9a:	4770      	bx	lr

0800ac9c <_fini>:
 800ac9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac9e:	bf00      	nop
 800aca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca2:	bc08      	pop	{r3}
 800aca4:	469e      	mov	lr, r3
 800aca6:	4770      	bx	lr
